
EX.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002fa4  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  080030b0  080030b0  000130b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080030d4  080030d4  00020024  2**0
                  CONTENTS
  4 .ARM          00000000  080030d4  080030d4  00020024  2**0
                  CONTENTS
  5 .preinit_array 00000000  080030d4  080030d4  00020024  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080030d4  080030d4  000130d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080030d8  080030d8  000130d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000024  20000000  080030dc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000e8  20000024  08003100  00020024  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000010c  08003100  0002010c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020024  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a3cc  00000000  00000000  0002004d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001ed7  00000000  00000000  0002a419  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ab0  00000000  00000000  0002c2f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000980  00000000  00000000  0002cda0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017144  00000000  00000000  0002d720  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000cb26  00000000  00000000  00044864  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00082453  00000000  00000000  0005138a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d37dd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002974  00000000  00000000  000d3830  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000024 	.word	0x20000024
 8000128:	00000000 	.word	0x00000000
 800012c:	08003098 	.word	0x08003098

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000028 	.word	0x20000028
 8000148:	08003098 	.word	0x08003098

0800014c <isButtonPressed>:

//void subKeyProcess(){
//	//todo
//	button_flag[0] =1;
//}
int isButtonPressed(int index){
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
	if(button_flag[index]==1){
 8000154:	4a09      	ldr	r2, [pc, #36]	; (800017c <isButtonPressed+0x30>)
 8000156:	687b      	ldr	r3, [r7, #4]
 8000158:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800015c:	2b01      	cmp	r3, #1
 800015e:	d106      	bne.n	800016e <isButtonPressed+0x22>
		button_flag[index]=0;
 8000160:	4a06      	ldr	r2, [pc, #24]	; (800017c <isButtonPressed+0x30>)
 8000162:	687b      	ldr	r3, [r7, #4]
 8000164:	2100      	movs	r1, #0
 8000166:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		return 1;
 800016a:	2301      	movs	r3, #1
 800016c:	e000      	b.n	8000170 <isButtonPressed+0x24>
	}
	return 0;
 800016e:	2300      	movs	r3, #0
}
 8000170:	4618      	mov	r0, r3
 8000172:	370c      	adds	r7, #12
 8000174:	46bd      	mov	sp, r7
 8000176:	bc80      	pop	{r7}
 8000178:	4770      	bx	lr
 800017a:	bf00      	nop
 800017c:	2000009c 	.word	0x2000009c

08000180 <getKeyInput>:
int isButton1sPressed(int index){
	return (button1s_flag[index]==1);
}
void getKeyInput(){
 8000180:	b580      	push	{r7, lr}
 8000182:	b082      	sub	sp, #8
 8000184:	af00      	add	r7, sp, #0
	for(int i=0;i<NO_OF_BUTTONS;i++){
 8000186:	2300      	movs	r3, #0
 8000188:	607b      	str	r3, [r7, #4]
 800018a:	e075      	b.n	8000278 <getKeyInput+0xf8>
		KeyReg0[i] = KeyReg1[i];
 800018c:	4a3e      	ldr	r2, [pc, #248]	; (8000288 <getKeyInput+0x108>)
 800018e:	687b      	ldr	r3, [r7, #4]
 8000190:	4413      	add	r3, r2
 8000192:	7819      	ldrb	r1, [r3, #0]
 8000194:	4a3d      	ldr	r2, [pc, #244]	; (800028c <getKeyInput+0x10c>)
 8000196:	687b      	ldr	r3, [r7, #4]
 8000198:	4413      	add	r3, r2
 800019a:	460a      	mov	r2, r1
 800019c:	701a      	strb	r2, [r3, #0]
		KeyReg1[i] = KeyReg2[i];
 800019e:	4a3c      	ldr	r2, [pc, #240]	; (8000290 <getKeyInput+0x110>)
 80001a0:	687b      	ldr	r3, [r7, #4]
 80001a2:	4413      	add	r3, r2
 80001a4:	7819      	ldrb	r1, [r3, #0]
 80001a6:	4a38      	ldr	r2, [pc, #224]	; (8000288 <getKeyInput+0x108>)
 80001a8:	687b      	ldr	r3, [r7, #4]
 80001aa:	4413      	add	r3, r2
 80001ac:	460a      	mov	r2, r1
 80001ae:	701a      	strb	r2, [r3, #0]
		KeyReg2[i] = HAL_GPIO_ReadPin(buttonGpioPort[i], buttonGpioPin[i]);
 80001b0:	4a38      	ldr	r2, [pc, #224]	; (8000294 <getKeyInput+0x114>)
 80001b2:	687b      	ldr	r3, [r7, #4]
 80001b4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80001b8:	4937      	ldr	r1, [pc, #220]	; (8000298 <getKeyInput+0x118>)
 80001ba:	687b      	ldr	r3, [r7, #4]
 80001bc:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80001c0:	4619      	mov	r1, r3
 80001c2:	4610      	mov	r0, r2
 80001c4:	f001 ff30 	bl	8002028 <HAL_GPIO_ReadPin>
 80001c8:	4603      	mov	r3, r0
 80001ca:	4619      	mov	r1, r3
 80001cc:	4a30      	ldr	r2, [pc, #192]	; (8000290 <getKeyInput+0x110>)
 80001ce:	687b      	ldr	r3, [r7, #4]
 80001d0:	4413      	add	r3, r2
 80001d2:	460a      	mov	r2, r1
 80001d4:	701a      	strb	r2, [r3, #0]
		if((KeyReg0[i] == KeyReg1[i]) && (KeyReg1[i] == KeyReg2[i])){
 80001d6:	4a2d      	ldr	r2, [pc, #180]	; (800028c <getKeyInput+0x10c>)
 80001d8:	687b      	ldr	r3, [r7, #4]
 80001da:	4413      	add	r3, r2
 80001dc:	781a      	ldrb	r2, [r3, #0]
 80001de:	492a      	ldr	r1, [pc, #168]	; (8000288 <getKeyInput+0x108>)
 80001e0:	687b      	ldr	r3, [r7, #4]
 80001e2:	440b      	add	r3, r1
 80001e4:	781b      	ldrb	r3, [r3, #0]
 80001e6:	429a      	cmp	r2, r3
 80001e8:	d143      	bne.n	8000272 <getKeyInput+0xf2>
 80001ea:	4a27      	ldr	r2, [pc, #156]	; (8000288 <getKeyInput+0x108>)
 80001ec:	687b      	ldr	r3, [r7, #4]
 80001ee:	4413      	add	r3, r2
 80001f0:	781a      	ldrb	r2, [r3, #0]
 80001f2:	4927      	ldr	r1, [pc, #156]	; (8000290 <getKeyInput+0x110>)
 80001f4:	687b      	ldr	r3, [r7, #4]
 80001f6:	440b      	add	r3, r1
 80001f8:	781b      	ldrb	r3, [r3, #0]
 80001fa:	429a      	cmp	r2, r3
 80001fc:	d139      	bne.n	8000272 <getKeyInput+0xf2>
			if(KeyReg3[i]!= KeyReg2[i]){
 80001fe:	4a27      	ldr	r2, [pc, #156]	; (800029c <getKeyInput+0x11c>)
 8000200:	687b      	ldr	r3, [r7, #4]
 8000202:	4413      	add	r3, r2
 8000204:	781a      	ldrb	r2, [r3, #0]
 8000206:	4922      	ldr	r1, [pc, #136]	; (8000290 <getKeyInput+0x110>)
 8000208:	687b      	ldr	r3, [r7, #4]
 800020a:	440b      	add	r3, r1
 800020c:	781b      	ldrb	r3, [r3, #0]
 800020e:	429a      	cmp	r2, r3
 8000210:	d019      	beq.n	8000246 <getKeyInput+0xc6>
				KeyReg3[i] = KeyReg2[i];
 8000212:	4a1f      	ldr	r2, [pc, #124]	; (8000290 <getKeyInput+0x110>)
 8000214:	687b      	ldr	r3, [r7, #4]
 8000216:	4413      	add	r3, r2
 8000218:	7819      	ldrb	r1, [r3, #0]
 800021a:	4a20      	ldr	r2, [pc, #128]	; (800029c <getKeyInput+0x11c>)
 800021c:	687b      	ldr	r3, [r7, #4]
 800021e:	4413      	add	r3, r2
 8000220:	460a      	mov	r2, r1
 8000222:	701a      	strb	r2, [r3, #0]
				if(KeyReg2[i] == PRESSED_STATE){
 8000224:	4a1a      	ldr	r2, [pc, #104]	; (8000290 <getKeyInput+0x110>)
 8000226:	687b      	ldr	r3, [r7, #4]
 8000228:	4413      	add	r3, r2
 800022a:	781b      	ldrb	r3, [r3, #0]
 800022c:	2b00      	cmp	r3, #0
 800022e:	d120      	bne.n	8000272 <getKeyInput+0xf2>
					//TODO
					button_flag[i]=1;
 8000230:	4a1b      	ldr	r2, [pc, #108]	; (80002a0 <getKeyInput+0x120>)
 8000232:	687b      	ldr	r3, [r7, #4]
 8000234:	2101      	movs	r1, #1
 8000236:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
//					if(button_flag[i]>=2){
//						button1s_flag[i] = 1;
//					}
					TimeForKeyPress[i] = 0;
 800023a:	4a1a      	ldr	r2, [pc, #104]	; (80002a4 <getKeyInput+0x124>)
 800023c:	687b      	ldr	r3, [r7, #4]
 800023e:	2100      	movs	r1, #0
 8000240:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8000244:	e015      	b.n	8000272 <getKeyInput+0xf2>
//				else {
//					button_flag[i] = 0;
//					button1s_flag[i] = 0;
//				}
			}else{
				TimeForKeyPress[i]++;
 8000246:	4a17      	ldr	r2, [pc, #92]	; (80002a4 <getKeyInput+0x124>)
 8000248:	687b      	ldr	r3, [r7, #4]
 800024a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800024e:	1c5a      	adds	r2, r3, #1
 8000250:	4914      	ldr	r1, [pc, #80]	; (80002a4 <getKeyInput+0x124>)
 8000252:	687b      	ldr	r3, [r7, #4]
 8000254:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				if(TimeForKeyPress[i] == duration){
 8000258:	4a12      	ldr	r2, [pc, #72]	; (80002a4 <getKeyInput+0x124>)
 800025a:	687b      	ldr	r3, [r7, #4]
 800025c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000260:	4b11      	ldr	r3, [pc, #68]	; (80002a8 <getKeyInput+0x128>)
 8000262:	681b      	ldr	r3, [r3, #0]
 8000264:	429a      	cmp	r2, r3
 8000266:	d104      	bne.n	8000272 <getKeyInput+0xf2>
//					if(KeyReg2 == PRESSED_STATE){
//						button1s_flag[i]=1;
//						button_flag[i]=1;
//					}
//					TimeForKeyPress[i] = 0;
					KeyReg3[i] = NORMAL_STATE;
 8000268:	4a0c      	ldr	r2, [pc, #48]	; (800029c <getKeyInput+0x11c>)
 800026a:	687b      	ldr	r3, [r7, #4]
 800026c:	4413      	add	r3, r2
 800026e:	2201      	movs	r2, #1
 8000270:	701a      	strb	r2, [r3, #0]
	for(int i=0;i<NO_OF_BUTTONS;i++){
 8000272:	687b      	ldr	r3, [r7, #4]
 8000274:	3301      	adds	r3, #1
 8000276:	607b      	str	r3, [r7, #4]
 8000278:	687b      	ldr	r3, [r7, #4]
 800027a:	2b02      	cmp	r3, #2
 800027c:	dd86      	ble.n	800018c <getKeyInput+0xc>
				}
			}
		}
	}
}
 800027e:	bf00      	nop
 8000280:	bf00      	nop
 8000282:	3708      	adds	r7, #8
 8000284:	46bd      	mov	sp, r7
 8000286:	bd80      	pop	{r7, pc}
 8000288:	20000044 	.word	0x20000044
 800028c:	20000040 	.word	0x20000040
 8000290:	20000048 	.word	0x20000048
 8000294:	20000004 	.word	0x20000004
 8000298:	20000010 	.word	0x20000010
 800029c:	2000004c 	.word	0x2000004c
 80002a0:	2000009c 	.word	0x2000009c
 80002a4:	200000b4 	.word	0x200000b4
 80002a8:	20000000 	.word	0x20000000

080002ac <mode_run>:
#include "button1_for_mode.h"
#include "mode1.h"
#include "mode2.h"
#include "mode3.h"
#include "mode4.h"
void mode_run(){
 80002ac:	b580      	push	{r7, lr}
 80002ae:	af00      	add	r7, sp, #0
	switch(status){
 80002b0:	4bab      	ldr	r3, [pc, #684]	; (8000560 <mode_run+0x2b4>)
 80002b2:	681b      	ldr	r3, [r3, #0]
 80002b4:	2b04      	cmp	r3, #4
 80002b6:	f200 8146 	bhi.w	8000546 <mode_run+0x29a>
 80002ba:	a201      	add	r2, pc, #4	; (adr r2, 80002c0 <mode_run+0x14>)
 80002bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80002c0:	080002d5 	.word	0x080002d5
 80002c4:	080003bf 	.word	0x080003bf
 80002c8:	080003f7 	.word	0x080003f7
 80002cc:	0800042f 	.word	0x0800042f
 80002d0:	08000467 	.word	0x08000467
		case 0:
			if(isButtonPressed(0)){	// nhan button 1 se chuyen sang trang thai tiep theo
 80002d4:	2000      	movs	r0, #0
 80002d6:	f7ff ff39 	bl	800014c <isButtonPressed>
 80002da:	4603      	mov	r3, r0
 80002dc:	2b00      	cmp	r3, #0
 80002de:	f000 8134 	beq.w	800054a <mode_run+0x29e>
				status = 1;		// trang thai cua may trang thai
 80002e2:	4b9f      	ldr	r3, [pc, #636]	; (8000560 <mode_run+0x2b4>)
 80002e4:	2201      	movs	r2, #1
 80002e6:	601a      	str	r2, [r3, #0]
				modamber = 2;	// thoi gian den vang ban dau
 80002e8:	4b9e      	ldr	r3, [pc, #632]	; (8000564 <mode_run+0x2b8>)
 80002ea:	2202      	movs	r2, #2
 80002ec:	601a      	str	r2, [r3, #0]
				modgreen= 3;	// thoi gian den xanh ban dau
 80002ee:	4b9e      	ldr	r3, [pc, #632]	; (8000568 <mode_run+0x2bc>)
 80002f0:	2203      	movs	r2, #3
 80002f2:	601a      	str	r2, [r3, #0]
				modred= 5;		// thoi gian den do ban dau
 80002f4:	4b9d      	ldr	r3, [pc, #628]	; (800056c <mode_run+0x2c0>)
 80002f6:	2205      	movs	r2, #5
 80002f8:	601a      	str	r2, [r3, #0]
				counter0 = modamber + modgreen + modred;
 80002fa:	4b9a      	ldr	r3, [pc, #616]	; (8000564 <mode_run+0x2b8>)
 80002fc:	681a      	ldr	r2, [r3, #0]
 80002fe:	4b9a      	ldr	r3, [pc, #616]	; (8000568 <mode_run+0x2bc>)
 8000300:	681b      	ldr	r3, [r3, #0]
 8000302:	441a      	add	r2, r3
 8000304:	4b99      	ldr	r3, [pc, #612]	; (800056c <mode_run+0x2c0>)
 8000306:	681b      	ldr	r3, [r3, #0]
 8000308:	4413      	add	r3, r2
 800030a:	4a99      	ldr	r2, [pc, #612]	; (8000570 <mode_run+0x2c4>)
 800030c:	6013      	str	r3, [r2, #0]
				HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, 1);
 800030e:	2201      	movs	r2, #1
 8000310:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000314:	4897      	ldr	r0, [pc, #604]	; (8000574 <mode_run+0x2c8>)
 8000316:	f001 fe9e 	bl	8002056 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, 1);
 800031a:	2201      	movs	r2, #1
 800031c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000320:	4894      	ldr	r0, [pc, #592]	; (8000574 <mode_run+0x2c8>)
 8000322:	f001 fe98 	bl	8002056 <HAL_GPIO_WritePin>
				x = modred/10;	// x de luu hang chuc cua gia tri den led do
 8000326:	4b91      	ldr	r3, [pc, #580]	; (800056c <mode_run+0x2c0>)
 8000328:	681b      	ldr	r3, [r3, #0]
 800032a:	4a93      	ldr	r2, [pc, #588]	; (8000578 <mode_run+0x2cc>)
 800032c:	fb82 1203 	smull	r1, r2, r2, r3
 8000330:	1092      	asrs	r2, r2, #2
 8000332:	17db      	asrs	r3, r3, #31
 8000334:	1ad3      	subs	r3, r2, r3
 8000336:	4a91      	ldr	r2, [pc, #580]	; (800057c <mode_run+0x2d0>)
 8000338:	6013      	str	r3, [r2, #0]
				y = modred%10;	// y de luu hang don vi cua gia tri den led do
 800033a:	4b8c      	ldr	r3, [pc, #560]	; (800056c <mode_run+0x2c0>)
 800033c:	6819      	ldr	r1, [r3, #0]
 800033e:	4b8e      	ldr	r3, [pc, #568]	; (8000578 <mode_run+0x2cc>)
 8000340:	fb83 2301 	smull	r2, r3, r3, r1
 8000344:	109a      	asrs	r2, r3, #2
 8000346:	17cb      	asrs	r3, r1, #31
 8000348:	1ad2      	subs	r2, r2, r3
 800034a:	4613      	mov	r3, r2
 800034c:	009b      	lsls	r3, r3, #2
 800034e:	4413      	add	r3, r2
 8000350:	005b      	lsls	r3, r3, #1
 8000352:	1aca      	subs	r2, r1, r3
 8000354:	4b8a      	ldr	r3, [pc, #552]	; (8000580 <mode_run+0x2d4>)
 8000356:	601a      	str	r2, [r3, #0]
				x1 = modgreen/10; 	// x1 de luu hang chuc cua gia tri den led xanh
 8000358:	4b83      	ldr	r3, [pc, #524]	; (8000568 <mode_run+0x2bc>)
 800035a:	681b      	ldr	r3, [r3, #0]
 800035c:	4a86      	ldr	r2, [pc, #536]	; (8000578 <mode_run+0x2cc>)
 800035e:	fb82 1203 	smull	r1, r2, r2, r3
 8000362:	1092      	asrs	r2, r2, #2
 8000364:	17db      	asrs	r3, r3, #31
 8000366:	1ad3      	subs	r3, r2, r3
 8000368:	4a86      	ldr	r2, [pc, #536]	; (8000584 <mode_run+0x2d8>)
 800036a:	6013      	str	r3, [r2, #0]
				t1 = modgreen%10;	// t1 de luu hang don vi cua gia tri den led xanh
 800036c:	4b7e      	ldr	r3, [pc, #504]	; (8000568 <mode_run+0x2bc>)
 800036e:	6819      	ldr	r1, [r3, #0]
 8000370:	4b81      	ldr	r3, [pc, #516]	; (8000578 <mode_run+0x2cc>)
 8000372:	fb83 2301 	smull	r2, r3, r3, r1
 8000376:	109a      	asrs	r2, r3, #2
 8000378:	17cb      	asrs	r3, r1, #31
 800037a:	1ad2      	subs	r2, r2, r3
 800037c:	4613      	mov	r3, r2
 800037e:	009b      	lsls	r3, r3, #2
 8000380:	4413      	add	r3, r2
 8000382:	005b      	lsls	r3, r3, #1
 8000384:	1aca      	subs	r2, r1, r3
 8000386:	4b80      	ldr	r3, [pc, #512]	; (8000588 <mode_run+0x2dc>)
 8000388:	601a      	str	r2, [r3, #0]
				x2 = modamber/10;	// x2 de luu hang chuc cua gia tri den led vang
 800038a:	4b76      	ldr	r3, [pc, #472]	; (8000564 <mode_run+0x2b8>)
 800038c:	681b      	ldr	r3, [r3, #0]
 800038e:	4a7a      	ldr	r2, [pc, #488]	; (8000578 <mode_run+0x2cc>)
 8000390:	fb82 1203 	smull	r1, r2, r2, r3
 8000394:	1092      	asrs	r2, r2, #2
 8000396:	17db      	asrs	r3, r3, #31
 8000398:	1ad3      	subs	r3, r2, r3
 800039a:	4a7c      	ldr	r2, [pc, #496]	; (800058c <mode_run+0x2e0>)
 800039c:	6013      	str	r3, [r2, #0]
				y2 = modamber%10;	// y2 de luu hang don vi cua gia tri den led vang
 800039e:	4b71      	ldr	r3, [pc, #452]	; (8000564 <mode_run+0x2b8>)
 80003a0:	6819      	ldr	r1, [r3, #0]
 80003a2:	4b75      	ldr	r3, [pc, #468]	; (8000578 <mode_run+0x2cc>)
 80003a4:	fb83 2301 	smull	r2, r3, r3, r1
 80003a8:	109a      	asrs	r2, r3, #2
 80003aa:	17cb      	asrs	r3, r1, #31
 80003ac:	1ad2      	subs	r2, r2, r3
 80003ae:	4613      	mov	r3, r2
 80003b0:	009b      	lsls	r3, r3, #2
 80003b2:	4413      	add	r3, r2
 80003b4:	005b      	lsls	r3, r3, #1
 80003b6:	1aca      	subs	r2, r1, r3
 80003b8:	4b75      	ldr	r3, [pc, #468]	; (8000590 <mode_run+0x2e4>)
 80003ba:	601a      	str	r2, [r3, #0]
			}
			break;
 80003bc:	e0c5      	b.n	800054a <mode_run+0x29e>
		case 1:
			mode1_run();
 80003be:	f000 fc27 	bl	8000c10 <mode1_run>
			if(isButtonPressed(0)){	// nhan button 1 se chuyen sang trang thai tiep theo
 80003c2:	2000      	movs	r0, #0
 80003c4:	f7ff fec2 	bl	800014c <isButtonPressed>
 80003c8:	4603      	mov	r3, r0
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	f000 80bf 	beq.w	800054e <mode_run+0x2a2>
				status = 2;
 80003d0:	4b63      	ldr	r3, [pc, #396]	; (8000560 <mode_run+0x2b4>)
 80003d2:	2202      	movs	r2, #2
 80003d4:	601a      	str	r2, [r3, #0]
				HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, 0);
 80003d6:	2200      	movs	r2, #0
 80003d8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80003dc:	4865      	ldr	r0, [pc, #404]	; (8000574 <mode_run+0x2c8>)
 80003de:	f001 fe3a 	bl	8002056 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, 1);
 80003e2:	2201      	movs	r2, #1
 80003e4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80003e8:	4862      	ldr	r0, [pc, #392]	; (8000574 <mode_run+0x2c8>)
 80003ea:	f001 fe34 	bl	8002056 <HAL_GPIO_WritePin>
				display7SEG(0);
 80003ee:	2000      	movs	r0, #0
 80003f0:	f000 f8d0 	bl	8000594 <display7SEG>
			}
			break;
 80003f4:	e0ab      	b.n	800054e <mode_run+0x2a2>
		case 2:
			mode2_run();
 80003f6:	f000 ffd5 	bl	80013a4 <mode2_run>
			if(isButtonPressed(0)){ // nhan button 1 se chuyen sang trang thai tiep theo
 80003fa:	2000      	movs	r0, #0
 80003fc:	f7ff fea6 	bl	800014c <isButtonPressed>
 8000400:	4603      	mov	r3, r0
 8000402:	2b00      	cmp	r3, #0
 8000404:	f000 80a5 	beq.w	8000552 <mode_run+0x2a6>
				status = 3;
 8000408:	4b55      	ldr	r3, [pc, #340]	; (8000560 <mode_run+0x2b4>)
 800040a:	2203      	movs	r2, #3
 800040c:	601a      	str	r2, [r3, #0]
				HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, 0);
 800040e:	2200      	movs	r2, #0
 8000410:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000414:	4857      	ldr	r0, [pc, #348]	; (8000574 <mode_run+0x2c8>)
 8000416:	f001 fe1e 	bl	8002056 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, 1);
 800041a:	2201      	movs	r2, #1
 800041c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000420:	4854      	ldr	r0, [pc, #336]	; (8000574 <mode_run+0x2c8>)
 8000422:	f001 fe18 	bl	8002056 <HAL_GPIO_WritePin>
				display7SEG(0);
 8000426:	2000      	movs	r0, #0
 8000428:	f000 f8b4 	bl	8000594 <display7SEG>
			}
			break;
 800042c:	e091      	b.n	8000552 <mode_run+0x2a6>
		case 3:
			mode3_run();
 800042e:	f001 f8c9 	bl	80015c4 <mode3_run>
			if(isButtonPressed(0)){ // nhan button 1 se chuyen sang trang thai tiep theo
 8000432:	2000      	movs	r0, #0
 8000434:	f7ff fe8a 	bl	800014c <isButtonPressed>
 8000438:	4603      	mov	r3, r0
 800043a:	2b00      	cmp	r3, #0
 800043c:	f000 808b 	beq.w	8000556 <mode_run+0x2aa>
				status = 4;
 8000440:	4b47      	ldr	r3, [pc, #284]	; (8000560 <mode_run+0x2b4>)
 8000442:	2204      	movs	r2, #4
 8000444:	601a      	str	r2, [r3, #0]
				HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, 0);
 8000446:	2200      	movs	r2, #0
 8000448:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800044c:	4849      	ldr	r0, [pc, #292]	; (8000574 <mode_run+0x2c8>)
 800044e:	f001 fe02 	bl	8002056 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, 1);
 8000452:	2201      	movs	r2, #1
 8000454:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000458:	4846      	ldr	r0, [pc, #280]	; (8000574 <mode_run+0x2c8>)
 800045a:	f001 fdfc 	bl	8002056 <HAL_GPIO_WritePin>
				display7SEG(0);
 800045e:	2000      	movs	r0, #0
 8000460:	f000 f898 	bl	8000594 <display7SEG>
			}
			break;
 8000464:	e077      	b.n	8000556 <mode_run+0x2aa>
		case 4:
			mode4_run();
 8000466:	f001 f9bd 	bl	80017e4 <mode4_run>
			if(isButtonPressed(0)){	// nhan button 1 se chuyen sang trang thai tiep theo
 800046a:	2000      	movs	r0, #0
 800046c:	f7ff fe6e 	bl	800014c <isButtonPressed>
 8000470:	4603      	mov	r3, r0
 8000472:	2b00      	cmp	r3, #0
 8000474:	d071      	beq.n	800055a <mode_run+0x2ae>
				// thay doi gia tri cac den led thanh gia tri moi sau khi tang
				x = modred/10;
 8000476:	4b3d      	ldr	r3, [pc, #244]	; (800056c <mode_run+0x2c0>)
 8000478:	681b      	ldr	r3, [r3, #0]
 800047a:	4a3f      	ldr	r2, [pc, #252]	; (8000578 <mode_run+0x2cc>)
 800047c:	fb82 1203 	smull	r1, r2, r2, r3
 8000480:	1092      	asrs	r2, r2, #2
 8000482:	17db      	asrs	r3, r3, #31
 8000484:	1ad3      	subs	r3, r2, r3
 8000486:	4a3d      	ldr	r2, [pc, #244]	; (800057c <mode_run+0x2d0>)
 8000488:	6013      	str	r3, [r2, #0]
				y = modred%10;
 800048a:	4b38      	ldr	r3, [pc, #224]	; (800056c <mode_run+0x2c0>)
 800048c:	6819      	ldr	r1, [r3, #0]
 800048e:	4b3a      	ldr	r3, [pc, #232]	; (8000578 <mode_run+0x2cc>)
 8000490:	fb83 2301 	smull	r2, r3, r3, r1
 8000494:	109a      	asrs	r2, r3, #2
 8000496:	17cb      	asrs	r3, r1, #31
 8000498:	1ad2      	subs	r2, r2, r3
 800049a:	4613      	mov	r3, r2
 800049c:	009b      	lsls	r3, r3, #2
 800049e:	4413      	add	r3, r2
 80004a0:	005b      	lsls	r3, r3, #1
 80004a2:	1aca      	subs	r2, r1, r3
 80004a4:	4b36      	ldr	r3, [pc, #216]	; (8000580 <mode_run+0x2d4>)
 80004a6:	601a      	str	r2, [r3, #0]
				x1 = modgreen/10;
 80004a8:	4b2f      	ldr	r3, [pc, #188]	; (8000568 <mode_run+0x2bc>)
 80004aa:	681b      	ldr	r3, [r3, #0]
 80004ac:	4a32      	ldr	r2, [pc, #200]	; (8000578 <mode_run+0x2cc>)
 80004ae:	fb82 1203 	smull	r1, r2, r2, r3
 80004b2:	1092      	asrs	r2, r2, #2
 80004b4:	17db      	asrs	r3, r3, #31
 80004b6:	1ad3      	subs	r3, r2, r3
 80004b8:	4a32      	ldr	r2, [pc, #200]	; (8000584 <mode_run+0x2d8>)
 80004ba:	6013      	str	r3, [r2, #0]
				t1 = modgreen%10;
 80004bc:	4b2a      	ldr	r3, [pc, #168]	; (8000568 <mode_run+0x2bc>)
 80004be:	6819      	ldr	r1, [r3, #0]
 80004c0:	4b2d      	ldr	r3, [pc, #180]	; (8000578 <mode_run+0x2cc>)
 80004c2:	fb83 2301 	smull	r2, r3, r3, r1
 80004c6:	109a      	asrs	r2, r3, #2
 80004c8:	17cb      	asrs	r3, r1, #31
 80004ca:	1ad2      	subs	r2, r2, r3
 80004cc:	4613      	mov	r3, r2
 80004ce:	009b      	lsls	r3, r3, #2
 80004d0:	4413      	add	r3, r2
 80004d2:	005b      	lsls	r3, r3, #1
 80004d4:	1aca      	subs	r2, r1, r3
 80004d6:	4b2c      	ldr	r3, [pc, #176]	; (8000588 <mode_run+0x2dc>)
 80004d8:	601a      	str	r2, [r3, #0]
				x2 = modamber/10;
 80004da:	4b22      	ldr	r3, [pc, #136]	; (8000564 <mode_run+0x2b8>)
 80004dc:	681b      	ldr	r3, [r3, #0]
 80004de:	4a26      	ldr	r2, [pc, #152]	; (8000578 <mode_run+0x2cc>)
 80004e0:	fb82 1203 	smull	r1, r2, r2, r3
 80004e4:	1092      	asrs	r2, r2, #2
 80004e6:	17db      	asrs	r3, r3, #31
 80004e8:	1ad3      	subs	r3, r2, r3
 80004ea:	4a28      	ldr	r2, [pc, #160]	; (800058c <mode_run+0x2e0>)
 80004ec:	6013      	str	r3, [r2, #0]
				y2 = modamber%10;
 80004ee:	4b1d      	ldr	r3, [pc, #116]	; (8000564 <mode_run+0x2b8>)
 80004f0:	6819      	ldr	r1, [r3, #0]
 80004f2:	4b21      	ldr	r3, [pc, #132]	; (8000578 <mode_run+0x2cc>)
 80004f4:	fb83 2301 	smull	r2, r3, r3, r1
 80004f8:	109a      	asrs	r2, r3, #2
 80004fa:	17cb      	asrs	r3, r1, #31
 80004fc:	1ad2      	subs	r2, r2, r3
 80004fe:	4613      	mov	r3, r2
 8000500:	009b      	lsls	r3, r3, #2
 8000502:	4413      	add	r3, r2
 8000504:	005b      	lsls	r3, r3, #1
 8000506:	1aca      	subs	r2, r1, r3
 8000508:	4b21      	ldr	r3, [pc, #132]	; (8000590 <mode_run+0x2e4>)
 800050a:	601a      	str	r2, [r3, #0]
				counter0 = modamber+modgreen+modred;
 800050c:	4b15      	ldr	r3, [pc, #84]	; (8000564 <mode_run+0x2b8>)
 800050e:	681a      	ldr	r2, [r3, #0]
 8000510:	4b15      	ldr	r3, [pc, #84]	; (8000568 <mode_run+0x2bc>)
 8000512:	681b      	ldr	r3, [r3, #0]
 8000514:	441a      	add	r2, r3
 8000516:	4b15      	ldr	r3, [pc, #84]	; (800056c <mode_run+0x2c0>)
 8000518:	681b      	ldr	r3, [r3, #0]
 800051a:	4413      	add	r3, r2
 800051c:	4a14      	ldr	r2, [pc, #80]	; (8000570 <mode_run+0x2c4>)
 800051e:	6013      	str	r3, [r2, #0]
				status = 1;
 8000520:	4b0f      	ldr	r3, [pc, #60]	; (8000560 <mode_run+0x2b4>)
 8000522:	2201      	movs	r2, #1
 8000524:	601a      	str	r2, [r3, #0]
				HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, 0);
 8000526:	2200      	movs	r2, #0
 8000528:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800052c:	4811      	ldr	r0, [pc, #68]	; (8000574 <mode_run+0x2c8>)
 800052e:	f001 fd92 	bl	8002056 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, 1);
 8000532:	2201      	movs	r2, #1
 8000534:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000538:	480e      	ldr	r0, [pc, #56]	; (8000574 <mode_run+0x2c8>)
 800053a:	f001 fd8c 	bl	8002056 <HAL_GPIO_WritePin>
				display7SEG(0);
 800053e:	2000      	movs	r0, #0
 8000540:	f000 f828 	bl	8000594 <display7SEG>
			}
			break;
 8000544:	e009      	b.n	800055a <mode_run+0x2ae>
		default:
			break;
 8000546:	bf00      	nop
 8000548:	e008      	b.n	800055c <mode_run+0x2b0>
			break;
 800054a:	bf00      	nop
 800054c:	e006      	b.n	800055c <mode_run+0x2b0>
			break;
 800054e:	bf00      	nop
 8000550:	e004      	b.n	800055c <mode_run+0x2b0>
			break;
 8000552:	bf00      	nop
 8000554:	e002      	b.n	800055c <mode_run+0x2b0>
			break;
 8000556:	bf00      	nop
 8000558:	e000      	b.n	800055c <mode_run+0x2b0>
			break;
 800055a:	bf00      	nop
	}
}
 800055c:	bf00      	nop
 800055e:	bd80      	pop	{r7, pc}
 8000560:	20000050 	.word	0x20000050
 8000564:	2000005c 	.word	0x2000005c
 8000568:	20000060 	.word	0x20000060
 800056c:	20000058 	.word	0x20000058
 8000570:	20000054 	.word	0x20000054
 8000574:	40010800 	.word	0x40010800
 8000578:	66666667 	.word	0x66666667
 800057c:	20000064 	.word	0x20000064
 8000580:	20000068 	.word	0x20000068
 8000584:	2000006c 	.word	0x2000006c
 8000588:	20000070 	.word	0x20000070
 800058c:	20000074 	.word	0x20000074
 8000590:	20000078 	.word	0x20000078

08000594 <display7SEG>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void display7SEG(int num){
 8000594:	b580      	push	{r7, lr}
 8000596:	b08a      	sub	sp, #40	; 0x28
 8000598:	af00      	add	r7, sp, #0
 800059a:	6078      	str	r0, [r7, #4]
	int a=0, b=0, c=0, d=0, e=0, f=0, g=0;
 800059c:	2300      	movs	r3, #0
 800059e:	627b      	str	r3, [r7, #36]	; 0x24
 80005a0:	2300      	movs	r3, #0
 80005a2:	623b      	str	r3, [r7, #32]
 80005a4:	2300      	movs	r3, #0
 80005a6:	61fb      	str	r3, [r7, #28]
 80005a8:	2300      	movs	r3, #0
 80005aa:	61bb      	str	r3, [r7, #24]
 80005ac:	2300      	movs	r3, #0
 80005ae:	617b      	str	r3, [r7, #20]
 80005b0:	2300      	movs	r3, #0
 80005b2:	613b      	str	r3, [r7, #16]
 80005b4:	2300      	movs	r3, #0
 80005b6:	60fb      	str	r3, [r7, #12]
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	2b09      	cmp	r3, #9
 80005bc:	f200 80ae 	bhi.w	800071c <display7SEG+0x188>
 80005c0:	a201      	add	r2, pc, #4	; (adr r2, 80005c8 <display7SEG+0x34>)
 80005c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80005c6:	bf00      	nop
 80005c8:	080005f1 	.word	0x080005f1
 80005cc:	0800060f 	.word	0x0800060f
 80005d0:	0800062d 	.word	0x0800062d
 80005d4:	0800064b 	.word	0x0800064b
 80005d8:	08000669 	.word	0x08000669
 80005dc:	08000687 	.word	0x08000687
 80005e0:	080006a5 	.word	0x080006a5
 80005e4:	080006c3 	.word	0x080006c3
 80005e8:	080006e1 	.word	0x080006e1
 80005ec:	080006ff 	.word	0x080006ff
	switch(num){
	case 0:
		a = 0; b = 0; c = 0; d = 0; e = 0; f = 0; g = 1;
 80005f0:	2300      	movs	r3, #0
 80005f2:	627b      	str	r3, [r7, #36]	; 0x24
 80005f4:	2300      	movs	r3, #0
 80005f6:	623b      	str	r3, [r7, #32]
 80005f8:	2300      	movs	r3, #0
 80005fa:	61fb      	str	r3, [r7, #28]
 80005fc:	2300      	movs	r3, #0
 80005fe:	61bb      	str	r3, [r7, #24]
 8000600:	2300      	movs	r3, #0
 8000602:	617b      	str	r3, [r7, #20]
 8000604:	2300      	movs	r3, #0
 8000606:	613b      	str	r3, [r7, #16]
 8000608:	2301      	movs	r3, #1
 800060a:	60fb      	str	r3, [r7, #12]
		break;
 800060c:	e095      	b.n	800073a <display7SEG+0x1a6>
	case 1:
		a = 1; b = 0; c = 0; d = 1; e = 1; f = 1; g = 1;
 800060e:	2301      	movs	r3, #1
 8000610:	627b      	str	r3, [r7, #36]	; 0x24
 8000612:	2300      	movs	r3, #0
 8000614:	623b      	str	r3, [r7, #32]
 8000616:	2300      	movs	r3, #0
 8000618:	61fb      	str	r3, [r7, #28]
 800061a:	2301      	movs	r3, #1
 800061c:	61bb      	str	r3, [r7, #24]
 800061e:	2301      	movs	r3, #1
 8000620:	617b      	str	r3, [r7, #20]
 8000622:	2301      	movs	r3, #1
 8000624:	613b      	str	r3, [r7, #16]
 8000626:	2301      	movs	r3, #1
 8000628:	60fb      	str	r3, [r7, #12]
		break;
 800062a:	e086      	b.n	800073a <display7SEG+0x1a6>
	case 2:
		a = 0; b = 0; c = 1; d = 0; e = 0; f = 1; g = 0;
 800062c:	2300      	movs	r3, #0
 800062e:	627b      	str	r3, [r7, #36]	; 0x24
 8000630:	2300      	movs	r3, #0
 8000632:	623b      	str	r3, [r7, #32]
 8000634:	2301      	movs	r3, #1
 8000636:	61fb      	str	r3, [r7, #28]
 8000638:	2300      	movs	r3, #0
 800063a:	61bb      	str	r3, [r7, #24]
 800063c:	2300      	movs	r3, #0
 800063e:	617b      	str	r3, [r7, #20]
 8000640:	2301      	movs	r3, #1
 8000642:	613b      	str	r3, [r7, #16]
 8000644:	2300      	movs	r3, #0
 8000646:	60fb      	str	r3, [r7, #12]
		break;
 8000648:	e077      	b.n	800073a <display7SEG+0x1a6>
	case 3:
		a = 0; b = 0; c = 0; d = 0; e = 1; f = 1; g = 0;
 800064a:	2300      	movs	r3, #0
 800064c:	627b      	str	r3, [r7, #36]	; 0x24
 800064e:	2300      	movs	r3, #0
 8000650:	623b      	str	r3, [r7, #32]
 8000652:	2300      	movs	r3, #0
 8000654:	61fb      	str	r3, [r7, #28]
 8000656:	2300      	movs	r3, #0
 8000658:	61bb      	str	r3, [r7, #24]
 800065a:	2301      	movs	r3, #1
 800065c:	617b      	str	r3, [r7, #20]
 800065e:	2301      	movs	r3, #1
 8000660:	613b      	str	r3, [r7, #16]
 8000662:	2300      	movs	r3, #0
 8000664:	60fb      	str	r3, [r7, #12]
		break;
 8000666:	e068      	b.n	800073a <display7SEG+0x1a6>
	case 4:
		a = 1; b = 0; c = 0; d = 1; e = 1; f = 0; g = 0;
 8000668:	2301      	movs	r3, #1
 800066a:	627b      	str	r3, [r7, #36]	; 0x24
 800066c:	2300      	movs	r3, #0
 800066e:	623b      	str	r3, [r7, #32]
 8000670:	2300      	movs	r3, #0
 8000672:	61fb      	str	r3, [r7, #28]
 8000674:	2301      	movs	r3, #1
 8000676:	61bb      	str	r3, [r7, #24]
 8000678:	2301      	movs	r3, #1
 800067a:	617b      	str	r3, [r7, #20]
 800067c:	2300      	movs	r3, #0
 800067e:	613b      	str	r3, [r7, #16]
 8000680:	2300      	movs	r3, #0
 8000682:	60fb      	str	r3, [r7, #12]
		break;
 8000684:	e059      	b.n	800073a <display7SEG+0x1a6>
	case 5:
		a = 0; b = 1; c = 0; d = 0; e = 1; f = 0; g = 0;
 8000686:	2300      	movs	r3, #0
 8000688:	627b      	str	r3, [r7, #36]	; 0x24
 800068a:	2301      	movs	r3, #1
 800068c:	623b      	str	r3, [r7, #32]
 800068e:	2300      	movs	r3, #0
 8000690:	61fb      	str	r3, [r7, #28]
 8000692:	2300      	movs	r3, #0
 8000694:	61bb      	str	r3, [r7, #24]
 8000696:	2301      	movs	r3, #1
 8000698:	617b      	str	r3, [r7, #20]
 800069a:	2300      	movs	r3, #0
 800069c:	613b      	str	r3, [r7, #16]
 800069e:	2300      	movs	r3, #0
 80006a0:	60fb      	str	r3, [r7, #12]
		break;
 80006a2:	e04a      	b.n	800073a <display7SEG+0x1a6>
	case 6:
		a = 0; b = 1; c = 0; d = 0; e = 0; f = 0; g = 0;
 80006a4:	2300      	movs	r3, #0
 80006a6:	627b      	str	r3, [r7, #36]	; 0x24
 80006a8:	2301      	movs	r3, #1
 80006aa:	623b      	str	r3, [r7, #32]
 80006ac:	2300      	movs	r3, #0
 80006ae:	61fb      	str	r3, [r7, #28]
 80006b0:	2300      	movs	r3, #0
 80006b2:	61bb      	str	r3, [r7, #24]
 80006b4:	2300      	movs	r3, #0
 80006b6:	617b      	str	r3, [r7, #20]
 80006b8:	2300      	movs	r3, #0
 80006ba:	613b      	str	r3, [r7, #16]
 80006bc:	2300      	movs	r3, #0
 80006be:	60fb      	str	r3, [r7, #12]
		break;
 80006c0:	e03b      	b.n	800073a <display7SEG+0x1a6>
	case 7:
		a = 0; b = 0; c = 0; d = 1; e = 1; f = 1; g = 1;
 80006c2:	2300      	movs	r3, #0
 80006c4:	627b      	str	r3, [r7, #36]	; 0x24
 80006c6:	2300      	movs	r3, #0
 80006c8:	623b      	str	r3, [r7, #32]
 80006ca:	2300      	movs	r3, #0
 80006cc:	61fb      	str	r3, [r7, #28]
 80006ce:	2301      	movs	r3, #1
 80006d0:	61bb      	str	r3, [r7, #24]
 80006d2:	2301      	movs	r3, #1
 80006d4:	617b      	str	r3, [r7, #20]
 80006d6:	2301      	movs	r3, #1
 80006d8:	613b      	str	r3, [r7, #16]
 80006da:	2301      	movs	r3, #1
 80006dc:	60fb      	str	r3, [r7, #12]
		break;
 80006de:	e02c      	b.n	800073a <display7SEG+0x1a6>
	case 8:
		a = 0; b = 0; c = 0; d = 0; e = 0; f = 0; g = 0;
 80006e0:	2300      	movs	r3, #0
 80006e2:	627b      	str	r3, [r7, #36]	; 0x24
 80006e4:	2300      	movs	r3, #0
 80006e6:	623b      	str	r3, [r7, #32]
 80006e8:	2300      	movs	r3, #0
 80006ea:	61fb      	str	r3, [r7, #28]
 80006ec:	2300      	movs	r3, #0
 80006ee:	61bb      	str	r3, [r7, #24]
 80006f0:	2300      	movs	r3, #0
 80006f2:	617b      	str	r3, [r7, #20]
 80006f4:	2300      	movs	r3, #0
 80006f6:	613b      	str	r3, [r7, #16]
 80006f8:	2300      	movs	r3, #0
 80006fa:	60fb      	str	r3, [r7, #12]
		break;
 80006fc:	e01d      	b.n	800073a <display7SEG+0x1a6>
	case 9:
		a = 0; b = 0; c = 0; d = 0; e = 1; f = 0; g = 0;
 80006fe:	2300      	movs	r3, #0
 8000700:	627b      	str	r3, [r7, #36]	; 0x24
 8000702:	2300      	movs	r3, #0
 8000704:	623b      	str	r3, [r7, #32]
 8000706:	2300      	movs	r3, #0
 8000708:	61fb      	str	r3, [r7, #28]
 800070a:	2300      	movs	r3, #0
 800070c:	61bb      	str	r3, [r7, #24]
 800070e:	2301      	movs	r3, #1
 8000710:	617b      	str	r3, [r7, #20]
 8000712:	2300      	movs	r3, #0
 8000714:	613b      	str	r3, [r7, #16]
 8000716:	2300      	movs	r3, #0
 8000718:	60fb      	str	r3, [r7, #12]
		break;
 800071a:	e00e      	b.n	800073a <display7SEG+0x1a6>
	default:
		a = 1; b = 1; c = 1; d = 1; e = 1; f = 1; g = 0;
 800071c:	2301      	movs	r3, #1
 800071e:	627b      	str	r3, [r7, #36]	; 0x24
 8000720:	2301      	movs	r3, #1
 8000722:	623b      	str	r3, [r7, #32]
 8000724:	2301      	movs	r3, #1
 8000726:	61fb      	str	r3, [r7, #28]
 8000728:	2301      	movs	r3, #1
 800072a:	61bb      	str	r3, [r7, #24]
 800072c:	2301      	movs	r3, #1
 800072e:	617b      	str	r3, [r7, #20]
 8000730:	2301      	movs	r3, #1
 8000732:	613b      	str	r3, [r7, #16]
 8000734:	2300      	movs	r3, #0
 8000736:	60fb      	str	r3, [r7, #12]
		break;
 8000738:	bf00      	nop
	}
	HAL_GPIO_WritePin(a_GPIO_Port, a_Pin, a);
 800073a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800073c:	b2db      	uxtb	r3, r3
 800073e:	461a      	mov	r2, r3
 8000740:	2101      	movs	r1, #1
 8000742:	4818      	ldr	r0, [pc, #96]	; (80007a4 <display7SEG+0x210>)
 8000744:	f001 fc87 	bl	8002056 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(b_GPIO_Port, b_Pin, b);
 8000748:	6a3b      	ldr	r3, [r7, #32]
 800074a:	b2db      	uxtb	r3, r3
 800074c:	461a      	mov	r2, r3
 800074e:	2102      	movs	r1, #2
 8000750:	4814      	ldr	r0, [pc, #80]	; (80007a4 <display7SEG+0x210>)
 8000752:	f001 fc80 	bl	8002056 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(c_GPIO_Port, c_Pin, c);
 8000756:	69fb      	ldr	r3, [r7, #28]
 8000758:	b2db      	uxtb	r3, r3
 800075a:	461a      	mov	r2, r3
 800075c:	2104      	movs	r1, #4
 800075e:	4811      	ldr	r0, [pc, #68]	; (80007a4 <display7SEG+0x210>)
 8000760:	f001 fc79 	bl	8002056 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(d_GPIO_Port, d_Pin, d);
 8000764:	69bb      	ldr	r3, [r7, #24]
 8000766:	b2db      	uxtb	r3, r3
 8000768:	461a      	mov	r2, r3
 800076a:	2108      	movs	r1, #8
 800076c:	480d      	ldr	r0, [pc, #52]	; (80007a4 <display7SEG+0x210>)
 800076e:	f001 fc72 	bl	8002056 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(e_GPIO_Port, e_Pin, e);
 8000772:	697b      	ldr	r3, [r7, #20]
 8000774:	b2db      	uxtb	r3, r3
 8000776:	461a      	mov	r2, r3
 8000778:	2110      	movs	r1, #16
 800077a:	480a      	ldr	r0, [pc, #40]	; (80007a4 <display7SEG+0x210>)
 800077c:	f001 fc6b 	bl	8002056 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(f_GPIO_Port, f_Pin, f);
 8000780:	693b      	ldr	r3, [r7, #16]
 8000782:	b2db      	uxtb	r3, r3
 8000784:	461a      	mov	r2, r3
 8000786:	2120      	movs	r1, #32
 8000788:	4806      	ldr	r0, [pc, #24]	; (80007a4 <display7SEG+0x210>)
 800078a:	f001 fc64 	bl	8002056 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(g_GPIO_Port, g_Pin, g);
 800078e:	68fb      	ldr	r3, [r7, #12]
 8000790:	b2db      	uxtb	r3, r3
 8000792:	461a      	mov	r2, r3
 8000794:	2140      	movs	r1, #64	; 0x40
 8000796:	4803      	ldr	r0, [pc, #12]	; (80007a4 <display7SEG+0x210>)
 8000798:	f001 fc5d 	bl	8002056 <HAL_GPIO_WritePin>
}
 800079c:	bf00      	nop
 800079e:	3728      	adds	r7, #40	; 0x28
 80007a0:	46bd      	mov	sp, r7
 80007a2:	bd80      	pop	{r7, pc}
 80007a4:	40010c00 	.word	0x40010c00

080007a8 <display7SEG_2>:
void display7SEG_2(int num){
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b08a      	sub	sp, #40	; 0x28
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	6078      	str	r0, [r7, #4]
	int a=0, b=0, c=0, d=0, e=0, f=0, g=0;
 80007b0:	2300      	movs	r3, #0
 80007b2:	627b      	str	r3, [r7, #36]	; 0x24
 80007b4:	2300      	movs	r3, #0
 80007b6:	623b      	str	r3, [r7, #32]
 80007b8:	2300      	movs	r3, #0
 80007ba:	61fb      	str	r3, [r7, #28]
 80007bc:	2300      	movs	r3, #0
 80007be:	61bb      	str	r3, [r7, #24]
 80007c0:	2300      	movs	r3, #0
 80007c2:	617b      	str	r3, [r7, #20]
 80007c4:	2300      	movs	r3, #0
 80007c6:	613b      	str	r3, [r7, #16]
 80007c8:	2300      	movs	r3, #0
 80007ca:	60fb      	str	r3, [r7, #12]
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	2b09      	cmp	r3, #9
 80007d0:	f200 80ae 	bhi.w	8000930 <display7SEG_2+0x188>
 80007d4:	a201      	add	r2, pc, #4	; (adr r2, 80007dc <display7SEG_2+0x34>)
 80007d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80007da:	bf00      	nop
 80007dc:	08000805 	.word	0x08000805
 80007e0:	08000823 	.word	0x08000823
 80007e4:	08000841 	.word	0x08000841
 80007e8:	0800085f 	.word	0x0800085f
 80007ec:	0800087d 	.word	0x0800087d
 80007f0:	0800089b 	.word	0x0800089b
 80007f4:	080008b9 	.word	0x080008b9
 80007f8:	080008d7 	.word	0x080008d7
 80007fc:	080008f5 	.word	0x080008f5
 8000800:	08000913 	.word	0x08000913
	switch(num){
	case 0:
		a = 0; b = 0; c = 0; d = 0; e = 0; f = 0; g = 1;
 8000804:	2300      	movs	r3, #0
 8000806:	627b      	str	r3, [r7, #36]	; 0x24
 8000808:	2300      	movs	r3, #0
 800080a:	623b      	str	r3, [r7, #32]
 800080c:	2300      	movs	r3, #0
 800080e:	61fb      	str	r3, [r7, #28]
 8000810:	2300      	movs	r3, #0
 8000812:	61bb      	str	r3, [r7, #24]
 8000814:	2300      	movs	r3, #0
 8000816:	617b      	str	r3, [r7, #20]
 8000818:	2300      	movs	r3, #0
 800081a:	613b      	str	r3, [r7, #16]
 800081c:	2301      	movs	r3, #1
 800081e:	60fb      	str	r3, [r7, #12]
		break;
 8000820:	e095      	b.n	800094e <display7SEG_2+0x1a6>
	case 1:
		a = 1; b = 0; c = 0; d = 1; e = 1; f = 1; g = 1;
 8000822:	2301      	movs	r3, #1
 8000824:	627b      	str	r3, [r7, #36]	; 0x24
 8000826:	2300      	movs	r3, #0
 8000828:	623b      	str	r3, [r7, #32]
 800082a:	2300      	movs	r3, #0
 800082c:	61fb      	str	r3, [r7, #28]
 800082e:	2301      	movs	r3, #1
 8000830:	61bb      	str	r3, [r7, #24]
 8000832:	2301      	movs	r3, #1
 8000834:	617b      	str	r3, [r7, #20]
 8000836:	2301      	movs	r3, #1
 8000838:	613b      	str	r3, [r7, #16]
 800083a:	2301      	movs	r3, #1
 800083c:	60fb      	str	r3, [r7, #12]
		break;
 800083e:	e086      	b.n	800094e <display7SEG_2+0x1a6>
	case 2:
		a = 0; b = 0; c = 1; d = 0; e = 0; f = 1; g = 0;
 8000840:	2300      	movs	r3, #0
 8000842:	627b      	str	r3, [r7, #36]	; 0x24
 8000844:	2300      	movs	r3, #0
 8000846:	623b      	str	r3, [r7, #32]
 8000848:	2301      	movs	r3, #1
 800084a:	61fb      	str	r3, [r7, #28]
 800084c:	2300      	movs	r3, #0
 800084e:	61bb      	str	r3, [r7, #24]
 8000850:	2300      	movs	r3, #0
 8000852:	617b      	str	r3, [r7, #20]
 8000854:	2301      	movs	r3, #1
 8000856:	613b      	str	r3, [r7, #16]
 8000858:	2300      	movs	r3, #0
 800085a:	60fb      	str	r3, [r7, #12]
		break;
 800085c:	e077      	b.n	800094e <display7SEG_2+0x1a6>
	case 3:
		a = 0; b = 0; c = 0; d = 0; e = 1; f = 1; g = 0;
 800085e:	2300      	movs	r3, #0
 8000860:	627b      	str	r3, [r7, #36]	; 0x24
 8000862:	2300      	movs	r3, #0
 8000864:	623b      	str	r3, [r7, #32]
 8000866:	2300      	movs	r3, #0
 8000868:	61fb      	str	r3, [r7, #28]
 800086a:	2300      	movs	r3, #0
 800086c:	61bb      	str	r3, [r7, #24]
 800086e:	2301      	movs	r3, #1
 8000870:	617b      	str	r3, [r7, #20]
 8000872:	2301      	movs	r3, #1
 8000874:	613b      	str	r3, [r7, #16]
 8000876:	2300      	movs	r3, #0
 8000878:	60fb      	str	r3, [r7, #12]
		break;
 800087a:	e068      	b.n	800094e <display7SEG_2+0x1a6>
	case 4:
		a = 1; b = 0; c = 0; d = 1; e = 1; f = 0; g = 0;
 800087c:	2301      	movs	r3, #1
 800087e:	627b      	str	r3, [r7, #36]	; 0x24
 8000880:	2300      	movs	r3, #0
 8000882:	623b      	str	r3, [r7, #32]
 8000884:	2300      	movs	r3, #0
 8000886:	61fb      	str	r3, [r7, #28]
 8000888:	2301      	movs	r3, #1
 800088a:	61bb      	str	r3, [r7, #24]
 800088c:	2301      	movs	r3, #1
 800088e:	617b      	str	r3, [r7, #20]
 8000890:	2300      	movs	r3, #0
 8000892:	613b      	str	r3, [r7, #16]
 8000894:	2300      	movs	r3, #0
 8000896:	60fb      	str	r3, [r7, #12]
		break;
 8000898:	e059      	b.n	800094e <display7SEG_2+0x1a6>
	case 5:
		a = 0; b = 1; c = 0; d = 0; e = 1; f = 0; g = 0;
 800089a:	2300      	movs	r3, #0
 800089c:	627b      	str	r3, [r7, #36]	; 0x24
 800089e:	2301      	movs	r3, #1
 80008a0:	623b      	str	r3, [r7, #32]
 80008a2:	2300      	movs	r3, #0
 80008a4:	61fb      	str	r3, [r7, #28]
 80008a6:	2300      	movs	r3, #0
 80008a8:	61bb      	str	r3, [r7, #24]
 80008aa:	2301      	movs	r3, #1
 80008ac:	617b      	str	r3, [r7, #20]
 80008ae:	2300      	movs	r3, #0
 80008b0:	613b      	str	r3, [r7, #16]
 80008b2:	2300      	movs	r3, #0
 80008b4:	60fb      	str	r3, [r7, #12]
		break;
 80008b6:	e04a      	b.n	800094e <display7SEG_2+0x1a6>
	case 6:
		a = 0; b = 1; c = 0; d = 0; e = 0; f = 0; g = 0;
 80008b8:	2300      	movs	r3, #0
 80008ba:	627b      	str	r3, [r7, #36]	; 0x24
 80008bc:	2301      	movs	r3, #1
 80008be:	623b      	str	r3, [r7, #32]
 80008c0:	2300      	movs	r3, #0
 80008c2:	61fb      	str	r3, [r7, #28]
 80008c4:	2300      	movs	r3, #0
 80008c6:	61bb      	str	r3, [r7, #24]
 80008c8:	2300      	movs	r3, #0
 80008ca:	617b      	str	r3, [r7, #20]
 80008cc:	2300      	movs	r3, #0
 80008ce:	613b      	str	r3, [r7, #16]
 80008d0:	2300      	movs	r3, #0
 80008d2:	60fb      	str	r3, [r7, #12]
		break;
 80008d4:	e03b      	b.n	800094e <display7SEG_2+0x1a6>
	case 7:
		a = 0; b = 0; c = 0; d = 1; e = 1; f = 1; g = 1;
 80008d6:	2300      	movs	r3, #0
 80008d8:	627b      	str	r3, [r7, #36]	; 0x24
 80008da:	2300      	movs	r3, #0
 80008dc:	623b      	str	r3, [r7, #32]
 80008de:	2300      	movs	r3, #0
 80008e0:	61fb      	str	r3, [r7, #28]
 80008e2:	2301      	movs	r3, #1
 80008e4:	61bb      	str	r3, [r7, #24]
 80008e6:	2301      	movs	r3, #1
 80008e8:	617b      	str	r3, [r7, #20]
 80008ea:	2301      	movs	r3, #1
 80008ec:	613b      	str	r3, [r7, #16]
 80008ee:	2301      	movs	r3, #1
 80008f0:	60fb      	str	r3, [r7, #12]
		break;
 80008f2:	e02c      	b.n	800094e <display7SEG_2+0x1a6>
	case 8:
		a = 0; b = 0; c = 0; d = 0; e = 0; f = 0; g = 0;
 80008f4:	2300      	movs	r3, #0
 80008f6:	627b      	str	r3, [r7, #36]	; 0x24
 80008f8:	2300      	movs	r3, #0
 80008fa:	623b      	str	r3, [r7, #32]
 80008fc:	2300      	movs	r3, #0
 80008fe:	61fb      	str	r3, [r7, #28]
 8000900:	2300      	movs	r3, #0
 8000902:	61bb      	str	r3, [r7, #24]
 8000904:	2300      	movs	r3, #0
 8000906:	617b      	str	r3, [r7, #20]
 8000908:	2300      	movs	r3, #0
 800090a:	613b      	str	r3, [r7, #16]
 800090c:	2300      	movs	r3, #0
 800090e:	60fb      	str	r3, [r7, #12]
		break;
 8000910:	e01d      	b.n	800094e <display7SEG_2+0x1a6>
	case 9:
		a = 0; b = 0; c = 0; d = 0; e = 1; f = 0; g = 0;
 8000912:	2300      	movs	r3, #0
 8000914:	627b      	str	r3, [r7, #36]	; 0x24
 8000916:	2300      	movs	r3, #0
 8000918:	623b      	str	r3, [r7, #32]
 800091a:	2300      	movs	r3, #0
 800091c:	61fb      	str	r3, [r7, #28]
 800091e:	2300      	movs	r3, #0
 8000920:	61bb      	str	r3, [r7, #24]
 8000922:	2301      	movs	r3, #1
 8000924:	617b      	str	r3, [r7, #20]
 8000926:	2300      	movs	r3, #0
 8000928:	613b      	str	r3, [r7, #16]
 800092a:	2300      	movs	r3, #0
 800092c:	60fb      	str	r3, [r7, #12]
		break;
 800092e:	e00e      	b.n	800094e <display7SEG_2+0x1a6>
	default:
		a = 1; b = 1; c = 1; d = 1; e = 1; f = 1; g = 0;
 8000930:	2301      	movs	r3, #1
 8000932:	627b      	str	r3, [r7, #36]	; 0x24
 8000934:	2301      	movs	r3, #1
 8000936:	623b      	str	r3, [r7, #32]
 8000938:	2301      	movs	r3, #1
 800093a:	61fb      	str	r3, [r7, #28]
 800093c:	2301      	movs	r3, #1
 800093e:	61bb      	str	r3, [r7, #24]
 8000940:	2301      	movs	r3, #1
 8000942:	617b      	str	r3, [r7, #20]
 8000944:	2301      	movs	r3, #1
 8000946:	613b      	str	r3, [r7, #16]
 8000948:	2300      	movs	r3, #0
 800094a:	60fb      	str	r3, [r7, #12]
		break;
 800094c:	bf00      	nop
	}
	HAL_GPIO_WritePin(a2_GPIO_Port, a2_Pin, a);
 800094e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000950:	b2db      	uxtb	r3, r3
 8000952:	461a      	mov	r2, r3
 8000954:	2180      	movs	r1, #128	; 0x80
 8000956:	481b      	ldr	r0, [pc, #108]	; (80009c4 <display7SEG_2+0x21c>)
 8000958:	f001 fb7d 	bl	8002056 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(b2_GPIO_Port, b2_Pin, b);
 800095c:	6a3b      	ldr	r3, [r7, #32]
 800095e:	b2db      	uxtb	r3, r3
 8000960:	461a      	mov	r2, r3
 8000962:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000966:	4817      	ldr	r0, [pc, #92]	; (80009c4 <display7SEG_2+0x21c>)
 8000968:	f001 fb75 	bl	8002056 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(c2_GPIO_Port, c2_Pin, c);
 800096c:	69fb      	ldr	r3, [r7, #28]
 800096e:	b2db      	uxtb	r3, r3
 8000970:	461a      	mov	r2, r3
 8000972:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000976:	4813      	ldr	r0, [pc, #76]	; (80009c4 <display7SEG_2+0x21c>)
 8000978:	f001 fb6d 	bl	8002056 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(d2_GPIO_Port, d2_Pin, d);
 800097c:	69bb      	ldr	r3, [r7, #24]
 800097e:	b2db      	uxtb	r3, r3
 8000980:	461a      	mov	r2, r3
 8000982:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000986:	480f      	ldr	r0, [pc, #60]	; (80009c4 <display7SEG_2+0x21c>)
 8000988:	f001 fb65 	bl	8002056 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(e2_GPIO_Port, e2_Pin, e);
 800098c:	697b      	ldr	r3, [r7, #20]
 800098e:	b2db      	uxtb	r3, r3
 8000990:	461a      	mov	r2, r3
 8000992:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000996:	480b      	ldr	r0, [pc, #44]	; (80009c4 <display7SEG_2+0x21c>)
 8000998:	f001 fb5d 	bl	8002056 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(f2_GPIO_Port, f2_Pin, f);
 800099c:	693b      	ldr	r3, [r7, #16]
 800099e:	b2db      	uxtb	r3, r3
 80009a0:	461a      	mov	r2, r3
 80009a2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80009a6:	4807      	ldr	r0, [pc, #28]	; (80009c4 <display7SEG_2+0x21c>)
 80009a8:	f001 fb55 	bl	8002056 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(g2_GPIO_Port, g2_Pin, g);
 80009ac:	68fb      	ldr	r3, [r7, #12]
 80009ae:	b2db      	uxtb	r3, r3
 80009b0:	461a      	mov	r2, r3
 80009b2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80009b6:	4803      	ldr	r0, [pc, #12]	; (80009c4 <display7SEG_2+0x21c>)
 80009b8:	f001 fb4d 	bl	8002056 <HAL_GPIO_WritePin>
}
 80009bc:	bf00      	nop
 80009be:	3728      	adds	r7, #40	; 0x28
 80009c0:	46bd      	mov	sp, r7
 80009c2:	bd80      	pop	{r7, pc}
 80009c4:	40010c00 	.word	0x40010c00

080009c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009cc:	f001 f81e 	bl	8001a0c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009d0:	f000 f812 	bl	80009f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009d4:	f000 f898 	bl	8000b08 <MX_GPIO_Init>
  MX_TIM2_Init();
 80009d8:	f000 f84a 	bl	8000a70 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 80009dc:	4804      	ldr	r0, [pc, #16]	; (80009f0 <main+0x28>)
 80009de:	f001 ff97 	bl	8002910 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  status = 0;
 80009e2:	4b04      	ldr	r3, [pc, #16]	; (80009f4 <main+0x2c>)
 80009e4:	2200      	movs	r2, #0
 80009e6:	601a      	str	r2, [r3, #0]
  while(1){
	  mode_run();
 80009e8:	f7ff fc60 	bl	80002ac <mode_run>
 80009ec:	e7fc      	b.n	80009e8 <main+0x20>
 80009ee:	bf00      	nop
 80009f0:	200000c0 	.word	0x200000c0
 80009f4:	20000050 	.word	0x20000050

080009f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b090      	sub	sp, #64	; 0x40
 80009fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009fe:	f107 0318 	add.w	r3, r7, #24
 8000a02:	2228      	movs	r2, #40	; 0x28
 8000a04:	2100      	movs	r1, #0
 8000a06:	4618      	mov	r0, r3
 8000a08:	f002 fb3e 	bl	8003088 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a0c:	1d3b      	adds	r3, r7, #4
 8000a0e:	2200      	movs	r2, #0
 8000a10:	601a      	str	r2, [r3, #0]
 8000a12:	605a      	str	r2, [r3, #4]
 8000a14:	609a      	str	r2, [r3, #8]
 8000a16:	60da      	str	r2, [r3, #12]
 8000a18:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000a1a:	2302      	movs	r3, #2
 8000a1c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a1e:	2301      	movs	r3, #1
 8000a20:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a22:	2310      	movs	r3, #16
 8000a24:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000a26:	2300      	movs	r3, #0
 8000a28:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a2a:	f107 0318 	add.w	r3, r7, #24
 8000a2e:	4618      	mov	r0, r3
 8000a30:	f001 fb42 	bl	80020b8 <HAL_RCC_OscConfig>
 8000a34:	4603      	mov	r3, r0
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	d001      	beq.n	8000a3e <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000a3a:	f000 f8e3 	bl	8000c04 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a3e:	230f      	movs	r3, #15
 8000a40:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000a42:	2300      	movs	r3, #0
 8000a44:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a46:	2300      	movs	r3, #0
 8000a48:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a4e:	2300      	movs	r3, #0
 8000a50:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000a52:	1d3b      	adds	r3, r7, #4
 8000a54:	2100      	movs	r1, #0
 8000a56:	4618      	mov	r0, r3
 8000a58:	f001 fdae 	bl	80025b8 <HAL_RCC_ClockConfig>
 8000a5c:	4603      	mov	r3, r0
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	d001      	beq.n	8000a66 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000a62:	f000 f8cf 	bl	8000c04 <Error_Handler>
  }
}
 8000a66:	bf00      	nop
 8000a68:	3740      	adds	r7, #64	; 0x40
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	bd80      	pop	{r7, pc}
	...

08000a70 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b086      	sub	sp, #24
 8000a74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a76:	f107 0308 	add.w	r3, r7, #8
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	601a      	str	r2, [r3, #0]
 8000a7e:	605a      	str	r2, [r3, #4]
 8000a80:	609a      	str	r2, [r3, #8]
 8000a82:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a84:	463b      	mov	r3, r7
 8000a86:	2200      	movs	r2, #0
 8000a88:	601a      	str	r2, [r3, #0]
 8000a8a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000a8c:	4b1d      	ldr	r3, [pc, #116]	; (8000b04 <MX_TIM2_Init+0x94>)
 8000a8e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000a92:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8000a94:	4b1b      	ldr	r3, [pc, #108]	; (8000b04 <MX_TIM2_Init+0x94>)
 8000a96:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8000a9a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a9c:	4b19      	ldr	r3, [pc, #100]	; (8000b04 <MX_TIM2_Init+0x94>)
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8000aa2:	4b18      	ldr	r3, [pc, #96]	; (8000b04 <MX_TIM2_Init+0x94>)
 8000aa4:	2209      	movs	r2, #9
 8000aa6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000aa8:	4b16      	ldr	r3, [pc, #88]	; (8000b04 <MX_TIM2_Init+0x94>)
 8000aaa:	2200      	movs	r2, #0
 8000aac:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000aae:	4b15      	ldr	r3, [pc, #84]	; (8000b04 <MX_TIM2_Init+0x94>)
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000ab4:	4813      	ldr	r0, [pc, #76]	; (8000b04 <MX_TIM2_Init+0x94>)
 8000ab6:	f001 fedb 	bl	8002870 <HAL_TIM_Base_Init>
 8000aba:	4603      	mov	r3, r0
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d001      	beq.n	8000ac4 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000ac0:	f000 f8a0 	bl	8000c04 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ac4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ac8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000aca:	f107 0308 	add.w	r3, r7, #8
 8000ace:	4619      	mov	r1, r3
 8000ad0:	480c      	ldr	r0, [pc, #48]	; (8000b04 <MX_TIM2_Init+0x94>)
 8000ad2:	f002 f871 	bl	8002bb8 <HAL_TIM_ConfigClockSource>
 8000ad6:	4603      	mov	r3, r0
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d001      	beq.n	8000ae0 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000adc:	f000 f892 	bl	8000c04 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000ae8:	463b      	mov	r3, r7
 8000aea:	4619      	mov	r1, r3
 8000aec:	4805      	ldr	r0, [pc, #20]	; (8000b04 <MX_TIM2_Init+0x94>)
 8000aee:	f002 fa3d 	bl	8002f6c <HAL_TIMEx_MasterConfigSynchronization>
 8000af2:	4603      	mov	r3, r0
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d001      	beq.n	8000afc <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000af8:	f000 f884 	bl	8000c04 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000afc:	bf00      	nop
 8000afe:	3718      	adds	r7, #24
 8000b00:	46bd      	mov	sp, r7
 8000b02:	bd80      	pop	{r7, pc}
 8000b04:	200000c0 	.word	0x200000c0

08000b08 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b088      	sub	sp, #32
 8000b0c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b0e:	f107 0310 	add.w	r3, r7, #16
 8000b12:	2200      	movs	r2, #0
 8000b14:	601a      	str	r2, [r3, #0]
 8000b16:	605a      	str	r2, [r3, #4]
 8000b18:	609a      	str	r2, [r3, #8]
 8000b1a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b1c:	4b2f      	ldr	r3, [pc, #188]	; (8000bdc <MX_GPIO_Init+0xd4>)
 8000b1e:	699b      	ldr	r3, [r3, #24]
 8000b20:	4a2e      	ldr	r2, [pc, #184]	; (8000bdc <MX_GPIO_Init+0xd4>)
 8000b22:	f043 0310 	orr.w	r3, r3, #16
 8000b26:	6193      	str	r3, [r2, #24]
 8000b28:	4b2c      	ldr	r3, [pc, #176]	; (8000bdc <MX_GPIO_Init+0xd4>)
 8000b2a:	699b      	ldr	r3, [r3, #24]
 8000b2c:	f003 0310 	and.w	r3, r3, #16
 8000b30:	60fb      	str	r3, [r7, #12]
 8000b32:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b34:	4b29      	ldr	r3, [pc, #164]	; (8000bdc <MX_GPIO_Init+0xd4>)
 8000b36:	699b      	ldr	r3, [r3, #24]
 8000b38:	4a28      	ldr	r2, [pc, #160]	; (8000bdc <MX_GPIO_Init+0xd4>)
 8000b3a:	f043 0304 	orr.w	r3, r3, #4
 8000b3e:	6193      	str	r3, [r2, #24]
 8000b40:	4b26      	ldr	r3, [pc, #152]	; (8000bdc <MX_GPIO_Init+0xd4>)
 8000b42:	699b      	ldr	r3, [r3, #24]
 8000b44:	f003 0304 	and.w	r3, r3, #4
 8000b48:	60bb      	str	r3, [r7, #8]
 8000b4a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b4c:	4b23      	ldr	r3, [pc, #140]	; (8000bdc <MX_GPIO_Init+0xd4>)
 8000b4e:	699b      	ldr	r3, [r3, #24]
 8000b50:	4a22      	ldr	r2, [pc, #136]	; (8000bdc <MX_GPIO_Init+0xd4>)
 8000b52:	f043 0308 	orr.w	r3, r3, #8
 8000b56:	6193      	str	r3, [r2, #24]
 8000b58:	4b20      	ldr	r3, [pc, #128]	; (8000bdc <MX_GPIO_Init+0xd4>)
 8000b5a:	699b      	ldr	r3, [r3, #24]
 8000b5c:	f003 0308 	and.w	r3, r3, #8
 8000b60:	607b      	str	r3, [r7, #4]
 8000b62:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, RED_Pin|GREEN_Pin|AMBER_Pin|RED2_Pin
 8000b64:	2200      	movs	r2, #0
 8000b66:	f24f 017e 	movw	r1, #61566	; 0xf07e
 8000b6a:	481d      	ldr	r0, [pc, #116]	; (8000be0 <MX_GPIO_Init+0xd8>)
 8000b6c:	f001 fa73 	bl	8002056 <HAL_GPIO_WritePin>
                          |GREEN2_Pin|AMBER2_Pin|EN0_Pin|EN1_Pin
                          |EN2_Pin|EN3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, a_Pin|b_Pin|c_Pin|d2_Pin
 8000b70:	2200      	movs	r2, #0
 8000b72:	f643 71ff 	movw	r1, #16383	; 0x3fff
 8000b76:	481b      	ldr	r0, [pc, #108]	; (8000be4 <MX_GPIO_Init+0xdc>)
 8000b78:	f001 fa6d 	bl	8002056 <HAL_GPIO_WritePin>
                          |e2_Pin|f2_Pin|g2_Pin|d_Pin
                          |e_Pin|f_Pin|g_Pin|a2_Pin
                          |b2_Pin|c2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : BUTTON1_Pin BUTTON2_Pin BUTTON3_Pin */
  GPIO_InitStruct.Pin = BUTTON1_Pin|BUTTON2_Pin|BUTTON3_Pin;
 8000b7c:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8000b80:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b82:	2300      	movs	r3, #0
 8000b84:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b86:	2301      	movs	r3, #1
 8000b88:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b8a:	f107 0310 	add.w	r3, r7, #16
 8000b8e:	4619      	mov	r1, r3
 8000b90:	4815      	ldr	r0, [pc, #84]	; (8000be8 <MX_GPIO_Init+0xe0>)
 8000b92:	f001 f8cf 	bl	8001d34 <HAL_GPIO_Init>

  /*Configure GPIO pins : RED_Pin GREEN_Pin AMBER_Pin RED2_Pin
                           GREEN2_Pin AMBER2_Pin EN0_Pin EN1_Pin
                           EN2_Pin EN3_Pin */
  GPIO_InitStruct.Pin = RED_Pin|GREEN_Pin|AMBER_Pin|RED2_Pin
 8000b96:	f24f 037e 	movw	r3, #61566	; 0xf07e
 8000b9a:	613b      	str	r3, [r7, #16]
                          |GREEN2_Pin|AMBER2_Pin|EN0_Pin|EN1_Pin
                          |EN2_Pin|EN3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b9c:	2301      	movs	r3, #1
 8000b9e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ba4:	2302      	movs	r3, #2
 8000ba6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ba8:	f107 0310 	add.w	r3, r7, #16
 8000bac:	4619      	mov	r1, r3
 8000bae:	480c      	ldr	r0, [pc, #48]	; (8000be0 <MX_GPIO_Init+0xd8>)
 8000bb0:	f001 f8c0 	bl	8001d34 <HAL_GPIO_Init>

  /*Configure GPIO pins : a_Pin b_Pin c_Pin d2_Pin
                           e2_Pin f2_Pin g2_Pin d_Pin
                           e_Pin f_Pin g_Pin a2_Pin
                           b2_Pin c2_Pin */
  GPIO_InitStruct.Pin = a_Pin|b_Pin|c_Pin|d2_Pin
 8000bb4:	f643 73ff 	movw	r3, #16383	; 0x3fff
 8000bb8:	613b      	str	r3, [r7, #16]
                          |e2_Pin|f2_Pin|g2_Pin|d_Pin
                          |e_Pin|f_Pin|g_Pin|a2_Pin
                          |b2_Pin|c2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bba:	2301      	movs	r3, #1
 8000bbc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bc2:	2302      	movs	r3, #2
 8000bc4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bc6:	f107 0310 	add.w	r3, r7, #16
 8000bca:	4619      	mov	r1, r3
 8000bcc:	4805      	ldr	r0, [pc, #20]	; (8000be4 <MX_GPIO_Init+0xdc>)
 8000bce:	f001 f8b1 	bl	8001d34 <HAL_GPIO_Init>

}
 8000bd2:	bf00      	nop
 8000bd4:	3720      	adds	r7, #32
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	bd80      	pop	{r7, pc}
 8000bda:	bf00      	nop
 8000bdc:	40021000 	.word	0x40021000
 8000be0:	40010800 	.word	0x40010800
 8000be4:	40010c00 	.word	0x40010c00
 8000be8:	40011000 	.word	0x40011000

08000bec <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

void HAL_TIM_PeriodElapsedCallback ( TIM_HandleTypeDef * htim ){
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b082      	sub	sp, #8
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	6078      	str	r0, [r7, #4]
	timerRun();
 8000bf4:	f000 fe8e 	bl	8001914 <timerRun>
	getKeyInput();
 8000bf8:	f7ff fac2 	bl	8000180 <getKeyInput>
}
 8000bfc:	bf00      	nop
 8000bfe:	3708      	adds	r7, #8
 8000c00:	46bd      	mov	sp, r7
 8000c02:	bd80      	pop	{r7, pc}

08000c04 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c04:	b480      	push	{r7}
 8000c06:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c08:	b672      	cpsid	i
}
 8000c0a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c0c:	e7fe      	b.n	8000c0c <Error_Handler+0x8>
	...

08000c10 <mode1_run>:
 *      Author: duvan
 */

#include "mode1.h"

void mode1_run(){
 8000c10:	b580      	push	{r7, lr}
 8000c12:	af00      	add	r7, sp, #0
	if (counter0 > modred) {
 8000c14:	4ba0      	ldr	r3, [pc, #640]	; (8000e98 <mode1_run+0x288>)
 8000c16:	681a      	ldr	r2, [r3, #0]
 8000c18:	4ba0      	ldr	r3, [pc, #640]	; (8000e9c <mode1_run+0x28c>)
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	429a      	cmp	r2, r3
 8000c1e:	f340 8153 	ble.w	8000ec8 <mode1_run+0x2b8>
		  HAL_GPIO_WritePin(RED_GPIO_Port, RED_Pin, GPIO_PIN_SET);
 8000c22:	2201      	movs	r2, #1
 8000c24:	2102      	movs	r1, #2
 8000c26:	489e      	ldr	r0, [pc, #632]	; (8000ea0 <mode1_run+0x290>)
 8000c28:	f001 fa15 	bl	8002056 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(AMBER_GPIO_Port, AMBER_Pin, GPIO_PIN_RESET);
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	2108      	movs	r1, #8
 8000c30:	489b      	ldr	r0, [pc, #620]	; (8000ea0 <mode1_run+0x290>)
 8000c32:	f001 fa10 	bl	8002056 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GREEN_GPIO_Port, GREEN_Pin, GPIO_PIN_RESET);
 8000c36:	2200      	movs	r2, #0
 8000c38:	2104      	movs	r1, #4
 8000c3a:	4899      	ldr	r0, [pc, #612]	; (8000ea0 <mode1_run+0x290>)
 8000c3c:	f001 fa0b 	bl	8002056 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, 0);
 8000c40:	2200      	movs	r2, #0
 8000c42:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c46:	4896      	ldr	r0, [pc, #600]	; (8000ea0 <mode1_run+0x290>)
 8000c48:	f001 fa05 	bl	8002056 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, 1);
 8000c4c:	2201      	movs	r2, #1
 8000c4e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000c52:	4893      	ldr	r0, [pc, #588]	; (8000ea0 <mode1_run+0x290>)
 8000c54:	f001 f9ff 	bl	8002056 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, 0);
 8000c58:	2200      	movs	r2, #0
 8000c5a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000c5e:	4890      	ldr	r0, [pc, #576]	; (8000ea0 <mode1_run+0x290>)
 8000c60:	f001 f9f9 	bl	8002056 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, 1);
 8000c64:	2201      	movs	r2, #1
 8000c66:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000c6a:	488d      	ldr	r0, [pc, #564]	; (8000ea0 <mode1_run+0x290>)
 8000c6c:	f001 f9f3 	bl	8002056 <HAL_GPIO_WritePin>
		  display7SEG_2(y--);
 8000c70:	4b8c      	ldr	r3, [pc, #560]	; (8000ea4 <mode1_run+0x294>)
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	1e5a      	subs	r2, r3, #1
 8000c76:	498b      	ldr	r1, [pc, #556]	; (8000ea4 <mode1_run+0x294>)
 8000c78:	600a      	str	r2, [r1, #0]
 8000c7a:	4618      	mov	r0, r3
 8000c7c:	f7ff fd94 	bl	80007a8 <display7SEG_2>
		  display7SEG(x);
 8000c80:	4b89      	ldr	r3, [pc, #548]	; (8000ea8 <mode1_run+0x298>)
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	4618      	mov	r0, r3
 8000c86:	f7ff fc85 	bl	8000594 <display7SEG>
		  if(x>=1){
 8000c8a:	4b87      	ldr	r3, [pc, #540]	; (8000ea8 <mode1_run+0x298>)
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	dd0c      	ble.n	8000cac <mode1_run+0x9c>
			  if(y<0) {
 8000c92:	4b84      	ldr	r3, [pc, #528]	; (8000ea4 <mode1_run+0x294>)
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	da25      	bge.n	8000ce6 <mode1_run+0xd6>
				  y = 9;
 8000c9a:	4b82      	ldr	r3, [pc, #520]	; (8000ea4 <mode1_run+0x294>)
 8000c9c:	2209      	movs	r2, #9
 8000c9e:	601a      	str	r2, [r3, #0]
				  x--;
 8000ca0:	4b81      	ldr	r3, [pc, #516]	; (8000ea8 <mode1_run+0x298>)
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	3b01      	subs	r3, #1
 8000ca6:	4a80      	ldr	r2, [pc, #512]	; (8000ea8 <mode1_run+0x298>)
 8000ca8:	6013      	str	r3, [r2, #0]
 8000caa:	e01c      	b.n	8000ce6 <mode1_run+0xd6>
			  }
		  }
		  else{
			  if(y<=0){
 8000cac:	4b7d      	ldr	r3, [pc, #500]	; (8000ea4 <mode1_run+0x294>)
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	dc18      	bgt.n	8000ce6 <mode1_run+0xd6>
				  y = modred%10;
 8000cb4:	4b79      	ldr	r3, [pc, #484]	; (8000e9c <mode1_run+0x28c>)
 8000cb6:	6819      	ldr	r1, [r3, #0]
 8000cb8:	4b7c      	ldr	r3, [pc, #496]	; (8000eac <mode1_run+0x29c>)
 8000cba:	fb83 2301 	smull	r2, r3, r3, r1
 8000cbe:	109a      	asrs	r2, r3, #2
 8000cc0:	17cb      	asrs	r3, r1, #31
 8000cc2:	1ad2      	subs	r2, r2, r3
 8000cc4:	4613      	mov	r3, r2
 8000cc6:	009b      	lsls	r3, r3, #2
 8000cc8:	4413      	add	r3, r2
 8000cca:	005b      	lsls	r3, r3, #1
 8000ccc:	1aca      	subs	r2, r1, r3
 8000cce:	4b75      	ldr	r3, [pc, #468]	; (8000ea4 <mode1_run+0x294>)
 8000cd0:	601a      	str	r2, [r3, #0]
				  x = modred/10;
 8000cd2:	4b72      	ldr	r3, [pc, #456]	; (8000e9c <mode1_run+0x28c>)
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	4a75      	ldr	r2, [pc, #468]	; (8000eac <mode1_run+0x29c>)
 8000cd8:	fb82 1203 	smull	r1, r2, r2, r3
 8000cdc:	1092      	asrs	r2, r2, #2
 8000cde:	17db      	asrs	r3, r3, #31
 8000ce0:	1ad3      	subs	r3, r2, r3
 8000ce2:	4a71      	ldr	r2, [pc, #452]	; (8000ea8 <mode1_run+0x298>)
 8000ce4:	6013      	str	r3, [r2, #0]
			  }
		  }
		  HAL_Delay(150);
 8000ce6:	2096      	movs	r0, #150	; 0x96
 8000ce8:	f000 fef2 	bl	8001ad0 <HAL_Delay>
		  if (counter0 > (modred+modamber)) {
 8000cec:	4b6b      	ldr	r3, [pc, #428]	; (8000e9c <mode1_run+0x28c>)
 8000cee:	681a      	ldr	r2, [r3, #0]
 8000cf0:	4b6f      	ldr	r3, [pc, #444]	; (8000eb0 <mode1_run+0x2a0>)
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	441a      	add	r2, r3
 8000cf6:	4b68      	ldr	r3, [pc, #416]	; (8000e98 <mode1_run+0x288>)
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	429a      	cmp	r2, r3
 8000cfc:	da65      	bge.n	8000dca <mode1_run+0x1ba>
			  HAL_GPIO_WritePin(RED2_GPIO_Port, RED2_Pin, GPIO_PIN_RESET);
 8000cfe:	2200      	movs	r2, #0
 8000d00:	2110      	movs	r1, #16
 8000d02:	4867      	ldr	r0, [pc, #412]	; (8000ea0 <mode1_run+0x290>)
 8000d04:	f001 f9a7 	bl	8002056 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(AMBER2_GPIO_Port, AMBER2_Pin, GPIO_PIN_RESET);
 8000d08:	2200      	movs	r2, #0
 8000d0a:	2140      	movs	r1, #64	; 0x40
 8000d0c:	4864      	ldr	r0, [pc, #400]	; (8000ea0 <mode1_run+0x290>)
 8000d0e:	f001 f9a2 	bl	8002056 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GREEN2_GPIO_Port, GREEN2_Pin, GPIO_PIN_SET);
 8000d12:	2201      	movs	r2, #1
 8000d14:	2120      	movs	r1, #32
 8000d16:	4862      	ldr	r0, [pc, #392]	; (8000ea0 <mode1_run+0x290>)
 8000d18:	f001 f99d 	bl	8002056 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, 1);
 8000d1c:	2201      	movs	r2, #1
 8000d1e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d22:	485f      	ldr	r0, [pc, #380]	; (8000ea0 <mode1_run+0x290>)
 8000d24:	f001 f997 	bl	8002056 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, 0);
 8000d28:	2200      	movs	r2, #0
 8000d2a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000d2e:	485c      	ldr	r0, [pc, #368]	; (8000ea0 <mode1_run+0x290>)
 8000d30:	f001 f991 	bl	8002056 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, 1);
 8000d34:	2201      	movs	r2, #1
 8000d36:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000d3a:	4859      	ldr	r0, [pc, #356]	; (8000ea0 <mode1_run+0x290>)
 8000d3c:	f001 f98b 	bl	8002056 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, 0);
 8000d40:	2200      	movs	r2, #0
 8000d42:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000d46:	4856      	ldr	r0, [pc, #344]	; (8000ea0 <mode1_run+0x290>)
 8000d48:	f001 f985 	bl	8002056 <HAL_GPIO_WritePin>
			  display7SEG_2(t1--);
 8000d4c:	4b59      	ldr	r3, [pc, #356]	; (8000eb4 <mode1_run+0x2a4>)
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	1e5a      	subs	r2, r3, #1
 8000d52:	4958      	ldr	r1, [pc, #352]	; (8000eb4 <mode1_run+0x2a4>)
 8000d54:	600a      	str	r2, [r1, #0]
 8000d56:	4618      	mov	r0, r3
 8000d58:	f7ff fd26 	bl	80007a8 <display7SEG_2>
			  display7SEG(x1);
 8000d5c:	4b56      	ldr	r3, [pc, #344]	; (8000eb8 <mode1_run+0x2a8>)
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	4618      	mov	r0, r3
 8000d62:	f7ff fc17 	bl	8000594 <display7SEG>
			  if(x1>=1){
 8000d66:	4b54      	ldr	r3, [pc, #336]	; (8000eb8 <mode1_run+0x2a8>)
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	dd0c      	ble.n	8000d88 <mode1_run+0x178>
				  if(t1<0) {
 8000d6e:	4b51      	ldr	r3, [pc, #324]	; (8000eb4 <mode1_run+0x2a4>)
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	da25      	bge.n	8000dc2 <mode1_run+0x1b2>
					  t1 = 9;
 8000d76:	4b4f      	ldr	r3, [pc, #316]	; (8000eb4 <mode1_run+0x2a4>)
 8000d78:	2209      	movs	r2, #9
 8000d7a:	601a      	str	r2, [r3, #0]
					  x1--;
 8000d7c:	4b4e      	ldr	r3, [pc, #312]	; (8000eb8 <mode1_run+0x2a8>)
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	3b01      	subs	r3, #1
 8000d82:	4a4d      	ldr	r2, [pc, #308]	; (8000eb8 <mode1_run+0x2a8>)
 8000d84:	6013      	str	r3, [r2, #0]
 8000d86:	e01c      	b.n	8000dc2 <mode1_run+0x1b2>
				  }
			  }
			  else{
				  if(t1<=0){
 8000d88:	4b4a      	ldr	r3, [pc, #296]	; (8000eb4 <mode1_run+0x2a4>)
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	dc18      	bgt.n	8000dc2 <mode1_run+0x1b2>
					  t1 = modgreen%10;
 8000d90:	4b4a      	ldr	r3, [pc, #296]	; (8000ebc <mode1_run+0x2ac>)
 8000d92:	6819      	ldr	r1, [r3, #0]
 8000d94:	4b45      	ldr	r3, [pc, #276]	; (8000eac <mode1_run+0x29c>)
 8000d96:	fb83 2301 	smull	r2, r3, r3, r1
 8000d9a:	109a      	asrs	r2, r3, #2
 8000d9c:	17cb      	asrs	r3, r1, #31
 8000d9e:	1ad2      	subs	r2, r2, r3
 8000da0:	4613      	mov	r3, r2
 8000da2:	009b      	lsls	r3, r3, #2
 8000da4:	4413      	add	r3, r2
 8000da6:	005b      	lsls	r3, r3, #1
 8000da8:	1aca      	subs	r2, r1, r3
 8000daa:	4b42      	ldr	r3, [pc, #264]	; (8000eb4 <mode1_run+0x2a4>)
 8000dac:	601a      	str	r2, [r3, #0]
					  x1 = modgreen/10;
 8000dae:	4b43      	ldr	r3, [pc, #268]	; (8000ebc <mode1_run+0x2ac>)
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	4a3e      	ldr	r2, [pc, #248]	; (8000eac <mode1_run+0x29c>)
 8000db4:	fb82 1203 	smull	r1, r2, r2, r3
 8000db8:	1092      	asrs	r2, r2, #2
 8000dba:	17db      	asrs	r3, r3, #31
 8000dbc:	1ad3      	subs	r3, r2, r3
 8000dbe:	4a3e      	ldr	r2, [pc, #248]	; (8000eb8 <mode1_run+0x2a8>)
 8000dc0:	6013      	str	r3, [r2, #0]
				  }
			  }
			  HAL_Delay(150);
 8000dc2:	2096      	movs	r0, #150	; 0x96
 8000dc4:	f000 fe84 	bl	8001ad0 <HAL_Delay>
 8000dc8:	e1b4      	b.n	8001134 <mode1_run+0x524>
		  } else {
			  HAL_GPIO_WritePin(RED2_GPIO_Port, RED2_Pin, GPIO_PIN_RESET);
 8000dca:	2200      	movs	r2, #0
 8000dcc:	2110      	movs	r1, #16
 8000dce:	4834      	ldr	r0, [pc, #208]	; (8000ea0 <mode1_run+0x290>)
 8000dd0:	f001 f941 	bl	8002056 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(AMBER2_GPIO_Port, AMBER2_Pin, GPIO_PIN_SET);
 8000dd4:	2201      	movs	r2, #1
 8000dd6:	2140      	movs	r1, #64	; 0x40
 8000dd8:	4831      	ldr	r0, [pc, #196]	; (8000ea0 <mode1_run+0x290>)
 8000dda:	f001 f93c 	bl	8002056 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GREEN2_GPIO_Port, GREEN2_Pin, GPIO_PIN_RESET);
 8000dde:	2200      	movs	r2, #0
 8000de0:	2120      	movs	r1, #32
 8000de2:	482f      	ldr	r0, [pc, #188]	; (8000ea0 <mode1_run+0x290>)
 8000de4:	f001 f937 	bl	8002056 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, 1);
 8000de8:	2201      	movs	r2, #1
 8000dea:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000dee:	482c      	ldr	r0, [pc, #176]	; (8000ea0 <mode1_run+0x290>)
 8000df0:	f001 f931 	bl	8002056 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, 0);
 8000df4:	2200      	movs	r2, #0
 8000df6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000dfa:	4829      	ldr	r0, [pc, #164]	; (8000ea0 <mode1_run+0x290>)
 8000dfc:	f001 f92b 	bl	8002056 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, 1);
 8000e00:	2201      	movs	r2, #1
 8000e02:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000e06:	4826      	ldr	r0, [pc, #152]	; (8000ea0 <mode1_run+0x290>)
 8000e08:	f001 f925 	bl	8002056 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, 0);
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000e12:	4823      	ldr	r0, [pc, #140]	; (8000ea0 <mode1_run+0x290>)
 8000e14:	f001 f91f 	bl	8002056 <HAL_GPIO_WritePin>
			  display7SEG_2(y2--);
 8000e18:	4b29      	ldr	r3, [pc, #164]	; (8000ec0 <mode1_run+0x2b0>)
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	1e5a      	subs	r2, r3, #1
 8000e1e:	4928      	ldr	r1, [pc, #160]	; (8000ec0 <mode1_run+0x2b0>)
 8000e20:	600a      	str	r2, [r1, #0]
 8000e22:	4618      	mov	r0, r3
 8000e24:	f7ff fcc0 	bl	80007a8 <display7SEG_2>
			  display7SEG(x2);
 8000e28:	4b26      	ldr	r3, [pc, #152]	; (8000ec4 <mode1_run+0x2b4>)
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	4618      	mov	r0, r3
 8000e2e:	f7ff fbb1 	bl	8000594 <display7SEG>
			  if(x2>=1){
 8000e32:	4b24      	ldr	r3, [pc, #144]	; (8000ec4 <mode1_run+0x2b4>)
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	dd0c      	ble.n	8000e54 <mode1_run+0x244>
				  if(y2<0) {
 8000e3a:	4b21      	ldr	r3, [pc, #132]	; (8000ec0 <mode1_run+0x2b0>)
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	da25      	bge.n	8000e8e <mode1_run+0x27e>
					  y2 = 9;
 8000e42:	4b1f      	ldr	r3, [pc, #124]	; (8000ec0 <mode1_run+0x2b0>)
 8000e44:	2209      	movs	r2, #9
 8000e46:	601a      	str	r2, [r3, #0]
					  x2--;
 8000e48:	4b1e      	ldr	r3, [pc, #120]	; (8000ec4 <mode1_run+0x2b4>)
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	3b01      	subs	r3, #1
 8000e4e:	4a1d      	ldr	r2, [pc, #116]	; (8000ec4 <mode1_run+0x2b4>)
 8000e50:	6013      	str	r3, [r2, #0]
 8000e52:	e01c      	b.n	8000e8e <mode1_run+0x27e>
				  }
			  }
			  else{
				  if(y2<=0){
 8000e54:	4b1a      	ldr	r3, [pc, #104]	; (8000ec0 <mode1_run+0x2b0>)
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	dc18      	bgt.n	8000e8e <mode1_run+0x27e>
					  y2 = modamber%10;
 8000e5c:	4b14      	ldr	r3, [pc, #80]	; (8000eb0 <mode1_run+0x2a0>)
 8000e5e:	6819      	ldr	r1, [r3, #0]
 8000e60:	4b12      	ldr	r3, [pc, #72]	; (8000eac <mode1_run+0x29c>)
 8000e62:	fb83 2301 	smull	r2, r3, r3, r1
 8000e66:	109a      	asrs	r2, r3, #2
 8000e68:	17cb      	asrs	r3, r1, #31
 8000e6a:	1ad2      	subs	r2, r2, r3
 8000e6c:	4613      	mov	r3, r2
 8000e6e:	009b      	lsls	r3, r3, #2
 8000e70:	4413      	add	r3, r2
 8000e72:	005b      	lsls	r3, r3, #1
 8000e74:	1aca      	subs	r2, r1, r3
 8000e76:	4b12      	ldr	r3, [pc, #72]	; (8000ec0 <mode1_run+0x2b0>)
 8000e78:	601a      	str	r2, [r3, #0]
					  x2 = modamber/10;
 8000e7a:	4b0d      	ldr	r3, [pc, #52]	; (8000eb0 <mode1_run+0x2a0>)
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	4a0b      	ldr	r2, [pc, #44]	; (8000eac <mode1_run+0x29c>)
 8000e80:	fb82 1203 	smull	r1, r2, r2, r3
 8000e84:	1092      	asrs	r2, r2, #2
 8000e86:	17db      	asrs	r3, r3, #31
 8000e88:	1ad3      	subs	r3, r2, r3
 8000e8a:	4a0e      	ldr	r2, [pc, #56]	; (8000ec4 <mode1_run+0x2b4>)
 8000e8c:	6013      	str	r3, [r2, #0]
				  }
			  }
			  HAL_Delay(150);
 8000e8e:	2096      	movs	r0, #150	; 0x96
 8000e90:	f000 fe1e 	bl	8001ad0 <HAL_Delay>
 8000e94:	e14e      	b.n	8001134 <mode1_run+0x524>
 8000e96:	bf00      	nop
 8000e98:	20000054 	.word	0x20000054
 8000e9c:	20000058 	.word	0x20000058
 8000ea0:	40010800 	.word	0x40010800
 8000ea4:	20000068 	.word	0x20000068
 8000ea8:	20000064 	.word	0x20000064
 8000eac:	66666667 	.word	0x66666667
 8000eb0:	2000005c 	.word	0x2000005c
 8000eb4:	20000070 	.word	0x20000070
 8000eb8:	2000006c 	.word	0x2000006c
 8000ebc:	20000060 	.word	0x20000060
 8000ec0:	20000078 	.word	0x20000078
 8000ec4:	20000074 	.word	0x20000074
		  }
	} else {
		  HAL_GPIO_WritePin(RED2_GPIO_Port, RED2_Pin, GPIO_PIN_SET);
 8000ec8:	2201      	movs	r2, #1
 8000eca:	2110      	movs	r1, #16
 8000ecc:	48a6      	ldr	r0, [pc, #664]	; (8001168 <mode1_run+0x558>)
 8000ece:	f001 f8c2 	bl	8002056 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(AMBER2_GPIO_Port, AMBER2_Pin, GPIO_PIN_RESET);
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	2140      	movs	r1, #64	; 0x40
 8000ed6:	48a4      	ldr	r0, [pc, #656]	; (8001168 <mode1_run+0x558>)
 8000ed8:	f001 f8bd 	bl	8002056 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GREEN2_GPIO_Port, GREEN2_Pin, GPIO_PIN_RESET);
 8000edc:	2200      	movs	r2, #0
 8000ede:	2120      	movs	r1, #32
 8000ee0:	48a1      	ldr	r0, [pc, #644]	; (8001168 <mode1_run+0x558>)
 8000ee2:	f001 f8b8 	bl	8002056 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, 1);
 8000ee6:	2201      	movs	r2, #1
 8000ee8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000eec:	489e      	ldr	r0, [pc, #632]	; (8001168 <mode1_run+0x558>)
 8000eee:	f001 f8b2 	bl	8002056 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, 0);
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000ef8:	489b      	ldr	r0, [pc, #620]	; (8001168 <mode1_run+0x558>)
 8000efa:	f001 f8ac 	bl	8002056 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, 1);
 8000efe:	2201      	movs	r2, #1
 8000f00:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000f04:	4898      	ldr	r0, [pc, #608]	; (8001168 <mode1_run+0x558>)
 8000f06:	f001 f8a6 	bl	8002056 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, 0);
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000f10:	4895      	ldr	r0, [pc, #596]	; (8001168 <mode1_run+0x558>)
 8000f12:	f001 f8a0 	bl	8002056 <HAL_GPIO_WritePin>
		  display7SEG_2(y--);
 8000f16:	4b95      	ldr	r3, [pc, #596]	; (800116c <mode1_run+0x55c>)
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	1e5a      	subs	r2, r3, #1
 8000f1c:	4993      	ldr	r1, [pc, #588]	; (800116c <mode1_run+0x55c>)
 8000f1e:	600a      	str	r2, [r1, #0]
 8000f20:	4618      	mov	r0, r3
 8000f22:	f7ff fc41 	bl	80007a8 <display7SEG_2>
		  display7SEG(x);
 8000f26:	4b92      	ldr	r3, [pc, #584]	; (8001170 <mode1_run+0x560>)
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	f7ff fb32 	bl	8000594 <display7SEG>
		  if(x>=1){
 8000f30:	4b8f      	ldr	r3, [pc, #572]	; (8001170 <mode1_run+0x560>)
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	dd0c      	ble.n	8000f52 <mode1_run+0x342>
			  if(y<0) {
 8000f38:	4b8c      	ldr	r3, [pc, #560]	; (800116c <mode1_run+0x55c>)
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	da25      	bge.n	8000f8c <mode1_run+0x37c>
				  y = 9;
 8000f40:	4b8a      	ldr	r3, [pc, #552]	; (800116c <mode1_run+0x55c>)
 8000f42:	2209      	movs	r2, #9
 8000f44:	601a      	str	r2, [r3, #0]
				  x--;
 8000f46:	4b8a      	ldr	r3, [pc, #552]	; (8001170 <mode1_run+0x560>)
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	3b01      	subs	r3, #1
 8000f4c:	4a88      	ldr	r2, [pc, #544]	; (8001170 <mode1_run+0x560>)
 8000f4e:	6013      	str	r3, [r2, #0]
 8000f50:	e01c      	b.n	8000f8c <mode1_run+0x37c>
			  }
		  }
		  else{
			  if(y<=0){
 8000f52:	4b86      	ldr	r3, [pc, #536]	; (800116c <mode1_run+0x55c>)
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	dc18      	bgt.n	8000f8c <mode1_run+0x37c>
				  y = modred%10;
 8000f5a:	4b86      	ldr	r3, [pc, #536]	; (8001174 <mode1_run+0x564>)
 8000f5c:	6819      	ldr	r1, [r3, #0]
 8000f5e:	4b86      	ldr	r3, [pc, #536]	; (8001178 <mode1_run+0x568>)
 8000f60:	fb83 2301 	smull	r2, r3, r3, r1
 8000f64:	109a      	asrs	r2, r3, #2
 8000f66:	17cb      	asrs	r3, r1, #31
 8000f68:	1ad2      	subs	r2, r2, r3
 8000f6a:	4613      	mov	r3, r2
 8000f6c:	009b      	lsls	r3, r3, #2
 8000f6e:	4413      	add	r3, r2
 8000f70:	005b      	lsls	r3, r3, #1
 8000f72:	1aca      	subs	r2, r1, r3
 8000f74:	4b7d      	ldr	r3, [pc, #500]	; (800116c <mode1_run+0x55c>)
 8000f76:	601a      	str	r2, [r3, #0]
				  x = modred/10;
 8000f78:	4b7e      	ldr	r3, [pc, #504]	; (8001174 <mode1_run+0x564>)
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	4a7e      	ldr	r2, [pc, #504]	; (8001178 <mode1_run+0x568>)
 8000f7e:	fb82 1203 	smull	r1, r2, r2, r3
 8000f82:	1092      	asrs	r2, r2, #2
 8000f84:	17db      	asrs	r3, r3, #31
 8000f86:	1ad3      	subs	r3, r2, r3
 8000f88:	4a79      	ldr	r2, [pc, #484]	; (8001170 <mode1_run+0x560>)
 8000f8a:	6013      	str	r3, [r2, #0]
			  }
		  }
		  HAL_Delay(150);
 8000f8c:	2096      	movs	r0, #150	; 0x96
 8000f8e:	f000 fd9f 	bl	8001ad0 <HAL_Delay>
		  if (counter0 > modamber) {
 8000f92:	4b7a      	ldr	r3, [pc, #488]	; (800117c <mode1_run+0x56c>)
 8000f94:	681a      	ldr	r2, [r3, #0]
 8000f96:	4b7a      	ldr	r3, [pc, #488]	; (8001180 <mode1_run+0x570>)
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	429a      	cmp	r2, r3
 8000f9c:	dd65      	ble.n	800106a <mode1_run+0x45a>
			  HAL_GPIO_WritePin(RED_GPIO_Port, RED_Pin, GPIO_PIN_RESET);
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	2102      	movs	r1, #2
 8000fa2:	4871      	ldr	r0, [pc, #452]	; (8001168 <mode1_run+0x558>)
 8000fa4:	f001 f857 	bl	8002056 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(AMBER_GPIO_Port, AMBER_Pin, GPIO_PIN_RESET);
 8000fa8:	2200      	movs	r2, #0
 8000faa:	2108      	movs	r1, #8
 8000fac:	486e      	ldr	r0, [pc, #440]	; (8001168 <mode1_run+0x558>)
 8000fae:	f001 f852 	bl	8002056 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GREEN_GPIO_Port, GREEN_Pin, GPIO_PIN_SET);
 8000fb2:	2201      	movs	r2, #1
 8000fb4:	2104      	movs	r1, #4
 8000fb6:	486c      	ldr	r0, [pc, #432]	; (8001168 <mode1_run+0x558>)
 8000fb8:	f001 f84d 	bl	8002056 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, 0);
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000fc2:	4869      	ldr	r0, [pc, #420]	; (8001168 <mode1_run+0x558>)
 8000fc4:	f001 f847 	bl	8002056 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, 1);
 8000fc8:	2201      	movs	r2, #1
 8000fca:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000fce:	4866      	ldr	r0, [pc, #408]	; (8001168 <mode1_run+0x558>)
 8000fd0:	f001 f841 	bl	8002056 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, 0);
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000fda:	4863      	ldr	r0, [pc, #396]	; (8001168 <mode1_run+0x558>)
 8000fdc:	f001 f83b 	bl	8002056 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, 1);
 8000fe0:	2201      	movs	r2, #1
 8000fe2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000fe6:	4860      	ldr	r0, [pc, #384]	; (8001168 <mode1_run+0x558>)
 8000fe8:	f001 f835 	bl	8002056 <HAL_GPIO_WritePin>
			  display7SEG_2(t1--);
 8000fec:	4b65      	ldr	r3, [pc, #404]	; (8001184 <mode1_run+0x574>)
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	1e5a      	subs	r2, r3, #1
 8000ff2:	4964      	ldr	r1, [pc, #400]	; (8001184 <mode1_run+0x574>)
 8000ff4:	600a      	str	r2, [r1, #0]
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	f7ff fbd6 	bl	80007a8 <display7SEG_2>
			  display7SEG(x1);
 8000ffc:	4b62      	ldr	r3, [pc, #392]	; (8001188 <mode1_run+0x578>)
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	4618      	mov	r0, r3
 8001002:	f7ff fac7 	bl	8000594 <display7SEG>
			  if(x1>=1){
 8001006:	4b60      	ldr	r3, [pc, #384]	; (8001188 <mode1_run+0x578>)
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	2b00      	cmp	r3, #0
 800100c:	dd0c      	ble.n	8001028 <mode1_run+0x418>
				  if(t1<0) {
 800100e:	4b5d      	ldr	r3, [pc, #372]	; (8001184 <mode1_run+0x574>)
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	2b00      	cmp	r3, #0
 8001014:	da25      	bge.n	8001062 <mode1_run+0x452>
					  t1 = 9;
 8001016:	4b5b      	ldr	r3, [pc, #364]	; (8001184 <mode1_run+0x574>)
 8001018:	2209      	movs	r2, #9
 800101a:	601a      	str	r2, [r3, #0]
					  x1--;
 800101c:	4b5a      	ldr	r3, [pc, #360]	; (8001188 <mode1_run+0x578>)
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	3b01      	subs	r3, #1
 8001022:	4a59      	ldr	r2, [pc, #356]	; (8001188 <mode1_run+0x578>)
 8001024:	6013      	str	r3, [r2, #0]
 8001026:	e01c      	b.n	8001062 <mode1_run+0x452>
				  }
			  }
			  else{
				  if(t1<=0){
 8001028:	4b56      	ldr	r3, [pc, #344]	; (8001184 <mode1_run+0x574>)
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	2b00      	cmp	r3, #0
 800102e:	dc18      	bgt.n	8001062 <mode1_run+0x452>
					  t1 = modgreen%10;
 8001030:	4b56      	ldr	r3, [pc, #344]	; (800118c <mode1_run+0x57c>)
 8001032:	6819      	ldr	r1, [r3, #0]
 8001034:	4b50      	ldr	r3, [pc, #320]	; (8001178 <mode1_run+0x568>)
 8001036:	fb83 2301 	smull	r2, r3, r3, r1
 800103a:	109a      	asrs	r2, r3, #2
 800103c:	17cb      	asrs	r3, r1, #31
 800103e:	1ad2      	subs	r2, r2, r3
 8001040:	4613      	mov	r3, r2
 8001042:	009b      	lsls	r3, r3, #2
 8001044:	4413      	add	r3, r2
 8001046:	005b      	lsls	r3, r3, #1
 8001048:	1aca      	subs	r2, r1, r3
 800104a:	4b4e      	ldr	r3, [pc, #312]	; (8001184 <mode1_run+0x574>)
 800104c:	601a      	str	r2, [r3, #0]
					  x1 = modgreen/10;
 800104e:	4b4f      	ldr	r3, [pc, #316]	; (800118c <mode1_run+0x57c>)
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	4a49      	ldr	r2, [pc, #292]	; (8001178 <mode1_run+0x568>)
 8001054:	fb82 1203 	smull	r1, r2, r2, r3
 8001058:	1092      	asrs	r2, r2, #2
 800105a:	17db      	asrs	r3, r3, #31
 800105c:	1ad3      	subs	r3, r2, r3
 800105e:	4a4a      	ldr	r2, [pc, #296]	; (8001188 <mode1_run+0x578>)
 8001060:	6013      	str	r3, [r2, #0]
				  }
			  }
			  HAL_Delay(150);
 8001062:	2096      	movs	r0, #150	; 0x96
 8001064:	f000 fd34 	bl	8001ad0 <HAL_Delay>
 8001068:	e064      	b.n	8001134 <mode1_run+0x524>
		  } else {
			  HAL_GPIO_WritePin(RED_GPIO_Port, RED_Pin, GPIO_PIN_RESET);
 800106a:	2200      	movs	r2, #0
 800106c:	2102      	movs	r1, #2
 800106e:	483e      	ldr	r0, [pc, #248]	; (8001168 <mode1_run+0x558>)
 8001070:	f000 fff1 	bl	8002056 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(AMBER_GPIO_Port, AMBER_Pin, GPIO_PIN_SET);
 8001074:	2201      	movs	r2, #1
 8001076:	2108      	movs	r1, #8
 8001078:	483b      	ldr	r0, [pc, #236]	; (8001168 <mode1_run+0x558>)
 800107a:	f000 ffec 	bl	8002056 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GREEN_GPIO_Port, GREEN_Pin, GPIO_PIN_RESET);
 800107e:	2200      	movs	r2, #0
 8001080:	2104      	movs	r1, #4
 8001082:	4839      	ldr	r0, [pc, #228]	; (8001168 <mode1_run+0x558>)
 8001084:	f000 ffe7 	bl	8002056 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, 0);
 8001088:	2200      	movs	r2, #0
 800108a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800108e:	4836      	ldr	r0, [pc, #216]	; (8001168 <mode1_run+0x558>)
 8001090:	f000 ffe1 	bl	8002056 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, 1);
 8001094:	2201      	movs	r2, #1
 8001096:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800109a:	4833      	ldr	r0, [pc, #204]	; (8001168 <mode1_run+0x558>)
 800109c:	f000 ffdb 	bl	8002056 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, 0);
 80010a0:	2200      	movs	r2, #0
 80010a2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80010a6:	4830      	ldr	r0, [pc, #192]	; (8001168 <mode1_run+0x558>)
 80010a8:	f000 ffd5 	bl	8002056 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, 1);
 80010ac:	2201      	movs	r2, #1
 80010ae:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80010b2:	482d      	ldr	r0, [pc, #180]	; (8001168 <mode1_run+0x558>)
 80010b4:	f000 ffcf 	bl	8002056 <HAL_GPIO_WritePin>
			  display7SEG_2(y2--);
 80010b8:	4b35      	ldr	r3, [pc, #212]	; (8001190 <mode1_run+0x580>)
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	1e5a      	subs	r2, r3, #1
 80010be:	4934      	ldr	r1, [pc, #208]	; (8001190 <mode1_run+0x580>)
 80010c0:	600a      	str	r2, [r1, #0]
 80010c2:	4618      	mov	r0, r3
 80010c4:	f7ff fb70 	bl	80007a8 <display7SEG_2>
			  display7SEG(x2);
 80010c8:	4b32      	ldr	r3, [pc, #200]	; (8001194 <mode1_run+0x584>)
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	4618      	mov	r0, r3
 80010ce:	f7ff fa61 	bl	8000594 <display7SEG>
			  if(x2>=1){
 80010d2:	4b30      	ldr	r3, [pc, #192]	; (8001194 <mode1_run+0x584>)
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	dd0c      	ble.n	80010f4 <mode1_run+0x4e4>
				  if(y2<0) {
 80010da:	4b2d      	ldr	r3, [pc, #180]	; (8001190 <mode1_run+0x580>)
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	2b00      	cmp	r3, #0
 80010e0:	da25      	bge.n	800112e <mode1_run+0x51e>
					  y2 = 9;
 80010e2:	4b2b      	ldr	r3, [pc, #172]	; (8001190 <mode1_run+0x580>)
 80010e4:	2209      	movs	r2, #9
 80010e6:	601a      	str	r2, [r3, #0]
					  x2--;
 80010e8:	4b2a      	ldr	r3, [pc, #168]	; (8001194 <mode1_run+0x584>)
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	3b01      	subs	r3, #1
 80010ee:	4a29      	ldr	r2, [pc, #164]	; (8001194 <mode1_run+0x584>)
 80010f0:	6013      	str	r3, [r2, #0]
 80010f2:	e01c      	b.n	800112e <mode1_run+0x51e>
				  }
			  }
			  else{
				  if(y2<=0){
 80010f4:	4b26      	ldr	r3, [pc, #152]	; (8001190 <mode1_run+0x580>)
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	dc18      	bgt.n	800112e <mode1_run+0x51e>
					  y2 = modamber%10;
 80010fc:	4b20      	ldr	r3, [pc, #128]	; (8001180 <mode1_run+0x570>)
 80010fe:	6819      	ldr	r1, [r3, #0]
 8001100:	4b1d      	ldr	r3, [pc, #116]	; (8001178 <mode1_run+0x568>)
 8001102:	fb83 2301 	smull	r2, r3, r3, r1
 8001106:	109a      	asrs	r2, r3, #2
 8001108:	17cb      	asrs	r3, r1, #31
 800110a:	1ad2      	subs	r2, r2, r3
 800110c:	4613      	mov	r3, r2
 800110e:	009b      	lsls	r3, r3, #2
 8001110:	4413      	add	r3, r2
 8001112:	005b      	lsls	r3, r3, #1
 8001114:	1aca      	subs	r2, r1, r3
 8001116:	4b1e      	ldr	r3, [pc, #120]	; (8001190 <mode1_run+0x580>)
 8001118:	601a      	str	r2, [r3, #0]
					  x2 = modamber/10;
 800111a:	4b19      	ldr	r3, [pc, #100]	; (8001180 <mode1_run+0x570>)
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	4a16      	ldr	r2, [pc, #88]	; (8001178 <mode1_run+0x568>)
 8001120:	fb82 1203 	smull	r1, r2, r2, r3
 8001124:	1092      	asrs	r2, r2, #2
 8001126:	17db      	asrs	r3, r3, #31
 8001128:	1ad3      	subs	r3, r2, r3
 800112a:	4a1a      	ldr	r2, [pc, #104]	; (8001194 <mode1_run+0x584>)
 800112c:	6013      	str	r3, [r2, #0]
				  }
			  }
			  HAL_Delay(150);
 800112e:	2096      	movs	r0, #150	; 0x96
 8001130:	f000 fcce 	bl	8001ad0 <HAL_Delay>
		  }
  }
  counter0--;
 8001134:	4b11      	ldr	r3, [pc, #68]	; (800117c <mode1_run+0x56c>)
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	3b01      	subs	r3, #1
 800113a:	4a10      	ldr	r2, [pc, #64]	; (800117c <mode1_run+0x56c>)
 800113c:	6013      	str	r3, [r2, #0]
  if (counter0 <= 0) counter0 = modamber+modgreen+modred;
 800113e:	4b0f      	ldr	r3, [pc, #60]	; (800117c <mode1_run+0x56c>)
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	2b00      	cmp	r3, #0
 8001144:	dc09      	bgt.n	800115a <mode1_run+0x54a>
 8001146:	4b0e      	ldr	r3, [pc, #56]	; (8001180 <mode1_run+0x570>)
 8001148:	681a      	ldr	r2, [r3, #0]
 800114a:	4b10      	ldr	r3, [pc, #64]	; (800118c <mode1_run+0x57c>)
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	441a      	add	r2, r3
 8001150:	4b08      	ldr	r3, [pc, #32]	; (8001174 <mode1_run+0x564>)
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	4413      	add	r3, r2
 8001156:	4a09      	ldr	r2, [pc, #36]	; (800117c <mode1_run+0x56c>)
 8001158:	6013      	str	r3, [r2, #0]
  HAL_Delay(1000);
 800115a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800115e:	f000 fcb7 	bl	8001ad0 <HAL_Delay>
}
 8001162:	bf00      	nop
 8001164:	bd80      	pop	{r7, pc}
 8001166:	bf00      	nop
 8001168:	40010800 	.word	0x40010800
 800116c:	20000068 	.word	0x20000068
 8001170:	20000064 	.word	0x20000064
 8001174:	20000058 	.word	0x20000058
 8001178:	66666667 	.word	0x66666667
 800117c:	20000054 	.word	0x20000054
 8001180:	2000005c 	.word	0x2000005c
 8001184:	20000070 	.word	0x20000070
 8001188:	2000006c 	.word	0x2000006c
 800118c:	20000060 	.word	0x20000060
 8001190:	20000078 	.word	0x20000078
 8001194:	20000074 	.word	0x20000074

08001198 <ToggleLedRed2>:
 *      Author: duvan
 */

#include "mode2.h"

void ToggleLedRed2(){
 8001198:	b580      	push	{r7, lr}
 800119a:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(RED_GPIO_Port, RED_Pin);
 800119c:	2102      	movs	r1, #2
 800119e:	4810      	ldr	r0, [pc, #64]	; (80011e0 <ToggleLedRed2+0x48>)
 80011a0:	f000 ff71 	bl	8002086 <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(RED2_GPIO_Port, RED2_Pin);
 80011a4:	2110      	movs	r1, #16
 80011a6:	480e      	ldr	r0, [pc, #56]	; (80011e0 <ToggleLedRed2+0x48>)
 80011a8:	f000 ff6d 	bl	8002086 <HAL_GPIO_TogglePin>
	HAL_GPIO_WritePin(GREEN_GPIO_Port, GREEN_Pin, 0);
 80011ac:	2200      	movs	r2, #0
 80011ae:	2104      	movs	r1, #4
 80011b0:	480b      	ldr	r0, [pc, #44]	; (80011e0 <ToggleLedRed2+0x48>)
 80011b2:	f000 ff50 	bl	8002056 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GREEN2_GPIO_Port, GREEN2_Pin, 0);
 80011b6:	2200      	movs	r2, #0
 80011b8:	2120      	movs	r1, #32
 80011ba:	4809      	ldr	r0, [pc, #36]	; (80011e0 <ToggleLedRed2+0x48>)
 80011bc:	f000 ff4b 	bl	8002056 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(AMBER_GPIO_Port, AMBER_Pin, 0);
 80011c0:	2200      	movs	r2, #0
 80011c2:	2108      	movs	r1, #8
 80011c4:	4806      	ldr	r0, [pc, #24]	; (80011e0 <ToggleLedRed2+0x48>)
 80011c6:	f000 ff46 	bl	8002056 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(AMBER2_GPIO_Port, AMBER2_Pin, 0);
 80011ca:	2200      	movs	r2, #0
 80011cc:	2140      	movs	r1, #64	; 0x40
 80011ce:	4804      	ldr	r0, [pc, #16]	; (80011e0 <ToggleLedRed2+0x48>)
 80011d0:	f000 ff41 	bl	8002056 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 80011d4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80011d8:	f000 fc7a 	bl	8001ad0 <HAL_Delay>
}
 80011dc:	bf00      	nop
 80011de:	bd80      	pop	{r7, pc}
 80011e0:	40010800 	.word	0x40010800

080011e4 <mode_led2>:
void mode_led2(){
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b082      	sub	sp, #8
 80011e8:	af00      	add	r7, sp, #0
	int x = modred/10;
 80011ea:	4b2e      	ldr	r3, [pc, #184]	; (80012a4 <mode_led2+0xc0>)
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	4a2e      	ldr	r2, [pc, #184]	; (80012a8 <mode_led2+0xc4>)
 80011f0:	fb82 1203 	smull	r1, r2, r2, r3
 80011f4:	1092      	asrs	r2, r2, #2
 80011f6:	17db      	asrs	r3, r3, #31
 80011f8:	1ad3      	subs	r3, r2, r3
 80011fa:	607b      	str	r3, [r7, #4]
	int y = modred%10;
 80011fc:	4b29      	ldr	r3, [pc, #164]	; (80012a4 <mode_led2+0xc0>)
 80011fe:	681a      	ldr	r2, [r3, #0]
 8001200:	4b29      	ldr	r3, [pc, #164]	; (80012a8 <mode_led2+0xc4>)
 8001202:	fb83 1302 	smull	r1, r3, r3, r2
 8001206:	1099      	asrs	r1, r3, #2
 8001208:	17d3      	asrs	r3, r2, #31
 800120a:	1ac9      	subs	r1, r1, r3
 800120c:	460b      	mov	r3, r1
 800120e:	009b      	lsls	r3, r3, #2
 8001210:	440b      	add	r3, r1
 8001212:	005b      	lsls	r3, r3, #1
 8001214:	1ad3      	subs	r3, r2, r3
 8001216:	603b      	str	r3, [r7, #0]

	HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, 0);
 8001218:	2200      	movs	r2, #0
 800121a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800121e:	4823      	ldr	r0, [pc, #140]	; (80012ac <mode_led2+0xc8>)
 8001220:	f000 ff19 	bl	8002056 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, 1);
 8001224:	2201      	movs	r2, #1
 8001226:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800122a:	4820      	ldr	r0, [pc, #128]	; (80012ac <mode_led2+0xc8>)
 800122c:	f000 ff13 	bl	8002056 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, 0);
 8001230:	2200      	movs	r2, #0
 8001232:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001236:	481d      	ldr	r0, [pc, #116]	; (80012ac <mode_led2+0xc8>)
 8001238:	f000 ff0d 	bl	8002056 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, 1);
 800123c:	2201      	movs	r2, #1
 800123e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001242:	481a      	ldr	r0, [pc, #104]	; (80012ac <mode_led2+0xc8>)
 8001244:	f000 ff07 	bl	8002056 <HAL_GPIO_WritePin>
	display7SEG(0);
 8001248:	2000      	movs	r0, #0
 800124a:	f7ff f9a3 	bl	8000594 <display7SEG>
	display7SEG_2(2);
 800124e:	2002      	movs	r0, #2
 8001250:	f7ff faaa 	bl	80007a8 <display7SEG_2>
	HAL_Delay(150);
 8001254:	2096      	movs	r0, #150	; 0x96
 8001256:	f000 fc3b 	bl	8001ad0 <HAL_Delay>

	HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, 1);
 800125a:	2201      	movs	r2, #1
 800125c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001260:	4812      	ldr	r0, [pc, #72]	; (80012ac <mode_led2+0xc8>)
 8001262:	f000 fef8 	bl	8002056 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, 0);
 8001266:	2200      	movs	r2, #0
 8001268:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800126c:	480f      	ldr	r0, [pc, #60]	; (80012ac <mode_led2+0xc8>)
 800126e:	f000 fef2 	bl	8002056 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, 1);
 8001272:	2201      	movs	r2, #1
 8001274:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001278:	480c      	ldr	r0, [pc, #48]	; (80012ac <mode_led2+0xc8>)
 800127a:	f000 feec 	bl	8002056 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, 0);
 800127e:	2200      	movs	r2, #0
 8001280:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001284:	4809      	ldr	r0, [pc, #36]	; (80012ac <mode_led2+0xc8>)
 8001286:	f000 fee6 	bl	8002056 <HAL_GPIO_WritePin>
	display7SEG(x);
 800128a:	6878      	ldr	r0, [r7, #4]
 800128c:	f7ff f982 	bl	8000594 <display7SEG>
	display7SEG_2(y);
 8001290:	6838      	ldr	r0, [r7, #0]
 8001292:	f7ff fa89 	bl	80007a8 <display7SEG_2>
	HAL_Delay(150);
 8001296:	2096      	movs	r0, #150	; 0x96
 8001298:	f000 fc1a 	bl	8001ad0 <HAL_Delay>

}
 800129c:	bf00      	nop
 800129e:	3708      	adds	r7, #8
 80012a0:	46bd      	mov	sp, r7
 80012a2:	bd80      	pop	{r7, pc}
 80012a4:	20000058 	.word	0x20000058
 80012a8:	66666667 	.word	0x66666667
 80012ac:	40010800 	.word	0x40010800

080012b0 <mod_duration2>:
void mod_duration2(){
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b082      	sub	sp, #8
 80012b4:	af00      	add	r7, sp, #0
	if(isButtonPressed(1)==1&&status==2){
 80012b6:	2001      	movs	r0, #1
 80012b8:	f7fe ff48 	bl	800014c <isButtonPressed>
 80012bc:	4603      	mov	r3, r0
 80012be:	2b01      	cmp	r3, #1
 80012c0:	d13d      	bne.n	800133e <mod_duration2+0x8e>
 80012c2:	4b32      	ldr	r3, [pc, #200]	; (800138c <mod_duration2+0xdc>)
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	2b02      	cmp	r3, #2
 80012c8:	d139      	bne.n	800133e <mod_duration2+0x8e>
		modred++;
 80012ca:	4b31      	ldr	r3, [pc, #196]	; (8001390 <mod_duration2+0xe0>)
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	3301      	adds	r3, #1
 80012d0:	4a2f      	ldr	r2, [pc, #188]	; (8001390 <mod_duration2+0xe0>)
 80012d2:	6013      	str	r3, [r2, #0]
		int x = modred/10;
 80012d4:	4b2e      	ldr	r3, [pc, #184]	; (8001390 <mod_duration2+0xe0>)
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	4a2e      	ldr	r2, [pc, #184]	; (8001394 <mod_duration2+0xe4>)
 80012da:	fb82 1203 	smull	r1, r2, r2, r3
 80012de:	1092      	asrs	r2, r2, #2
 80012e0:	17db      	asrs	r3, r3, #31
 80012e2:	1ad3      	subs	r3, r2, r3
 80012e4:	607b      	str	r3, [r7, #4]
		int y = modred%10;
 80012e6:	4b2a      	ldr	r3, [pc, #168]	; (8001390 <mod_duration2+0xe0>)
 80012e8:	681a      	ldr	r2, [r3, #0]
 80012ea:	4b2a      	ldr	r3, [pc, #168]	; (8001394 <mod_duration2+0xe4>)
 80012ec:	fb83 1302 	smull	r1, r3, r3, r2
 80012f0:	1099      	asrs	r1, r3, #2
 80012f2:	17d3      	asrs	r3, r2, #31
 80012f4:	1ac9      	subs	r1, r1, r3
 80012f6:	460b      	mov	r3, r1
 80012f8:	009b      	lsls	r3, r3, #2
 80012fa:	440b      	add	r3, r1
 80012fc:	005b      	lsls	r3, r3, #1
 80012fe:	1ad3      	subs	r3, r2, r3
 8001300:	603b      	str	r3, [r7, #0]
		HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, 1);
 8001302:	2201      	movs	r2, #1
 8001304:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001308:	4823      	ldr	r0, [pc, #140]	; (8001398 <mod_duration2+0xe8>)
 800130a:	f000 fea4 	bl	8002056 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, 0);
 800130e:	2200      	movs	r2, #0
 8001310:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001314:	4820      	ldr	r0, [pc, #128]	; (8001398 <mod_duration2+0xe8>)
 8001316:	f000 fe9e 	bl	8002056 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, 1);
 800131a:	2201      	movs	r2, #1
 800131c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001320:	481d      	ldr	r0, [pc, #116]	; (8001398 <mod_duration2+0xe8>)
 8001322:	f000 fe98 	bl	8002056 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, 0);
 8001326:	2200      	movs	r2, #0
 8001328:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800132c:	481a      	ldr	r0, [pc, #104]	; (8001398 <mod_duration2+0xe8>)
 800132e:	f000 fe92 	bl	8002056 <HAL_GPIO_WritePin>
		display7SEG(x);
 8001332:	6878      	ldr	r0, [r7, #4]
 8001334:	f7ff f92e 	bl	8000594 <display7SEG>
		display7SEG_2(y);
 8001338:	6838      	ldr	r0, [r7, #0]
 800133a:	f7ff fa35 	bl	80007a8 <display7SEG_2>
	}
	if(isButtonPressed(2)==1&&status==2){
 800133e:	2002      	movs	r0, #2
 8001340:	f7fe ff04 	bl	800014c <isButtonPressed>
 8001344:	4603      	mov	r3, r0
 8001346:	2b01      	cmp	r3, #1
 8001348:	d11c      	bne.n	8001384 <mod_duration2+0xd4>
 800134a:	4b10      	ldr	r3, [pc, #64]	; (800138c <mod_duration2+0xdc>)
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	2b02      	cmp	r3, #2
 8001350:	d118      	bne.n	8001384 <mod_duration2+0xd4>
		x = modred/10;
 8001352:	4b0f      	ldr	r3, [pc, #60]	; (8001390 <mod_duration2+0xe0>)
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	4a0f      	ldr	r2, [pc, #60]	; (8001394 <mod_duration2+0xe4>)
 8001358:	fb82 1203 	smull	r1, r2, r2, r3
 800135c:	1092      	asrs	r2, r2, #2
 800135e:	17db      	asrs	r3, r3, #31
 8001360:	1ad3      	subs	r3, r2, r3
 8001362:	4a0e      	ldr	r2, [pc, #56]	; (800139c <mod_duration2+0xec>)
 8001364:	6013      	str	r3, [r2, #0]
		y = modred%10;
 8001366:	4b0a      	ldr	r3, [pc, #40]	; (8001390 <mod_duration2+0xe0>)
 8001368:	6819      	ldr	r1, [r3, #0]
 800136a:	4b0a      	ldr	r3, [pc, #40]	; (8001394 <mod_duration2+0xe4>)
 800136c:	fb83 2301 	smull	r2, r3, r3, r1
 8001370:	109a      	asrs	r2, r3, #2
 8001372:	17cb      	asrs	r3, r1, #31
 8001374:	1ad2      	subs	r2, r2, r3
 8001376:	4613      	mov	r3, r2
 8001378:	009b      	lsls	r3, r3, #2
 800137a:	4413      	add	r3, r2
 800137c:	005b      	lsls	r3, r3, #1
 800137e:	1aca      	subs	r2, r1, r3
 8001380:	4b07      	ldr	r3, [pc, #28]	; (80013a0 <mod_duration2+0xf0>)
 8001382:	601a      	str	r2, [r3, #0]
	}
}
 8001384:	bf00      	nop
 8001386:	3708      	adds	r7, #8
 8001388:	46bd      	mov	sp, r7
 800138a:	bd80      	pop	{r7, pc}
 800138c:	20000050 	.word	0x20000050
 8001390:	20000058 	.word	0x20000058
 8001394:	66666667 	.word	0x66666667
 8001398:	40010800 	.word	0x40010800
 800139c:	20000064 	.word	0x20000064
 80013a0:	20000068 	.word	0x20000068

080013a4 <mode2_run>:
void mode2_run(){
 80013a4:	b580      	push	{r7, lr}
 80013a6:	af00      	add	r7, sp, #0
	mode_led2();
 80013a8:	f7ff ff1c 	bl	80011e4 <mode_led2>
	ToggleLedRed2();
 80013ac:	f7ff fef4 	bl	8001198 <ToggleLedRed2>
	mod_duration2();
 80013b0:	f7ff ff7e 	bl	80012b0 <mod_duration2>
}
 80013b4:	bf00      	nop
 80013b6:	bd80      	pop	{r7, pc}

080013b8 <ToggleLedRed3>:
 *  Created on: 15 Sep 2023
 *      Author: duvan
 */
#include "mode3.h"

void ToggleLedRed3(){
 80013b8:	b580      	push	{r7, lr}
 80013ba:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(AMBER_GPIO_Port, AMBER_Pin);
 80013bc:	2108      	movs	r1, #8
 80013be:	4810      	ldr	r0, [pc, #64]	; (8001400 <ToggleLedRed3+0x48>)
 80013c0:	f000 fe61 	bl	8002086 <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(AMBER2_GPIO_Port, AMBER2_Pin);
 80013c4:	2140      	movs	r1, #64	; 0x40
 80013c6:	480e      	ldr	r0, [pc, #56]	; (8001400 <ToggleLedRed3+0x48>)
 80013c8:	f000 fe5d 	bl	8002086 <HAL_GPIO_TogglePin>
	HAL_GPIO_WritePin(GREEN_GPIO_Port, GREEN_Pin, 0);
 80013cc:	2200      	movs	r2, #0
 80013ce:	2104      	movs	r1, #4
 80013d0:	480b      	ldr	r0, [pc, #44]	; (8001400 <ToggleLedRed3+0x48>)
 80013d2:	f000 fe40 	bl	8002056 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GREEN2_GPIO_Port, GREEN2_Pin, 0);
 80013d6:	2200      	movs	r2, #0
 80013d8:	2120      	movs	r1, #32
 80013da:	4809      	ldr	r0, [pc, #36]	; (8001400 <ToggleLedRed3+0x48>)
 80013dc:	f000 fe3b 	bl	8002056 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RED2_GPIO_Port, RED2_Pin, 0);
 80013e0:	2200      	movs	r2, #0
 80013e2:	2110      	movs	r1, #16
 80013e4:	4806      	ldr	r0, [pc, #24]	; (8001400 <ToggleLedRed3+0x48>)
 80013e6:	f000 fe36 	bl	8002056 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RED_GPIO_Port, RED_Pin, 0);
 80013ea:	2200      	movs	r2, #0
 80013ec:	2102      	movs	r1, #2
 80013ee:	4804      	ldr	r0, [pc, #16]	; (8001400 <ToggleLedRed3+0x48>)
 80013f0:	f000 fe31 	bl	8002056 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 80013f4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80013f8:	f000 fb6a 	bl	8001ad0 <HAL_Delay>
}
 80013fc:	bf00      	nop
 80013fe:	bd80      	pop	{r7, pc}
 8001400:	40010800 	.word	0x40010800

08001404 <mode_led3>:
void mode_led3(){
 8001404:	b580      	push	{r7, lr}
 8001406:	b082      	sub	sp, #8
 8001408:	af00      	add	r7, sp, #0
	int x = modamber/10;
 800140a:	4b2e      	ldr	r3, [pc, #184]	; (80014c4 <mode_led3+0xc0>)
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	4a2e      	ldr	r2, [pc, #184]	; (80014c8 <mode_led3+0xc4>)
 8001410:	fb82 1203 	smull	r1, r2, r2, r3
 8001414:	1092      	asrs	r2, r2, #2
 8001416:	17db      	asrs	r3, r3, #31
 8001418:	1ad3      	subs	r3, r2, r3
 800141a:	607b      	str	r3, [r7, #4]
	int y = modamber%10;
 800141c:	4b29      	ldr	r3, [pc, #164]	; (80014c4 <mode_led3+0xc0>)
 800141e:	681a      	ldr	r2, [r3, #0]
 8001420:	4b29      	ldr	r3, [pc, #164]	; (80014c8 <mode_led3+0xc4>)
 8001422:	fb83 1302 	smull	r1, r3, r3, r2
 8001426:	1099      	asrs	r1, r3, #2
 8001428:	17d3      	asrs	r3, r2, #31
 800142a:	1ac9      	subs	r1, r1, r3
 800142c:	460b      	mov	r3, r1
 800142e:	009b      	lsls	r3, r3, #2
 8001430:	440b      	add	r3, r1
 8001432:	005b      	lsls	r3, r3, #1
 8001434:	1ad3      	subs	r3, r2, r3
 8001436:	603b      	str	r3, [r7, #0]

	HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, 0);
 8001438:	2200      	movs	r2, #0
 800143a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800143e:	4823      	ldr	r0, [pc, #140]	; (80014cc <mode_led3+0xc8>)
 8001440:	f000 fe09 	bl	8002056 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, 1);
 8001444:	2201      	movs	r2, #1
 8001446:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800144a:	4820      	ldr	r0, [pc, #128]	; (80014cc <mode_led3+0xc8>)
 800144c:	f000 fe03 	bl	8002056 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, 0);
 8001450:	2200      	movs	r2, #0
 8001452:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001456:	481d      	ldr	r0, [pc, #116]	; (80014cc <mode_led3+0xc8>)
 8001458:	f000 fdfd 	bl	8002056 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, 1);
 800145c:	2201      	movs	r2, #1
 800145e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001462:	481a      	ldr	r0, [pc, #104]	; (80014cc <mode_led3+0xc8>)
 8001464:	f000 fdf7 	bl	8002056 <HAL_GPIO_WritePin>
	display7SEG(0);
 8001468:	2000      	movs	r0, #0
 800146a:	f7ff f893 	bl	8000594 <display7SEG>
	display7SEG_2(3);
 800146e:	2003      	movs	r0, #3
 8001470:	f7ff f99a 	bl	80007a8 <display7SEG_2>
	HAL_Delay(150);
 8001474:	2096      	movs	r0, #150	; 0x96
 8001476:	f000 fb2b 	bl	8001ad0 <HAL_Delay>

	HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, 1);
 800147a:	2201      	movs	r2, #1
 800147c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001480:	4812      	ldr	r0, [pc, #72]	; (80014cc <mode_led3+0xc8>)
 8001482:	f000 fde8 	bl	8002056 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, 0);
 8001486:	2200      	movs	r2, #0
 8001488:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800148c:	480f      	ldr	r0, [pc, #60]	; (80014cc <mode_led3+0xc8>)
 800148e:	f000 fde2 	bl	8002056 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, 1);
 8001492:	2201      	movs	r2, #1
 8001494:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001498:	480c      	ldr	r0, [pc, #48]	; (80014cc <mode_led3+0xc8>)
 800149a:	f000 fddc 	bl	8002056 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, 0);
 800149e:	2200      	movs	r2, #0
 80014a0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80014a4:	4809      	ldr	r0, [pc, #36]	; (80014cc <mode_led3+0xc8>)
 80014a6:	f000 fdd6 	bl	8002056 <HAL_GPIO_WritePin>
	display7SEG(x);
 80014aa:	6878      	ldr	r0, [r7, #4]
 80014ac:	f7ff f872 	bl	8000594 <display7SEG>
	display7SEG_2(y);
 80014b0:	6838      	ldr	r0, [r7, #0]
 80014b2:	f7ff f979 	bl	80007a8 <display7SEG_2>
	HAL_Delay(150);
 80014b6:	2096      	movs	r0, #150	; 0x96
 80014b8:	f000 fb0a 	bl	8001ad0 <HAL_Delay>

}
 80014bc:	bf00      	nop
 80014be:	3708      	adds	r7, #8
 80014c0:	46bd      	mov	sp, r7
 80014c2:	bd80      	pop	{r7, pc}
 80014c4:	2000005c 	.word	0x2000005c
 80014c8:	66666667 	.word	0x66666667
 80014cc:	40010800 	.word	0x40010800

080014d0 <mod_duration3>:
void mod_duration3(){
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b082      	sub	sp, #8
 80014d4:	af00      	add	r7, sp, #0
	if(isButtonPressed(1)==1&&status==3){
 80014d6:	2001      	movs	r0, #1
 80014d8:	f7fe fe38 	bl	800014c <isButtonPressed>
 80014dc:	4603      	mov	r3, r0
 80014de:	2b01      	cmp	r3, #1
 80014e0:	d13d      	bne.n	800155e <mod_duration3+0x8e>
 80014e2:	4b32      	ldr	r3, [pc, #200]	; (80015ac <mod_duration3+0xdc>)
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	2b03      	cmp	r3, #3
 80014e8:	d139      	bne.n	800155e <mod_duration3+0x8e>
		modamber++;
 80014ea:	4b31      	ldr	r3, [pc, #196]	; (80015b0 <mod_duration3+0xe0>)
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	3301      	adds	r3, #1
 80014f0:	4a2f      	ldr	r2, [pc, #188]	; (80015b0 <mod_duration3+0xe0>)
 80014f2:	6013      	str	r3, [r2, #0]
		int x = modamber/10;
 80014f4:	4b2e      	ldr	r3, [pc, #184]	; (80015b0 <mod_duration3+0xe0>)
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	4a2e      	ldr	r2, [pc, #184]	; (80015b4 <mod_duration3+0xe4>)
 80014fa:	fb82 1203 	smull	r1, r2, r2, r3
 80014fe:	1092      	asrs	r2, r2, #2
 8001500:	17db      	asrs	r3, r3, #31
 8001502:	1ad3      	subs	r3, r2, r3
 8001504:	607b      	str	r3, [r7, #4]
		int y = modamber%10;
 8001506:	4b2a      	ldr	r3, [pc, #168]	; (80015b0 <mod_duration3+0xe0>)
 8001508:	681a      	ldr	r2, [r3, #0]
 800150a:	4b2a      	ldr	r3, [pc, #168]	; (80015b4 <mod_duration3+0xe4>)
 800150c:	fb83 1302 	smull	r1, r3, r3, r2
 8001510:	1099      	asrs	r1, r3, #2
 8001512:	17d3      	asrs	r3, r2, #31
 8001514:	1ac9      	subs	r1, r1, r3
 8001516:	460b      	mov	r3, r1
 8001518:	009b      	lsls	r3, r3, #2
 800151a:	440b      	add	r3, r1
 800151c:	005b      	lsls	r3, r3, #1
 800151e:	1ad3      	subs	r3, r2, r3
 8001520:	603b      	str	r3, [r7, #0]
		HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, 1);
 8001522:	2201      	movs	r2, #1
 8001524:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001528:	4823      	ldr	r0, [pc, #140]	; (80015b8 <mod_duration3+0xe8>)
 800152a:	f000 fd94 	bl	8002056 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, 0);
 800152e:	2200      	movs	r2, #0
 8001530:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001534:	4820      	ldr	r0, [pc, #128]	; (80015b8 <mod_duration3+0xe8>)
 8001536:	f000 fd8e 	bl	8002056 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, 1);
 800153a:	2201      	movs	r2, #1
 800153c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001540:	481d      	ldr	r0, [pc, #116]	; (80015b8 <mod_duration3+0xe8>)
 8001542:	f000 fd88 	bl	8002056 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, 0);
 8001546:	2200      	movs	r2, #0
 8001548:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800154c:	481a      	ldr	r0, [pc, #104]	; (80015b8 <mod_duration3+0xe8>)
 800154e:	f000 fd82 	bl	8002056 <HAL_GPIO_WritePin>
		display7SEG(x);
 8001552:	6878      	ldr	r0, [r7, #4]
 8001554:	f7ff f81e 	bl	8000594 <display7SEG>
		display7SEG_2(y);
 8001558:	6838      	ldr	r0, [r7, #0]
 800155a:	f7ff f925 	bl	80007a8 <display7SEG_2>
	}
	if(isButtonPressed(2)==1&&status==3){
 800155e:	2002      	movs	r0, #2
 8001560:	f7fe fdf4 	bl	800014c <isButtonPressed>
 8001564:	4603      	mov	r3, r0
 8001566:	2b01      	cmp	r3, #1
 8001568:	d11c      	bne.n	80015a4 <mod_duration3+0xd4>
 800156a:	4b10      	ldr	r3, [pc, #64]	; (80015ac <mod_duration3+0xdc>)
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	2b03      	cmp	r3, #3
 8001570:	d118      	bne.n	80015a4 <mod_duration3+0xd4>
		x1 = modamber/10;
 8001572:	4b0f      	ldr	r3, [pc, #60]	; (80015b0 <mod_duration3+0xe0>)
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	4a0f      	ldr	r2, [pc, #60]	; (80015b4 <mod_duration3+0xe4>)
 8001578:	fb82 1203 	smull	r1, r2, r2, r3
 800157c:	1092      	asrs	r2, r2, #2
 800157e:	17db      	asrs	r3, r3, #31
 8001580:	1ad3      	subs	r3, r2, r3
 8001582:	4a0e      	ldr	r2, [pc, #56]	; (80015bc <mod_duration3+0xec>)
 8001584:	6013      	str	r3, [r2, #0]
		t1 = modamber%10;
 8001586:	4b0a      	ldr	r3, [pc, #40]	; (80015b0 <mod_duration3+0xe0>)
 8001588:	6819      	ldr	r1, [r3, #0]
 800158a:	4b0a      	ldr	r3, [pc, #40]	; (80015b4 <mod_duration3+0xe4>)
 800158c:	fb83 2301 	smull	r2, r3, r3, r1
 8001590:	109a      	asrs	r2, r3, #2
 8001592:	17cb      	asrs	r3, r1, #31
 8001594:	1ad2      	subs	r2, r2, r3
 8001596:	4613      	mov	r3, r2
 8001598:	009b      	lsls	r3, r3, #2
 800159a:	4413      	add	r3, r2
 800159c:	005b      	lsls	r3, r3, #1
 800159e:	1aca      	subs	r2, r1, r3
 80015a0:	4b07      	ldr	r3, [pc, #28]	; (80015c0 <mod_duration3+0xf0>)
 80015a2:	601a      	str	r2, [r3, #0]
	}
}
 80015a4:	bf00      	nop
 80015a6:	3708      	adds	r7, #8
 80015a8:	46bd      	mov	sp, r7
 80015aa:	bd80      	pop	{r7, pc}
 80015ac:	20000050 	.word	0x20000050
 80015b0:	2000005c 	.word	0x2000005c
 80015b4:	66666667 	.word	0x66666667
 80015b8:	40010800 	.word	0x40010800
 80015bc:	2000006c 	.word	0x2000006c
 80015c0:	20000070 	.word	0x20000070

080015c4 <mode3_run>:
void mode3_run(){
 80015c4:	b580      	push	{r7, lr}
 80015c6:	af00      	add	r7, sp, #0
	mode_led3();
 80015c8:	f7ff ff1c 	bl	8001404 <mode_led3>
	ToggleLedRed3();
 80015cc:	f7ff fef4 	bl	80013b8 <ToggleLedRed3>
	mod_duration3();
 80015d0:	f7ff ff7e 	bl	80014d0 <mod_duration3>
}
 80015d4:	bf00      	nop
 80015d6:	bd80      	pop	{r7, pc}

080015d8 <ToggleLedRed4>:
 *  Created on: 15 Sep 2023
 *      Author: duvan
 */
#include "mode4.h"

void ToggleLedRed4(){
 80015d8:	b580      	push	{r7, lr}
 80015da:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(GREEN_GPIO_Port, GREEN_Pin);
 80015dc:	2104      	movs	r1, #4
 80015de:	4810      	ldr	r0, [pc, #64]	; (8001620 <ToggleLedRed4+0x48>)
 80015e0:	f000 fd51 	bl	8002086 <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(GREEN2_GPIO_Port, GREEN2_Pin);
 80015e4:	2120      	movs	r1, #32
 80015e6:	480e      	ldr	r0, [pc, #56]	; (8001620 <ToggleLedRed4+0x48>)
 80015e8:	f000 fd4d 	bl	8002086 <HAL_GPIO_TogglePin>
	HAL_GPIO_WritePin(RED_GPIO_Port, RED_Pin, 0);
 80015ec:	2200      	movs	r2, #0
 80015ee:	2102      	movs	r1, #2
 80015f0:	480b      	ldr	r0, [pc, #44]	; (8001620 <ToggleLedRed4+0x48>)
 80015f2:	f000 fd30 	bl	8002056 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RED2_GPIO_Port, RED2_Pin, 0);
 80015f6:	2200      	movs	r2, #0
 80015f8:	2110      	movs	r1, #16
 80015fa:	4809      	ldr	r0, [pc, #36]	; (8001620 <ToggleLedRed4+0x48>)
 80015fc:	f000 fd2b 	bl	8002056 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(AMBER_GPIO_Port, AMBER_Pin, 0);
 8001600:	2200      	movs	r2, #0
 8001602:	2108      	movs	r1, #8
 8001604:	4806      	ldr	r0, [pc, #24]	; (8001620 <ToggleLedRed4+0x48>)
 8001606:	f000 fd26 	bl	8002056 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(AMBER2_GPIO_Port, AMBER2_Pin, 0);
 800160a:	2200      	movs	r2, #0
 800160c:	2140      	movs	r1, #64	; 0x40
 800160e:	4804      	ldr	r0, [pc, #16]	; (8001620 <ToggleLedRed4+0x48>)
 8001610:	f000 fd21 	bl	8002056 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 8001614:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001618:	f000 fa5a 	bl	8001ad0 <HAL_Delay>
}
 800161c:	bf00      	nop
 800161e:	bd80      	pop	{r7, pc}
 8001620:	40010800 	.word	0x40010800

08001624 <mode_led4>:
void mode_led4(){
 8001624:	b580      	push	{r7, lr}
 8001626:	b082      	sub	sp, #8
 8001628:	af00      	add	r7, sp, #0
	int x = modgreen/10;
 800162a:	4b2e      	ldr	r3, [pc, #184]	; (80016e4 <mode_led4+0xc0>)
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	4a2e      	ldr	r2, [pc, #184]	; (80016e8 <mode_led4+0xc4>)
 8001630:	fb82 1203 	smull	r1, r2, r2, r3
 8001634:	1092      	asrs	r2, r2, #2
 8001636:	17db      	asrs	r3, r3, #31
 8001638:	1ad3      	subs	r3, r2, r3
 800163a:	607b      	str	r3, [r7, #4]
	int y = modgreen%10;
 800163c:	4b29      	ldr	r3, [pc, #164]	; (80016e4 <mode_led4+0xc0>)
 800163e:	681a      	ldr	r2, [r3, #0]
 8001640:	4b29      	ldr	r3, [pc, #164]	; (80016e8 <mode_led4+0xc4>)
 8001642:	fb83 1302 	smull	r1, r3, r3, r2
 8001646:	1099      	asrs	r1, r3, #2
 8001648:	17d3      	asrs	r3, r2, #31
 800164a:	1ac9      	subs	r1, r1, r3
 800164c:	460b      	mov	r3, r1
 800164e:	009b      	lsls	r3, r3, #2
 8001650:	440b      	add	r3, r1
 8001652:	005b      	lsls	r3, r3, #1
 8001654:	1ad3      	subs	r3, r2, r3
 8001656:	603b      	str	r3, [r7, #0]

	HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, 0);
 8001658:	2200      	movs	r2, #0
 800165a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800165e:	4823      	ldr	r0, [pc, #140]	; (80016ec <mode_led4+0xc8>)
 8001660:	f000 fcf9 	bl	8002056 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, 1);
 8001664:	2201      	movs	r2, #1
 8001666:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800166a:	4820      	ldr	r0, [pc, #128]	; (80016ec <mode_led4+0xc8>)
 800166c:	f000 fcf3 	bl	8002056 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, 0);
 8001670:	2200      	movs	r2, #0
 8001672:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001676:	481d      	ldr	r0, [pc, #116]	; (80016ec <mode_led4+0xc8>)
 8001678:	f000 fced 	bl	8002056 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, 1);
 800167c:	2201      	movs	r2, #1
 800167e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001682:	481a      	ldr	r0, [pc, #104]	; (80016ec <mode_led4+0xc8>)
 8001684:	f000 fce7 	bl	8002056 <HAL_GPIO_WritePin>
	display7SEG(0);
 8001688:	2000      	movs	r0, #0
 800168a:	f7fe ff83 	bl	8000594 <display7SEG>
	display7SEG_2(4);
 800168e:	2004      	movs	r0, #4
 8001690:	f7ff f88a 	bl	80007a8 <display7SEG_2>
	HAL_Delay(150);
 8001694:	2096      	movs	r0, #150	; 0x96
 8001696:	f000 fa1b 	bl	8001ad0 <HAL_Delay>

	HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, 1);
 800169a:	2201      	movs	r2, #1
 800169c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80016a0:	4812      	ldr	r0, [pc, #72]	; (80016ec <mode_led4+0xc8>)
 80016a2:	f000 fcd8 	bl	8002056 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, 0);
 80016a6:	2200      	movs	r2, #0
 80016a8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80016ac:	480f      	ldr	r0, [pc, #60]	; (80016ec <mode_led4+0xc8>)
 80016ae:	f000 fcd2 	bl	8002056 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, 1);
 80016b2:	2201      	movs	r2, #1
 80016b4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80016b8:	480c      	ldr	r0, [pc, #48]	; (80016ec <mode_led4+0xc8>)
 80016ba:	f000 fccc 	bl	8002056 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, 0);
 80016be:	2200      	movs	r2, #0
 80016c0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80016c4:	4809      	ldr	r0, [pc, #36]	; (80016ec <mode_led4+0xc8>)
 80016c6:	f000 fcc6 	bl	8002056 <HAL_GPIO_WritePin>
	display7SEG(x);
 80016ca:	6878      	ldr	r0, [r7, #4]
 80016cc:	f7fe ff62 	bl	8000594 <display7SEG>
	display7SEG_2(y);
 80016d0:	6838      	ldr	r0, [r7, #0]
 80016d2:	f7ff f869 	bl	80007a8 <display7SEG_2>
	HAL_Delay(150);
 80016d6:	2096      	movs	r0, #150	; 0x96
 80016d8:	f000 f9fa 	bl	8001ad0 <HAL_Delay>

}
 80016dc:	bf00      	nop
 80016de:	3708      	adds	r7, #8
 80016e0:	46bd      	mov	sp, r7
 80016e2:	bd80      	pop	{r7, pc}
 80016e4:	20000060 	.word	0x20000060
 80016e8:	66666667 	.word	0x66666667
 80016ec:	40010800 	.word	0x40010800

080016f0 <mod_duration4>:
void mod_duration4(){
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b082      	sub	sp, #8
 80016f4:	af00      	add	r7, sp, #0
	if(isButtonPressed(1)==1&&status==4){
 80016f6:	2001      	movs	r0, #1
 80016f8:	f7fe fd28 	bl	800014c <isButtonPressed>
 80016fc:	4603      	mov	r3, r0
 80016fe:	2b01      	cmp	r3, #1
 8001700:	d13d      	bne.n	800177e <mod_duration4+0x8e>
 8001702:	4b32      	ldr	r3, [pc, #200]	; (80017cc <mod_duration4+0xdc>)
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	2b04      	cmp	r3, #4
 8001708:	d139      	bne.n	800177e <mod_duration4+0x8e>
		modgreen++;
 800170a:	4b31      	ldr	r3, [pc, #196]	; (80017d0 <mod_duration4+0xe0>)
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	3301      	adds	r3, #1
 8001710:	4a2f      	ldr	r2, [pc, #188]	; (80017d0 <mod_duration4+0xe0>)
 8001712:	6013      	str	r3, [r2, #0]
		int x = modgreen/10;
 8001714:	4b2e      	ldr	r3, [pc, #184]	; (80017d0 <mod_duration4+0xe0>)
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	4a2e      	ldr	r2, [pc, #184]	; (80017d4 <mod_duration4+0xe4>)
 800171a:	fb82 1203 	smull	r1, r2, r2, r3
 800171e:	1092      	asrs	r2, r2, #2
 8001720:	17db      	asrs	r3, r3, #31
 8001722:	1ad3      	subs	r3, r2, r3
 8001724:	607b      	str	r3, [r7, #4]
		int y = modgreen%10;
 8001726:	4b2a      	ldr	r3, [pc, #168]	; (80017d0 <mod_duration4+0xe0>)
 8001728:	681a      	ldr	r2, [r3, #0]
 800172a:	4b2a      	ldr	r3, [pc, #168]	; (80017d4 <mod_duration4+0xe4>)
 800172c:	fb83 1302 	smull	r1, r3, r3, r2
 8001730:	1099      	asrs	r1, r3, #2
 8001732:	17d3      	asrs	r3, r2, #31
 8001734:	1ac9      	subs	r1, r1, r3
 8001736:	460b      	mov	r3, r1
 8001738:	009b      	lsls	r3, r3, #2
 800173a:	440b      	add	r3, r1
 800173c:	005b      	lsls	r3, r3, #1
 800173e:	1ad3      	subs	r3, r2, r3
 8001740:	603b      	str	r3, [r7, #0]
		HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, 1);
 8001742:	2201      	movs	r2, #1
 8001744:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001748:	4823      	ldr	r0, [pc, #140]	; (80017d8 <mod_duration4+0xe8>)
 800174a:	f000 fc84 	bl	8002056 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, 0);
 800174e:	2200      	movs	r2, #0
 8001750:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001754:	4820      	ldr	r0, [pc, #128]	; (80017d8 <mod_duration4+0xe8>)
 8001756:	f000 fc7e 	bl	8002056 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, 1);
 800175a:	2201      	movs	r2, #1
 800175c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001760:	481d      	ldr	r0, [pc, #116]	; (80017d8 <mod_duration4+0xe8>)
 8001762:	f000 fc78 	bl	8002056 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, 0);
 8001766:	2200      	movs	r2, #0
 8001768:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800176c:	481a      	ldr	r0, [pc, #104]	; (80017d8 <mod_duration4+0xe8>)
 800176e:	f000 fc72 	bl	8002056 <HAL_GPIO_WritePin>
		display7SEG(x);
 8001772:	6878      	ldr	r0, [r7, #4]
 8001774:	f7fe ff0e 	bl	8000594 <display7SEG>
		display7SEG_2(y);
 8001778:	6838      	ldr	r0, [r7, #0]
 800177a:	f7ff f815 	bl	80007a8 <display7SEG_2>
	}
	if(isButtonPressed(2)==1&&status==4){
 800177e:	2002      	movs	r0, #2
 8001780:	f7fe fce4 	bl	800014c <isButtonPressed>
 8001784:	4603      	mov	r3, r0
 8001786:	2b01      	cmp	r3, #1
 8001788:	d11c      	bne.n	80017c4 <mod_duration4+0xd4>
 800178a:	4b10      	ldr	r3, [pc, #64]	; (80017cc <mod_duration4+0xdc>)
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	2b04      	cmp	r3, #4
 8001790:	d118      	bne.n	80017c4 <mod_duration4+0xd4>
		x2 = modgreen/10;
 8001792:	4b0f      	ldr	r3, [pc, #60]	; (80017d0 <mod_duration4+0xe0>)
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	4a0f      	ldr	r2, [pc, #60]	; (80017d4 <mod_duration4+0xe4>)
 8001798:	fb82 1203 	smull	r1, r2, r2, r3
 800179c:	1092      	asrs	r2, r2, #2
 800179e:	17db      	asrs	r3, r3, #31
 80017a0:	1ad3      	subs	r3, r2, r3
 80017a2:	4a0e      	ldr	r2, [pc, #56]	; (80017dc <mod_duration4+0xec>)
 80017a4:	6013      	str	r3, [r2, #0]
		y2 = modgreen%10;
 80017a6:	4b0a      	ldr	r3, [pc, #40]	; (80017d0 <mod_duration4+0xe0>)
 80017a8:	6819      	ldr	r1, [r3, #0]
 80017aa:	4b0a      	ldr	r3, [pc, #40]	; (80017d4 <mod_duration4+0xe4>)
 80017ac:	fb83 2301 	smull	r2, r3, r3, r1
 80017b0:	109a      	asrs	r2, r3, #2
 80017b2:	17cb      	asrs	r3, r1, #31
 80017b4:	1ad2      	subs	r2, r2, r3
 80017b6:	4613      	mov	r3, r2
 80017b8:	009b      	lsls	r3, r3, #2
 80017ba:	4413      	add	r3, r2
 80017bc:	005b      	lsls	r3, r3, #1
 80017be:	1aca      	subs	r2, r1, r3
 80017c0:	4b07      	ldr	r3, [pc, #28]	; (80017e0 <mod_duration4+0xf0>)
 80017c2:	601a      	str	r2, [r3, #0]
	}
}
 80017c4:	bf00      	nop
 80017c6:	3708      	adds	r7, #8
 80017c8:	46bd      	mov	sp, r7
 80017ca:	bd80      	pop	{r7, pc}
 80017cc:	20000050 	.word	0x20000050
 80017d0:	20000060 	.word	0x20000060
 80017d4:	66666667 	.word	0x66666667
 80017d8:	40010800 	.word	0x40010800
 80017dc:	20000074 	.word	0x20000074
 80017e0:	20000078 	.word	0x20000078

080017e4 <mode4_run>:
void mode4_run(){
 80017e4:	b580      	push	{r7, lr}
 80017e6:	af00      	add	r7, sp, #0
	mode_led4();
 80017e8:	f7ff ff1c 	bl	8001624 <mode_led4>
	ToggleLedRed4();
 80017ec:	f7ff fef4 	bl	80015d8 <ToggleLedRed4>
	mod_duration4();
 80017f0:	f7ff ff7e 	bl	80016f0 <mod_duration4>
}
 80017f4:	bf00      	nop
 80017f6:	bd80      	pop	{r7, pc}

080017f8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80017f8:	b480      	push	{r7}
 80017fa:	b085      	sub	sp, #20
 80017fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80017fe:	4b15      	ldr	r3, [pc, #84]	; (8001854 <HAL_MspInit+0x5c>)
 8001800:	699b      	ldr	r3, [r3, #24]
 8001802:	4a14      	ldr	r2, [pc, #80]	; (8001854 <HAL_MspInit+0x5c>)
 8001804:	f043 0301 	orr.w	r3, r3, #1
 8001808:	6193      	str	r3, [r2, #24]
 800180a:	4b12      	ldr	r3, [pc, #72]	; (8001854 <HAL_MspInit+0x5c>)
 800180c:	699b      	ldr	r3, [r3, #24]
 800180e:	f003 0301 	and.w	r3, r3, #1
 8001812:	60bb      	str	r3, [r7, #8]
 8001814:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001816:	4b0f      	ldr	r3, [pc, #60]	; (8001854 <HAL_MspInit+0x5c>)
 8001818:	69db      	ldr	r3, [r3, #28]
 800181a:	4a0e      	ldr	r2, [pc, #56]	; (8001854 <HAL_MspInit+0x5c>)
 800181c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001820:	61d3      	str	r3, [r2, #28]
 8001822:	4b0c      	ldr	r3, [pc, #48]	; (8001854 <HAL_MspInit+0x5c>)
 8001824:	69db      	ldr	r3, [r3, #28]
 8001826:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800182a:	607b      	str	r3, [r7, #4]
 800182c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 800182e:	4b0a      	ldr	r3, [pc, #40]	; (8001858 <HAL_MspInit+0x60>)
 8001830:	685b      	ldr	r3, [r3, #4]
 8001832:	60fb      	str	r3, [r7, #12]
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800183a:	60fb      	str	r3, [r7, #12]
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001842:	60fb      	str	r3, [r7, #12]
 8001844:	4a04      	ldr	r2, [pc, #16]	; (8001858 <HAL_MspInit+0x60>)
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800184a:	bf00      	nop
 800184c:	3714      	adds	r7, #20
 800184e:	46bd      	mov	sp, r7
 8001850:	bc80      	pop	{r7}
 8001852:	4770      	bx	lr
 8001854:	40021000 	.word	0x40021000
 8001858:	40010000 	.word	0x40010000

0800185c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	b084      	sub	sp, #16
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800186c:	d113      	bne.n	8001896 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800186e:	4b0c      	ldr	r3, [pc, #48]	; (80018a0 <HAL_TIM_Base_MspInit+0x44>)
 8001870:	69db      	ldr	r3, [r3, #28]
 8001872:	4a0b      	ldr	r2, [pc, #44]	; (80018a0 <HAL_TIM_Base_MspInit+0x44>)
 8001874:	f043 0301 	orr.w	r3, r3, #1
 8001878:	61d3      	str	r3, [r2, #28]
 800187a:	4b09      	ldr	r3, [pc, #36]	; (80018a0 <HAL_TIM_Base_MspInit+0x44>)
 800187c:	69db      	ldr	r3, [r3, #28]
 800187e:	f003 0301 	and.w	r3, r3, #1
 8001882:	60fb      	str	r3, [r7, #12]
 8001884:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001886:	2200      	movs	r2, #0
 8001888:	2100      	movs	r1, #0
 800188a:	201c      	movs	r0, #28
 800188c:	f000 fa1b 	bl	8001cc6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001890:	201c      	movs	r0, #28
 8001892:	f000 fa34 	bl	8001cfe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001896:	bf00      	nop
 8001898:	3710      	adds	r7, #16
 800189a:	46bd      	mov	sp, r7
 800189c:	bd80      	pop	{r7, pc}
 800189e:	bf00      	nop
 80018a0:	40021000 	.word	0x40021000

080018a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80018a4:	b480      	push	{r7}
 80018a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80018a8:	e7fe      	b.n	80018a8 <NMI_Handler+0x4>

080018aa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80018aa:	b480      	push	{r7}
 80018ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80018ae:	e7fe      	b.n	80018ae <HardFault_Handler+0x4>

080018b0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80018b0:	b480      	push	{r7}
 80018b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80018b4:	e7fe      	b.n	80018b4 <MemManage_Handler+0x4>

080018b6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80018b6:	b480      	push	{r7}
 80018b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80018ba:	e7fe      	b.n	80018ba <BusFault_Handler+0x4>

080018bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80018bc:	b480      	push	{r7}
 80018be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80018c0:	e7fe      	b.n	80018c0 <UsageFault_Handler+0x4>

080018c2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80018c2:	b480      	push	{r7}
 80018c4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80018c6:	bf00      	nop
 80018c8:	46bd      	mov	sp, r7
 80018ca:	bc80      	pop	{r7}
 80018cc:	4770      	bx	lr

080018ce <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80018ce:	b480      	push	{r7}
 80018d0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80018d2:	bf00      	nop
 80018d4:	46bd      	mov	sp, r7
 80018d6:	bc80      	pop	{r7}
 80018d8:	4770      	bx	lr

080018da <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80018da:	b480      	push	{r7}
 80018dc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80018de:	bf00      	nop
 80018e0:	46bd      	mov	sp, r7
 80018e2:	bc80      	pop	{r7}
 80018e4:	4770      	bx	lr

080018e6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80018e6:	b580      	push	{r7, lr}
 80018e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80018ea:	f000 f8d5 	bl	8001a98 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80018ee:	bf00      	nop
 80018f0:	bd80      	pop	{r7, pc}
	...

080018f4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80018f8:	4802      	ldr	r0, [pc, #8]	; (8001904 <TIM2_IRQHandler+0x10>)
 80018fa:	f001 f855 	bl	80029a8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80018fe:	bf00      	nop
 8001900:	bd80      	pop	{r7, pc}
 8001902:	bf00      	nop
 8001904:	200000c0 	.word	0x200000c0

08001908 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001908:	b480      	push	{r7}
 800190a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800190c:	bf00      	nop
 800190e:	46bd      	mov	sp, r7
 8001910:	bc80      	pop	{r7}
 8001912:	4770      	bx	lr

08001914 <timerRun>:

void setTimer4(int duration){
	timer4_counter = duration;
	timer4_flag = 0;
}
void timerRun(){
 8001914:	b480      	push	{r7}
 8001916:	af00      	add	r7, sp, #0
	if(timer1_counter >0){
 8001918:	4b21      	ldr	r3, [pc, #132]	; (80019a0 <timerRun+0x8c>)
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	2b00      	cmp	r3, #0
 800191e:	dd0b      	ble.n	8001938 <timerRun+0x24>
		timer1_counter--;
 8001920:	4b1f      	ldr	r3, [pc, #124]	; (80019a0 <timerRun+0x8c>)
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	3b01      	subs	r3, #1
 8001926:	4a1e      	ldr	r2, [pc, #120]	; (80019a0 <timerRun+0x8c>)
 8001928:	6013      	str	r3, [r2, #0]
		if(timer1_counter<=0){
 800192a:	4b1d      	ldr	r3, [pc, #116]	; (80019a0 <timerRun+0x8c>)
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	2b00      	cmp	r3, #0
 8001930:	dc02      	bgt.n	8001938 <timerRun+0x24>
			timer1_flag=1;
 8001932:	4b1c      	ldr	r3, [pc, #112]	; (80019a4 <timerRun+0x90>)
 8001934:	2201      	movs	r2, #1
 8001936:	601a      	str	r2, [r3, #0]
		}
	}
	if(timer2_counter >0){
 8001938:	4b1b      	ldr	r3, [pc, #108]	; (80019a8 <timerRun+0x94>)
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	2b00      	cmp	r3, #0
 800193e:	dd0b      	ble.n	8001958 <timerRun+0x44>
		timer2_counter--;
 8001940:	4b19      	ldr	r3, [pc, #100]	; (80019a8 <timerRun+0x94>)
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	3b01      	subs	r3, #1
 8001946:	4a18      	ldr	r2, [pc, #96]	; (80019a8 <timerRun+0x94>)
 8001948:	6013      	str	r3, [r2, #0]
		if(timer2_counter<=0){
 800194a:	4b17      	ldr	r3, [pc, #92]	; (80019a8 <timerRun+0x94>)
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	2b00      	cmp	r3, #0
 8001950:	dc02      	bgt.n	8001958 <timerRun+0x44>
			timer2_flag=1;
 8001952:	4b16      	ldr	r3, [pc, #88]	; (80019ac <timerRun+0x98>)
 8001954:	2201      	movs	r2, #1
 8001956:	601a      	str	r2, [r3, #0]
		}
	}
	if(timer3_counter >0){
 8001958:	4b15      	ldr	r3, [pc, #84]	; (80019b0 <timerRun+0x9c>)
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	2b00      	cmp	r3, #0
 800195e:	dd0b      	ble.n	8001978 <timerRun+0x64>
		timer3_counter--;
 8001960:	4b13      	ldr	r3, [pc, #76]	; (80019b0 <timerRun+0x9c>)
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	3b01      	subs	r3, #1
 8001966:	4a12      	ldr	r2, [pc, #72]	; (80019b0 <timerRun+0x9c>)
 8001968:	6013      	str	r3, [r2, #0]
		if(timer3_counter<=0){
 800196a:	4b11      	ldr	r3, [pc, #68]	; (80019b0 <timerRun+0x9c>)
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	2b00      	cmp	r3, #0
 8001970:	dc02      	bgt.n	8001978 <timerRun+0x64>
			timer3_flag=1;
 8001972:	4b10      	ldr	r3, [pc, #64]	; (80019b4 <timerRun+0xa0>)
 8001974:	2201      	movs	r2, #1
 8001976:	601a      	str	r2, [r3, #0]
		}
	}
	if(timer4_counter >0){
 8001978:	4b0f      	ldr	r3, [pc, #60]	; (80019b8 <timerRun+0xa4>)
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	2b00      	cmp	r3, #0
 800197e:	dd0b      	ble.n	8001998 <timerRun+0x84>
		timer4_counter--;
 8001980:	4b0d      	ldr	r3, [pc, #52]	; (80019b8 <timerRun+0xa4>)
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	3b01      	subs	r3, #1
 8001986:	4a0c      	ldr	r2, [pc, #48]	; (80019b8 <timerRun+0xa4>)
 8001988:	6013      	str	r3, [r2, #0]
		if(timer4_counter<=0){
 800198a:	4b0b      	ldr	r3, [pc, #44]	; (80019b8 <timerRun+0xa4>)
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	2b00      	cmp	r3, #0
 8001990:	dc02      	bgt.n	8001998 <timerRun+0x84>
			timer4_flag=1;
 8001992:	4b0a      	ldr	r3, [pc, #40]	; (80019bc <timerRun+0xa8>)
 8001994:	2201      	movs	r2, #1
 8001996:	601a      	str	r2, [r3, #0]
		}
	}
}
 8001998:	bf00      	nop
 800199a:	46bd      	mov	sp, r7
 800199c:	bc80      	pop	{r7}
 800199e:	4770      	bx	lr
 80019a0:	2000007c 	.word	0x2000007c
 80019a4:	20000080 	.word	0x20000080
 80019a8:	20000084 	.word	0x20000084
 80019ac:	20000088 	.word	0x20000088
 80019b0:	2000008c 	.word	0x2000008c
 80019b4:	20000090 	.word	0x20000090
 80019b8:	20000094 	.word	0x20000094
 80019bc:	20000098 	.word	0x20000098

080019c0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80019c0:	f7ff ffa2 	bl	8001908 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80019c4:	480b      	ldr	r0, [pc, #44]	; (80019f4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80019c6:	490c      	ldr	r1, [pc, #48]	; (80019f8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80019c8:	4a0c      	ldr	r2, [pc, #48]	; (80019fc <LoopFillZerobss+0x16>)
  movs r3, #0
 80019ca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80019cc:	e002      	b.n	80019d4 <LoopCopyDataInit>

080019ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80019ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80019d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80019d2:	3304      	adds	r3, #4

080019d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80019d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80019d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80019d8:	d3f9      	bcc.n	80019ce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80019da:	4a09      	ldr	r2, [pc, #36]	; (8001a00 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80019dc:	4c09      	ldr	r4, [pc, #36]	; (8001a04 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80019de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80019e0:	e001      	b.n	80019e6 <LoopFillZerobss>

080019e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80019e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80019e4:	3204      	adds	r2, #4

080019e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80019e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80019e8:	d3fb      	bcc.n	80019e2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80019ea:	f001 fb29 	bl	8003040 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80019ee:	f7fe ffeb 	bl	80009c8 <main>
  bx lr
 80019f2:	4770      	bx	lr
  ldr r0, =_sdata
 80019f4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80019f8:	20000024 	.word	0x20000024
  ldr r2, =_sidata
 80019fc:	080030dc 	.word	0x080030dc
  ldr r2, =_sbss
 8001a00:	20000024 	.word	0x20000024
  ldr r4, =_ebss
 8001a04:	2000010c 	.word	0x2000010c

08001a08 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001a08:	e7fe      	b.n	8001a08 <ADC1_2_IRQHandler>
	...

08001a0c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a10:	4b08      	ldr	r3, [pc, #32]	; (8001a34 <HAL_Init+0x28>)
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	4a07      	ldr	r2, [pc, #28]	; (8001a34 <HAL_Init+0x28>)
 8001a16:	f043 0310 	orr.w	r3, r3, #16
 8001a1a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a1c:	2003      	movs	r0, #3
 8001a1e:	f000 f947 	bl	8001cb0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001a22:	200f      	movs	r0, #15
 8001a24:	f000 f808 	bl	8001a38 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001a28:	f7ff fee6 	bl	80017f8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a2c:	2300      	movs	r3, #0
}
 8001a2e:	4618      	mov	r0, r3
 8001a30:	bd80      	pop	{r7, pc}
 8001a32:	bf00      	nop
 8001a34:	40022000 	.word	0x40022000

08001a38 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b082      	sub	sp, #8
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001a40:	4b12      	ldr	r3, [pc, #72]	; (8001a8c <HAL_InitTick+0x54>)
 8001a42:	681a      	ldr	r2, [r3, #0]
 8001a44:	4b12      	ldr	r3, [pc, #72]	; (8001a90 <HAL_InitTick+0x58>)
 8001a46:	781b      	ldrb	r3, [r3, #0]
 8001a48:	4619      	mov	r1, r3
 8001a4a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a4e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a52:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a56:	4618      	mov	r0, r3
 8001a58:	f000 f95f 	bl	8001d1a <HAL_SYSTICK_Config>
 8001a5c:	4603      	mov	r3, r0
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d001      	beq.n	8001a66 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001a62:	2301      	movs	r3, #1
 8001a64:	e00e      	b.n	8001a84 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	2b0f      	cmp	r3, #15
 8001a6a:	d80a      	bhi.n	8001a82 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	6879      	ldr	r1, [r7, #4]
 8001a70:	f04f 30ff 	mov.w	r0, #4294967295
 8001a74:	f000 f927 	bl	8001cc6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001a78:	4a06      	ldr	r2, [pc, #24]	; (8001a94 <HAL_InitTick+0x5c>)
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001a7e:	2300      	movs	r3, #0
 8001a80:	e000      	b.n	8001a84 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001a82:	2301      	movs	r3, #1
}
 8001a84:	4618      	mov	r0, r3
 8001a86:	3708      	adds	r7, #8
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	bd80      	pop	{r7, pc}
 8001a8c:	20000018 	.word	0x20000018
 8001a90:	20000020 	.word	0x20000020
 8001a94:	2000001c 	.word	0x2000001c

08001a98 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a98:	b480      	push	{r7}
 8001a9a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a9c:	4b05      	ldr	r3, [pc, #20]	; (8001ab4 <HAL_IncTick+0x1c>)
 8001a9e:	781b      	ldrb	r3, [r3, #0]
 8001aa0:	461a      	mov	r2, r3
 8001aa2:	4b05      	ldr	r3, [pc, #20]	; (8001ab8 <HAL_IncTick+0x20>)
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	4413      	add	r3, r2
 8001aa8:	4a03      	ldr	r2, [pc, #12]	; (8001ab8 <HAL_IncTick+0x20>)
 8001aaa:	6013      	str	r3, [r2, #0]
}
 8001aac:	bf00      	nop
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	bc80      	pop	{r7}
 8001ab2:	4770      	bx	lr
 8001ab4:	20000020 	.word	0x20000020
 8001ab8:	20000108 	.word	0x20000108

08001abc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001abc:	b480      	push	{r7}
 8001abe:	af00      	add	r7, sp, #0
  return uwTick;
 8001ac0:	4b02      	ldr	r3, [pc, #8]	; (8001acc <HAL_GetTick+0x10>)
 8001ac2:	681b      	ldr	r3, [r3, #0]
}
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	bc80      	pop	{r7}
 8001aca:	4770      	bx	lr
 8001acc:	20000108 	.word	0x20000108

08001ad0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	b084      	sub	sp, #16
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ad8:	f7ff fff0 	bl	8001abc <HAL_GetTick>
 8001adc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ae8:	d005      	beq.n	8001af6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001aea:	4b0a      	ldr	r3, [pc, #40]	; (8001b14 <HAL_Delay+0x44>)
 8001aec:	781b      	ldrb	r3, [r3, #0]
 8001aee:	461a      	mov	r2, r3
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	4413      	add	r3, r2
 8001af4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001af6:	bf00      	nop
 8001af8:	f7ff ffe0 	bl	8001abc <HAL_GetTick>
 8001afc:	4602      	mov	r2, r0
 8001afe:	68bb      	ldr	r3, [r7, #8]
 8001b00:	1ad3      	subs	r3, r2, r3
 8001b02:	68fa      	ldr	r2, [r7, #12]
 8001b04:	429a      	cmp	r2, r3
 8001b06:	d8f7      	bhi.n	8001af8 <HAL_Delay+0x28>
  {
  }
}
 8001b08:	bf00      	nop
 8001b0a:	bf00      	nop
 8001b0c:	3710      	adds	r7, #16
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	bd80      	pop	{r7, pc}
 8001b12:	bf00      	nop
 8001b14:	20000020 	.word	0x20000020

08001b18 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b18:	b480      	push	{r7}
 8001b1a:	b085      	sub	sp, #20
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	f003 0307 	and.w	r3, r3, #7
 8001b26:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b28:	4b0c      	ldr	r3, [pc, #48]	; (8001b5c <__NVIC_SetPriorityGrouping+0x44>)
 8001b2a:	68db      	ldr	r3, [r3, #12]
 8001b2c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b2e:	68ba      	ldr	r2, [r7, #8]
 8001b30:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001b34:	4013      	ands	r3, r2
 8001b36:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b3c:	68bb      	ldr	r3, [r7, #8]
 8001b3e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b40:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001b44:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b48:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b4a:	4a04      	ldr	r2, [pc, #16]	; (8001b5c <__NVIC_SetPriorityGrouping+0x44>)
 8001b4c:	68bb      	ldr	r3, [r7, #8]
 8001b4e:	60d3      	str	r3, [r2, #12]
}
 8001b50:	bf00      	nop
 8001b52:	3714      	adds	r7, #20
 8001b54:	46bd      	mov	sp, r7
 8001b56:	bc80      	pop	{r7}
 8001b58:	4770      	bx	lr
 8001b5a:	bf00      	nop
 8001b5c:	e000ed00 	.word	0xe000ed00

08001b60 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b60:	b480      	push	{r7}
 8001b62:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b64:	4b04      	ldr	r3, [pc, #16]	; (8001b78 <__NVIC_GetPriorityGrouping+0x18>)
 8001b66:	68db      	ldr	r3, [r3, #12]
 8001b68:	0a1b      	lsrs	r3, r3, #8
 8001b6a:	f003 0307 	and.w	r3, r3, #7
}
 8001b6e:	4618      	mov	r0, r3
 8001b70:	46bd      	mov	sp, r7
 8001b72:	bc80      	pop	{r7}
 8001b74:	4770      	bx	lr
 8001b76:	bf00      	nop
 8001b78:	e000ed00 	.word	0xe000ed00

08001b7c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b7c:	b480      	push	{r7}
 8001b7e:	b083      	sub	sp, #12
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	4603      	mov	r3, r0
 8001b84:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	db0b      	blt.n	8001ba6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b8e:	79fb      	ldrb	r3, [r7, #7]
 8001b90:	f003 021f 	and.w	r2, r3, #31
 8001b94:	4906      	ldr	r1, [pc, #24]	; (8001bb0 <__NVIC_EnableIRQ+0x34>)
 8001b96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b9a:	095b      	lsrs	r3, r3, #5
 8001b9c:	2001      	movs	r0, #1
 8001b9e:	fa00 f202 	lsl.w	r2, r0, r2
 8001ba2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001ba6:	bf00      	nop
 8001ba8:	370c      	adds	r7, #12
 8001baa:	46bd      	mov	sp, r7
 8001bac:	bc80      	pop	{r7}
 8001bae:	4770      	bx	lr
 8001bb0:	e000e100 	.word	0xe000e100

08001bb4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001bb4:	b480      	push	{r7}
 8001bb6:	b083      	sub	sp, #12
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	4603      	mov	r3, r0
 8001bbc:	6039      	str	r1, [r7, #0]
 8001bbe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bc0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	db0a      	blt.n	8001bde <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bc8:	683b      	ldr	r3, [r7, #0]
 8001bca:	b2da      	uxtb	r2, r3
 8001bcc:	490c      	ldr	r1, [pc, #48]	; (8001c00 <__NVIC_SetPriority+0x4c>)
 8001bce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bd2:	0112      	lsls	r2, r2, #4
 8001bd4:	b2d2      	uxtb	r2, r2
 8001bd6:	440b      	add	r3, r1
 8001bd8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001bdc:	e00a      	b.n	8001bf4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bde:	683b      	ldr	r3, [r7, #0]
 8001be0:	b2da      	uxtb	r2, r3
 8001be2:	4908      	ldr	r1, [pc, #32]	; (8001c04 <__NVIC_SetPriority+0x50>)
 8001be4:	79fb      	ldrb	r3, [r7, #7]
 8001be6:	f003 030f 	and.w	r3, r3, #15
 8001bea:	3b04      	subs	r3, #4
 8001bec:	0112      	lsls	r2, r2, #4
 8001bee:	b2d2      	uxtb	r2, r2
 8001bf0:	440b      	add	r3, r1
 8001bf2:	761a      	strb	r2, [r3, #24]
}
 8001bf4:	bf00      	nop
 8001bf6:	370c      	adds	r7, #12
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	bc80      	pop	{r7}
 8001bfc:	4770      	bx	lr
 8001bfe:	bf00      	nop
 8001c00:	e000e100 	.word	0xe000e100
 8001c04:	e000ed00 	.word	0xe000ed00

08001c08 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c08:	b480      	push	{r7}
 8001c0a:	b089      	sub	sp, #36	; 0x24
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	60f8      	str	r0, [r7, #12]
 8001c10:	60b9      	str	r1, [r7, #8]
 8001c12:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	f003 0307 	and.w	r3, r3, #7
 8001c1a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c1c:	69fb      	ldr	r3, [r7, #28]
 8001c1e:	f1c3 0307 	rsb	r3, r3, #7
 8001c22:	2b04      	cmp	r3, #4
 8001c24:	bf28      	it	cs
 8001c26:	2304      	movcs	r3, #4
 8001c28:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c2a:	69fb      	ldr	r3, [r7, #28]
 8001c2c:	3304      	adds	r3, #4
 8001c2e:	2b06      	cmp	r3, #6
 8001c30:	d902      	bls.n	8001c38 <NVIC_EncodePriority+0x30>
 8001c32:	69fb      	ldr	r3, [r7, #28]
 8001c34:	3b03      	subs	r3, #3
 8001c36:	e000      	b.n	8001c3a <NVIC_EncodePriority+0x32>
 8001c38:	2300      	movs	r3, #0
 8001c3a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c3c:	f04f 32ff 	mov.w	r2, #4294967295
 8001c40:	69bb      	ldr	r3, [r7, #24]
 8001c42:	fa02 f303 	lsl.w	r3, r2, r3
 8001c46:	43da      	mvns	r2, r3
 8001c48:	68bb      	ldr	r3, [r7, #8]
 8001c4a:	401a      	ands	r2, r3
 8001c4c:	697b      	ldr	r3, [r7, #20]
 8001c4e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c50:	f04f 31ff 	mov.w	r1, #4294967295
 8001c54:	697b      	ldr	r3, [r7, #20]
 8001c56:	fa01 f303 	lsl.w	r3, r1, r3
 8001c5a:	43d9      	mvns	r1, r3
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c60:	4313      	orrs	r3, r2
         );
}
 8001c62:	4618      	mov	r0, r3
 8001c64:	3724      	adds	r7, #36	; 0x24
 8001c66:	46bd      	mov	sp, r7
 8001c68:	bc80      	pop	{r7}
 8001c6a:	4770      	bx	lr

08001c6c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b082      	sub	sp, #8
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	3b01      	subs	r3, #1
 8001c78:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001c7c:	d301      	bcc.n	8001c82 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c7e:	2301      	movs	r3, #1
 8001c80:	e00f      	b.n	8001ca2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c82:	4a0a      	ldr	r2, [pc, #40]	; (8001cac <SysTick_Config+0x40>)
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	3b01      	subs	r3, #1
 8001c88:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c8a:	210f      	movs	r1, #15
 8001c8c:	f04f 30ff 	mov.w	r0, #4294967295
 8001c90:	f7ff ff90 	bl	8001bb4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c94:	4b05      	ldr	r3, [pc, #20]	; (8001cac <SysTick_Config+0x40>)
 8001c96:	2200      	movs	r2, #0
 8001c98:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c9a:	4b04      	ldr	r3, [pc, #16]	; (8001cac <SysTick_Config+0x40>)
 8001c9c:	2207      	movs	r2, #7
 8001c9e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ca0:	2300      	movs	r3, #0
}
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	3708      	adds	r7, #8
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	bd80      	pop	{r7, pc}
 8001caa:	bf00      	nop
 8001cac:	e000e010 	.word	0xe000e010

08001cb0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	b082      	sub	sp, #8
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001cb8:	6878      	ldr	r0, [r7, #4]
 8001cba:	f7ff ff2d 	bl	8001b18 <__NVIC_SetPriorityGrouping>
}
 8001cbe:	bf00      	nop
 8001cc0:	3708      	adds	r7, #8
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	bd80      	pop	{r7, pc}

08001cc6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001cc6:	b580      	push	{r7, lr}
 8001cc8:	b086      	sub	sp, #24
 8001cca:	af00      	add	r7, sp, #0
 8001ccc:	4603      	mov	r3, r0
 8001cce:	60b9      	str	r1, [r7, #8]
 8001cd0:	607a      	str	r2, [r7, #4]
 8001cd2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001cd8:	f7ff ff42 	bl	8001b60 <__NVIC_GetPriorityGrouping>
 8001cdc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001cde:	687a      	ldr	r2, [r7, #4]
 8001ce0:	68b9      	ldr	r1, [r7, #8]
 8001ce2:	6978      	ldr	r0, [r7, #20]
 8001ce4:	f7ff ff90 	bl	8001c08 <NVIC_EncodePriority>
 8001ce8:	4602      	mov	r2, r0
 8001cea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001cee:	4611      	mov	r1, r2
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	f7ff ff5f 	bl	8001bb4 <__NVIC_SetPriority>
}
 8001cf6:	bf00      	nop
 8001cf8:	3718      	adds	r7, #24
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	bd80      	pop	{r7, pc}

08001cfe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001cfe:	b580      	push	{r7, lr}
 8001d00:	b082      	sub	sp, #8
 8001d02:	af00      	add	r7, sp, #0
 8001d04:	4603      	mov	r3, r0
 8001d06:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	f7ff ff35 	bl	8001b7c <__NVIC_EnableIRQ>
}
 8001d12:	bf00      	nop
 8001d14:	3708      	adds	r7, #8
 8001d16:	46bd      	mov	sp, r7
 8001d18:	bd80      	pop	{r7, pc}

08001d1a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d1a:	b580      	push	{r7, lr}
 8001d1c:	b082      	sub	sp, #8
 8001d1e:	af00      	add	r7, sp, #0
 8001d20:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d22:	6878      	ldr	r0, [r7, #4]
 8001d24:	f7ff ffa2 	bl	8001c6c <SysTick_Config>
 8001d28:	4603      	mov	r3, r0
}
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	3708      	adds	r7, #8
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	bd80      	pop	{r7, pc}
	...

08001d34 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d34:	b480      	push	{r7}
 8001d36:	b08b      	sub	sp, #44	; 0x2c
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
 8001d3c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001d3e:	2300      	movs	r3, #0
 8001d40:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001d42:	2300      	movs	r3, #0
 8001d44:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d46:	e148      	b.n	8001fda <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001d48:	2201      	movs	r2, #1
 8001d4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d50:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001d52:	683b      	ldr	r3, [r7, #0]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	69fa      	ldr	r2, [r7, #28]
 8001d58:	4013      	ands	r3, r2
 8001d5a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001d5c:	69ba      	ldr	r2, [r7, #24]
 8001d5e:	69fb      	ldr	r3, [r7, #28]
 8001d60:	429a      	cmp	r2, r3
 8001d62:	f040 8137 	bne.w	8001fd4 <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001d66:	683b      	ldr	r3, [r7, #0]
 8001d68:	685b      	ldr	r3, [r3, #4]
 8001d6a:	4aa3      	ldr	r2, [pc, #652]	; (8001ff8 <HAL_GPIO_Init+0x2c4>)
 8001d6c:	4293      	cmp	r3, r2
 8001d6e:	d05e      	beq.n	8001e2e <HAL_GPIO_Init+0xfa>
 8001d70:	4aa1      	ldr	r2, [pc, #644]	; (8001ff8 <HAL_GPIO_Init+0x2c4>)
 8001d72:	4293      	cmp	r3, r2
 8001d74:	d875      	bhi.n	8001e62 <HAL_GPIO_Init+0x12e>
 8001d76:	4aa1      	ldr	r2, [pc, #644]	; (8001ffc <HAL_GPIO_Init+0x2c8>)
 8001d78:	4293      	cmp	r3, r2
 8001d7a:	d058      	beq.n	8001e2e <HAL_GPIO_Init+0xfa>
 8001d7c:	4a9f      	ldr	r2, [pc, #636]	; (8001ffc <HAL_GPIO_Init+0x2c8>)
 8001d7e:	4293      	cmp	r3, r2
 8001d80:	d86f      	bhi.n	8001e62 <HAL_GPIO_Init+0x12e>
 8001d82:	4a9f      	ldr	r2, [pc, #636]	; (8002000 <HAL_GPIO_Init+0x2cc>)
 8001d84:	4293      	cmp	r3, r2
 8001d86:	d052      	beq.n	8001e2e <HAL_GPIO_Init+0xfa>
 8001d88:	4a9d      	ldr	r2, [pc, #628]	; (8002000 <HAL_GPIO_Init+0x2cc>)
 8001d8a:	4293      	cmp	r3, r2
 8001d8c:	d869      	bhi.n	8001e62 <HAL_GPIO_Init+0x12e>
 8001d8e:	4a9d      	ldr	r2, [pc, #628]	; (8002004 <HAL_GPIO_Init+0x2d0>)
 8001d90:	4293      	cmp	r3, r2
 8001d92:	d04c      	beq.n	8001e2e <HAL_GPIO_Init+0xfa>
 8001d94:	4a9b      	ldr	r2, [pc, #620]	; (8002004 <HAL_GPIO_Init+0x2d0>)
 8001d96:	4293      	cmp	r3, r2
 8001d98:	d863      	bhi.n	8001e62 <HAL_GPIO_Init+0x12e>
 8001d9a:	4a9b      	ldr	r2, [pc, #620]	; (8002008 <HAL_GPIO_Init+0x2d4>)
 8001d9c:	4293      	cmp	r3, r2
 8001d9e:	d046      	beq.n	8001e2e <HAL_GPIO_Init+0xfa>
 8001da0:	4a99      	ldr	r2, [pc, #612]	; (8002008 <HAL_GPIO_Init+0x2d4>)
 8001da2:	4293      	cmp	r3, r2
 8001da4:	d85d      	bhi.n	8001e62 <HAL_GPIO_Init+0x12e>
 8001da6:	2b12      	cmp	r3, #18
 8001da8:	d82a      	bhi.n	8001e00 <HAL_GPIO_Init+0xcc>
 8001daa:	2b12      	cmp	r3, #18
 8001dac:	d859      	bhi.n	8001e62 <HAL_GPIO_Init+0x12e>
 8001dae:	a201      	add	r2, pc, #4	; (adr r2, 8001db4 <HAL_GPIO_Init+0x80>)
 8001db0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001db4:	08001e2f 	.word	0x08001e2f
 8001db8:	08001e09 	.word	0x08001e09
 8001dbc:	08001e1b 	.word	0x08001e1b
 8001dc0:	08001e5d 	.word	0x08001e5d
 8001dc4:	08001e63 	.word	0x08001e63
 8001dc8:	08001e63 	.word	0x08001e63
 8001dcc:	08001e63 	.word	0x08001e63
 8001dd0:	08001e63 	.word	0x08001e63
 8001dd4:	08001e63 	.word	0x08001e63
 8001dd8:	08001e63 	.word	0x08001e63
 8001ddc:	08001e63 	.word	0x08001e63
 8001de0:	08001e63 	.word	0x08001e63
 8001de4:	08001e63 	.word	0x08001e63
 8001de8:	08001e63 	.word	0x08001e63
 8001dec:	08001e63 	.word	0x08001e63
 8001df0:	08001e63 	.word	0x08001e63
 8001df4:	08001e63 	.word	0x08001e63
 8001df8:	08001e11 	.word	0x08001e11
 8001dfc:	08001e25 	.word	0x08001e25
 8001e00:	4a82      	ldr	r2, [pc, #520]	; (800200c <HAL_GPIO_Init+0x2d8>)
 8001e02:	4293      	cmp	r3, r2
 8001e04:	d013      	beq.n	8001e2e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001e06:	e02c      	b.n	8001e62 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001e08:	683b      	ldr	r3, [r7, #0]
 8001e0a:	68db      	ldr	r3, [r3, #12]
 8001e0c:	623b      	str	r3, [r7, #32]
          break;
 8001e0e:	e029      	b.n	8001e64 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001e10:	683b      	ldr	r3, [r7, #0]
 8001e12:	68db      	ldr	r3, [r3, #12]
 8001e14:	3304      	adds	r3, #4
 8001e16:	623b      	str	r3, [r7, #32]
          break;
 8001e18:	e024      	b.n	8001e64 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001e1a:	683b      	ldr	r3, [r7, #0]
 8001e1c:	68db      	ldr	r3, [r3, #12]
 8001e1e:	3308      	adds	r3, #8
 8001e20:	623b      	str	r3, [r7, #32]
          break;
 8001e22:	e01f      	b.n	8001e64 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001e24:	683b      	ldr	r3, [r7, #0]
 8001e26:	68db      	ldr	r3, [r3, #12]
 8001e28:	330c      	adds	r3, #12
 8001e2a:	623b      	str	r3, [r7, #32]
          break;
 8001e2c:	e01a      	b.n	8001e64 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001e2e:	683b      	ldr	r3, [r7, #0]
 8001e30:	689b      	ldr	r3, [r3, #8]
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d102      	bne.n	8001e3c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001e36:	2304      	movs	r3, #4
 8001e38:	623b      	str	r3, [r7, #32]
          break;
 8001e3a:	e013      	b.n	8001e64 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001e3c:	683b      	ldr	r3, [r7, #0]
 8001e3e:	689b      	ldr	r3, [r3, #8]
 8001e40:	2b01      	cmp	r3, #1
 8001e42:	d105      	bne.n	8001e50 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001e44:	2308      	movs	r3, #8
 8001e46:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	69fa      	ldr	r2, [r7, #28]
 8001e4c:	611a      	str	r2, [r3, #16]
          break;
 8001e4e:	e009      	b.n	8001e64 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001e50:	2308      	movs	r3, #8
 8001e52:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	69fa      	ldr	r2, [r7, #28]
 8001e58:	615a      	str	r2, [r3, #20]
          break;
 8001e5a:	e003      	b.n	8001e64 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001e5c:	2300      	movs	r3, #0
 8001e5e:	623b      	str	r3, [r7, #32]
          break;
 8001e60:	e000      	b.n	8001e64 <HAL_GPIO_Init+0x130>
          break;
 8001e62:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001e64:	69bb      	ldr	r3, [r7, #24]
 8001e66:	2bff      	cmp	r3, #255	; 0xff
 8001e68:	d801      	bhi.n	8001e6e <HAL_GPIO_Init+0x13a>
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	e001      	b.n	8001e72 <HAL_GPIO_Init+0x13e>
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	3304      	adds	r3, #4
 8001e72:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001e74:	69bb      	ldr	r3, [r7, #24]
 8001e76:	2bff      	cmp	r3, #255	; 0xff
 8001e78:	d802      	bhi.n	8001e80 <HAL_GPIO_Init+0x14c>
 8001e7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e7c:	009b      	lsls	r3, r3, #2
 8001e7e:	e002      	b.n	8001e86 <HAL_GPIO_Init+0x152>
 8001e80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e82:	3b08      	subs	r3, #8
 8001e84:	009b      	lsls	r3, r3, #2
 8001e86:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001e88:	697b      	ldr	r3, [r7, #20]
 8001e8a:	681a      	ldr	r2, [r3, #0]
 8001e8c:	210f      	movs	r1, #15
 8001e8e:	693b      	ldr	r3, [r7, #16]
 8001e90:	fa01 f303 	lsl.w	r3, r1, r3
 8001e94:	43db      	mvns	r3, r3
 8001e96:	401a      	ands	r2, r3
 8001e98:	6a39      	ldr	r1, [r7, #32]
 8001e9a:	693b      	ldr	r3, [r7, #16]
 8001e9c:	fa01 f303 	lsl.w	r3, r1, r3
 8001ea0:	431a      	orrs	r2, r3
 8001ea2:	697b      	ldr	r3, [r7, #20]
 8001ea4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001ea6:	683b      	ldr	r3, [r7, #0]
 8001ea8:	685b      	ldr	r3, [r3, #4]
 8001eaa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	f000 8090 	beq.w	8001fd4 <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001eb4:	4b56      	ldr	r3, [pc, #344]	; (8002010 <HAL_GPIO_Init+0x2dc>)
 8001eb6:	699b      	ldr	r3, [r3, #24]
 8001eb8:	4a55      	ldr	r2, [pc, #340]	; (8002010 <HAL_GPIO_Init+0x2dc>)
 8001eba:	f043 0301 	orr.w	r3, r3, #1
 8001ebe:	6193      	str	r3, [r2, #24]
 8001ec0:	4b53      	ldr	r3, [pc, #332]	; (8002010 <HAL_GPIO_Init+0x2dc>)
 8001ec2:	699b      	ldr	r3, [r3, #24]
 8001ec4:	f003 0301 	and.w	r3, r3, #1
 8001ec8:	60bb      	str	r3, [r7, #8]
 8001eca:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001ecc:	4a51      	ldr	r2, [pc, #324]	; (8002014 <HAL_GPIO_Init+0x2e0>)
 8001ece:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ed0:	089b      	lsrs	r3, r3, #2
 8001ed2:	3302      	adds	r3, #2
 8001ed4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ed8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001eda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001edc:	f003 0303 	and.w	r3, r3, #3
 8001ee0:	009b      	lsls	r3, r3, #2
 8001ee2:	220f      	movs	r2, #15
 8001ee4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ee8:	43db      	mvns	r3, r3
 8001eea:	68fa      	ldr	r2, [r7, #12]
 8001eec:	4013      	ands	r3, r2
 8001eee:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	4a49      	ldr	r2, [pc, #292]	; (8002018 <HAL_GPIO_Init+0x2e4>)
 8001ef4:	4293      	cmp	r3, r2
 8001ef6:	d00d      	beq.n	8001f14 <HAL_GPIO_Init+0x1e0>
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	4a48      	ldr	r2, [pc, #288]	; (800201c <HAL_GPIO_Init+0x2e8>)
 8001efc:	4293      	cmp	r3, r2
 8001efe:	d007      	beq.n	8001f10 <HAL_GPIO_Init+0x1dc>
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	4a47      	ldr	r2, [pc, #284]	; (8002020 <HAL_GPIO_Init+0x2ec>)
 8001f04:	4293      	cmp	r3, r2
 8001f06:	d101      	bne.n	8001f0c <HAL_GPIO_Init+0x1d8>
 8001f08:	2302      	movs	r3, #2
 8001f0a:	e004      	b.n	8001f16 <HAL_GPIO_Init+0x1e2>
 8001f0c:	2303      	movs	r3, #3
 8001f0e:	e002      	b.n	8001f16 <HAL_GPIO_Init+0x1e2>
 8001f10:	2301      	movs	r3, #1
 8001f12:	e000      	b.n	8001f16 <HAL_GPIO_Init+0x1e2>
 8001f14:	2300      	movs	r3, #0
 8001f16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f18:	f002 0203 	and.w	r2, r2, #3
 8001f1c:	0092      	lsls	r2, r2, #2
 8001f1e:	4093      	lsls	r3, r2
 8001f20:	68fa      	ldr	r2, [r7, #12]
 8001f22:	4313      	orrs	r3, r2
 8001f24:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001f26:	493b      	ldr	r1, [pc, #236]	; (8002014 <HAL_GPIO_Init+0x2e0>)
 8001f28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f2a:	089b      	lsrs	r3, r3, #2
 8001f2c:	3302      	adds	r3, #2
 8001f2e:	68fa      	ldr	r2, [r7, #12]
 8001f30:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001f34:	683b      	ldr	r3, [r7, #0]
 8001f36:	685b      	ldr	r3, [r3, #4]
 8001f38:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d006      	beq.n	8001f4e <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001f40:	4b38      	ldr	r3, [pc, #224]	; (8002024 <HAL_GPIO_Init+0x2f0>)
 8001f42:	689a      	ldr	r2, [r3, #8]
 8001f44:	4937      	ldr	r1, [pc, #220]	; (8002024 <HAL_GPIO_Init+0x2f0>)
 8001f46:	69bb      	ldr	r3, [r7, #24]
 8001f48:	4313      	orrs	r3, r2
 8001f4a:	608b      	str	r3, [r1, #8]
 8001f4c:	e006      	b.n	8001f5c <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001f4e:	4b35      	ldr	r3, [pc, #212]	; (8002024 <HAL_GPIO_Init+0x2f0>)
 8001f50:	689a      	ldr	r2, [r3, #8]
 8001f52:	69bb      	ldr	r3, [r7, #24]
 8001f54:	43db      	mvns	r3, r3
 8001f56:	4933      	ldr	r1, [pc, #204]	; (8002024 <HAL_GPIO_Init+0x2f0>)
 8001f58:	4013      	ands	r3, r2
 8001f5a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001f5c:	683b      	ldr	r3, [r7, #0]
 8001f5e:	685b      	ldr	r3, [r3, #4]
 8001f60:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d006      	beq.n	8001f76 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001f68:	4b2e      	ldr	r3, [pc, #184]	; (8002024 <HAL_GPIO_Init+0x2f0>)
 8001f6a:	68da      	ldr	r2, [r3, #12]
 8001f6c:	492d      	ldr	r1, [pc, #180]	; (8002024 <HAL_GPIO_Init+0x2f0>)
 8001f6e:	69bb      	ldr	r3, [r7, #24]
 8001f70:	4313      	orrs	r3, r2
 8001f72:	60cb      	str	r3, [r1, #12]
 8001f74:	e006      	b.n	8001f84 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001f76:	4b2b      	ldr	r3, [pc, #172]	; (8002024 <HAL_GPIO_Init+0x2f0>)
 8001f78:	68da      	ldr	r2, [r3, #12]
 8001f7a:	69bb      	ldr	r3, [r7, #24]
 8001f7c:	43db      	mvns	r3, r3
 8001f7e:	4929      	ldr	r1, [pc, #164]	; (8002024 <HAL_GPIO_Init+0x2f0>)
 8001f80:	4013      	ands	r3, r2
 8001f82:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001f84:	683b      	ldr	r3, [r7, #0]
 8001f86:	685b      	ldr	r3, [r3, #4]
 8001f88:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d006      	beq.n	8001f9e <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001f90:	4b24      	ldr	r3, [pc, #144]	; (8002024 <HAL_GPIO_Init+0x2f0>)
 8001f92:	685a      	ldr	r2, [r3, #4]
 8001f94:	4923      	ldr	r1, [pc, #140]	; (8002024 <HAL_GPIO_Init+0x2f0>)
 8001f96:	69bb      	ldr	r3, [r7, #24]
 8001f98:	4313      	orrs	r3, r2
 8001f9a:	604b      	str	r3, [r1, #4]
 8001f9c:	e006      	b.n	8001fac <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001f9e:	4b21      	ldr	r3, [pc, #132]	; (8002024 <HAL_GPIO_Init+0x2f0>)
 8001fa0:	685a      	ldr	r2, [r3, #4]
 8001fa2:	69bb      	ldr	r3, [r7, #24]
 8001fa4:	43db      	mvns	r3, r3
 8001fa6:	491f      	ldr	r1, [pc, #124]	; (8002024 <HAL_GPIO_Init+0x2f0>)
 8001fa8:	4013      	ands	r3, r2
 8001faa:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001fac:	683b      	ldr	r3, [r7, #0]
 8001fae:	685b      	ldr	r3, [r3, #4]
 8001fb0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d006      	beq.n	8001fc6 <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001fb8:	4b1a      	ldr	r3, [pc, #104]	; (8002024 <HAL_GPIO_Init+0x2f0>)
 8001fba:	681a      	ldr	r2, [r3, #0]
 8001fbc:	4919      	ldr	r1, [pc, #100]	; (8002024 <HAL_GPIO_Init+0x2f0>)
 8001fbe:	69bb      	ldr	r3, [r7, #24]
 8001fc0:	4313      	orrs	r3, r2
 8001fc2:	600b      	str	r3, [r1, #0]
 8001fc4:	e006      	b.n	8001fd4 <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001fc6:	4b17      	ldr	r3, [pc, #92]	; (8002024 <HAL_GPIO_Init+0x2f0>)
 8001fc8:	681a      	ldr	r2, [r3, #0]
 8001fca:	69bb      	ldr	r3, [r7, #24]
 8001fcc:	43db      	mvns	r3, r3
 8001fce:	4915      	ldr	r1, [pc, #84]	; (8002024 <HAL_GPIO_Init+0x2f0>)
 8001fd0:	4013      	ands	r3, r2
 8001fd2:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001fd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fd6:	3301      	adds	r3, #1
 8001fd8:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001fda:	683b      	ldr	r3, [r7, #0]
 8001fdc:	681a      	ldr	r2, [r3, #0]
 8001fde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fe0:	fa22 f303 	lsr.w	r3, r2, r3
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	f47f aeaf 	bne.w	8001d48 <HAL_GPIO_Init+0x14>
  }
}
 8001fea:	bf00      	nop
 8001fec:	bf00      	nop
 8001fee:	372c      	adds	r7, #44	; 0x2c
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	bc80      	pop	{r7}
 8001ff4:	4770      	bx	lr
 8001ff6:	bf00      	nop
 8001ff8:	10320000 	.word	0x10320000
 8001ffc:	10310000 	.word	0x10310000
 8002000:	10220000 	.word	0x10220000
 8002004:	10210000 	.word	0x10210000
 8002008:	10120000 	.word	0x10120000
 800200c:	10110000 	.word	0x10110000
 8002010:	40021000 	.word	0x40021000
 8002014:	40010000 	.word	0x40010000
 8002018:	40010800 	.word	0x40010800
 800201c:	40010c00 	.word	0x40010c00
 8002020:	40011000 	.word	0x40011000
 8002024:	40010400 	.word	0x40010400

08002028 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002028:	b480      	push	{r7}
 800202a:	b085      	sub	sp, #20
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
 8002030:	460b      	mov	r3, r1
 8002032:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	689a      	ldr	r2, [r3, #8]
 8002038:	887b      	ldrh	r3, [r7, #2]
 800203a:	4013      	ands	r3, r2
 800203c:	2b00      	cmp	r3, #0
 800203e:	d002      	beq.n	8002046 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002040:	2301      	movs	r3, #1
 8002042:	73fb      	strb	r3, [r7, #15]
 8002044:	e001      	b.n	800204a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002046:	2300      	movs	r3, #0
 8002048:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800204a:	7bfb      	ldrb	r3, [r7, #15]
}
 800204c:	4618      	mov	r0, r3
 800204e:	3714      	adds	r7, #20
 8002050:	46bd      	mov	sp, r7
 8002052:	bc80      	pop	{r7}
 8002054:	4770      	bx	lr

08002056 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002056:	b480      	push	{r7}
 8002058:	b083      	sub	sp, #12
 800205a:	af00      	add	r7, sp, #0
 800205c:	6078      	str	r0, [r7, #4]
 800205e:	460b      	mov	r3, r1
 8002060:	807b      	strh	r3, [r7, #2]
 8002062:	4613      	mov	r3, r2
 8002064:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002066:	787b      	ldrb	r3, [r7, #1]
 8002068:	2b00      	cmp	r3, #0
 800206a:	d003      	beq.n	8002074 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800206c:	887a      	ldrh	r2, [r7, #2]
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002072:	e003      	b.n	800207c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002074:	887b      	ldrh	r3, [r7, #2]
 8002076:	041a      	lsls	r2, r3, #16
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	611a      	str	r2, [r3, #16]
}
 800207c:	bf00      	nop
 800207e:	370c      	adds	r7, #12
 8002080:	46bd      	mov	sp, r7
 8002082:	bc80      	pop	{r7}
 8002084:	4770      	bx	lr

08002086 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002086:	b480      	push	{r7}
 8002088:	b085      	sub	sp, #20
 800208a:	af00      	add	r7, sp, #0
 800208c:	6078      	str	r0, [r7, #4]
 800208e:	460b      	mov	r3, r1
 8002090:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	68db      	ldr	r3, [r3, #12]
 8002096:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002098:	887a      	ldrh	r2, [r7, #2]
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	4013      	ands	r3, r2
 800209e:	041a      	lsls	r2, r3, #16
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	43d9      	mvns	r1, r3
 80020a4:	887b      	ldrh	r3, [r7, #2]
 80020a6:	400b      	ands	r3, r1
 80020a8:	431a      	orrs	r2, r3
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	611a      	str	r2, [r3, #16]
}
 80020ae:	bf00      	nop
 80020b0:	3714      	adds	r7, #20
 80020b2:	46bd      	mov	sp, r7
 80020b4:	bc80      	pop	{r7}
 80020b6:	4770      	bx	lr

080020b8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	b086      	sub	sp, #24
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d101      	bne.n	80020ca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80020c6:	2301      	movs	r3, #1
 80020c8:	e26c      	b.n	80025a4 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f003 0301 	and.w	r3, r3, #1
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	f000 8087 	beq.w	80021e6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80020d8:	4b92      	ldr	r3, [pc, #584]	; (8002324 <HAL_RCC_OscConfig+0x26c>)
 80020da:	685b      	ldr	r3, [r3, #4]
 80020dc:	f003 030c 	and.w	r3, r3, #12
 80020e0:	2b04      	cmp	r3, #4
 80020e2:	d00c      	beq.n	80020fe <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80020e4:	4b8f      	ldr	r3, [pc, #572]	; (8002324 <HAL_RCC_OscConfig+0x26c>)
 80020e6:	685b      	ldr	r3, [r3, #4]
 80020e8:	f003 030c 	and.w	r3, r3, #12
 80020ec:	2b08      	cmp	r3, #8
 80020ee:	d112      	bne.n	8002116 <HAL_RCC_OscConfig+0x5e>
 80020f0:	4b8c      	ldr	r3, [pc, #560]	; (8002324 <HAL_RCC_OscConfig+0x26c>)
 80020f2:	685b      	ldr	r3, [r3, #4]
 80020f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80020fc:	d10b      	bne.n	8002116 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020fe:	4b89      	ldr	r3, [pc, #548]	; (8002324 <HAL_RCC_OscConfig+0x26c>)
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002106:	2b00      	cmp	r3, #0
 8002108:	d06c      	beq.n	80021e4 <HAL_RCC_OscConfig+0x12c>
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	685b      	ldr	r3, [r3, #4]
 800210e:	2b00      	cmp	r3, #0
 8002110:	d168      	bne.n	80021e4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002112:	2301      	movs	r3, #1
 8002114:	e246      	b.n	80025a4 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	685b      	ldr	r3, [r3, #4]
 800211a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800211e:	d106      	bne.n	800212e <HAL_RCC_OscConfig+0x76>
 8002120:	4b80      	ldr	r3, [pc, #512]	; (8002324 <HAL_RCC_OscConfig+0x26c>)
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	4a7f      	ldr	r2, [pc, #508]	; (8002324 <HAL_RCC_OscConfig+0x26c>)
 8002126:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800212a:	6013      	str	r3, [r2, #0]
 800212c:	e02e      	b.n	800218c <HAL_RCC_OscConfig+0xd4>
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	685b      	ldr	r3, [r3, #4]
 8002132:	2b00      	cmp	r3, #0
 8002134:	d10c      	bne.n	8002150 <HAL_RCC_OscConfig+0x98>
 8002136:	4b7b      	ldr	r3, [pc, #492]	; (8002324 <HAL_RCC_OscConfig+0x26c>)
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	4a7a      	ldr	r2, [pc, #488]	; (8002324 <HAL_RCC_OscConfig+0x26c>)
 800213c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002140:	6013      	str	r3, [r2, #0]
 8002142:	4b78      	ldr	r3, [pc, #480]	; (8002324 <HAL_RCC_OscConfig+0x26c>)
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	4a77      	ldr	r2, [pc, #476]	; (8002324 <HAL_RCC_OscConfig+0x26c>)
 8002148:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800214c:	6013      	str	r3, [r2, #0]
 800214e:	e01d      	b.n	800218c <HAL_RCC_OscConfig+0xd4>
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	685b      	ldr	r3, [r3, #4]
 8002154:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002158:	d10c      	bne.n	8002174 <HAL_RCC_OscConfig+0xbc>
 800215a:	4b72      	ldr	r3, [pc, #456]	; (8002324 <HAL_RCC_OscConfig+0x26c>)
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	4a71      	ldr	r2, [pc, #452]	; (8002324 <HAL_RCC_OscConfig+0x26c>)
 8002160:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002164:	6013      	str	r3, [r2, #0]
 8002166:	4b6f      	ldr	r3, [pc, #444]	; (8002324 <HAL_RCC_OscConfig+0x26c>)
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	4a6e      	ldr	r2, [pc, #440]	; (8002324 <HAL_RCC_OscConfig+0x26c>)
 800216c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002170:	6013      	str	r3, [r2, #0]
 8002172:	e00b      	b.n	800218c <HAL_RCC_OscConfig+0xd4>
 8002174:	4b6b      	ldr	r3, [pc, #428]	; (8002324 <HAL_RCC_OscConfig+0x26c>)
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	4a6a      	ldr	r2, [pc, #424]	; (8002324 <HAL_RCC_OscConfig+0x26c>)
 800217a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800217e:	6013      	str	r3, [r2, #0]
 8002180:	4b68      	ldr	r3, [pc, #416]	; (8002324 <HAL_RCC_OscConfig+0x26c>)
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	4a67      	ldr	r2, [pc, #412]	; (8002324 <HAL_RCC_OscConfig+0x26c>)
 8002186:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800218a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	685b      	ldr	r3, [r3, #4]
 8002190:	2b00      	cmp	r3, #0
 8002192:	d013      	beq.n	80021bc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002194:	f7ff fc92 	bl	8001abc <HAL_GetTick>
 8002198:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800219a:	e008      	b.n	80021ae <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800219c:	f7ff fc8e 	bl	8001abc <HAL_GetTick>
 80021a0:	4602      	mov	r2, r0
 80021a2:	693b      	ldr	r3, [r7, #16]
 80021a4:	1ad3      	subs	r3, r2, r3
 80021a6:	2b64      	cmp	r3, #100	; 0x64
 80021a8:	d901      	bls.n	80021ae <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80021aa:	2303      	movs	r3, #3
 80021ac:	e1fa      	b.n	80025a4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021ae:	4b5d      	ldr	r3, [pc, #372]	; (8002324 <HAL_RCC_OscConfig+0x26c>)
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d0f0      	beq.n	800219c <HAL_RCC_OscConfig+0xe4>
 80021ba:	e014      	b.n	80021e6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021bc:	f7ff fc7e 	bl	8001abc <HAL_GetTick>
 80021c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80021c2:	e008      	b.n	80021d6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80021c4:	f7ff fc7a 	bl	8001abc <HAL_GetTick>
 80021c8:	4602      	mov	r2, r0
 80021ca:	693b      	ldr	r3, [r7, #16]
 80021cc:	1ad3      	subs	r3, r2, r3
 80021ce:	2b64      	cmp	r3, #100	; 0x64
 80021d0:	d901      	bls.n	80021d6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80021d2:	2303      	movs	r3, #3
 80021d4:	e1e6      	b.n	80025a4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80021d6:	4b53      	ldr	r3, [pc, #332]	; (8002324 <HAL_RCC_OscConfig+0x26c>)
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d1f0      	bne.n	80021c4 <HAL_RCC_OscConfig+0x10c>
 80021e2:	e000      	b.n	80021e6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021e4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f003 0302 	and.w	r3, r3, #2
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d063      	beq.n	80022ba <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80021f2:	4b4c      	ldr	r3, [pc, #304]	; (8002324 <HAL_RCC_OscConfig+0x26c>)
 80021f4:	685b      	ldr	r3, [r3, #4]
 80021f6:	f003 030c 	and.w	r3, r3, #12
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d00b      	beq.n	8002216 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80021fe:	4b49      	ldr	r3, [pc, #292]	; (8002324 <HAL_RCC_OscConfig+0x26c>)
 8002200:	685b      	ldr	r3, [r3, #4]
 8002202:	f003 030c 	and.w	r3, r3, #12
 8002206:	2b08      	cmp	r3, #8
 8002208:	d11c      	bne.n	8002244 <HAL_RCC_OscConfig+0x18c>
 800220a:	4b46      	ldr	r3, [pc, #280]	; (8002324 <HAL_RCC_OscConfig+0x26c>)
 800220c:	685b      	ldr	r3, [r3, #4]
 800220e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002212:	2b00      	cmp	r3, #0
 8002214:	d116      	bne.n	8002244 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002216:	4b43      	ldr	r3, [pc, #268]	; (8002324 <HAL_RCC_OscConfig+0x26c>)
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f003 0302 	and.w	r3, r3, #2
 800221e:	2b00      	cmp	r3, #0
 8002220:	d005      	beq.n	800222e <HAL_RCC_OscConfig+0x176>
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	691b      	ldr	r3, [r3, #16]
 8002226:	2b01      	cmp	r3, #1
 8002228:	d001      	beq.n	800222e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800222a:	2301      	movs	r3, #1
 800222c:	e1ba      	b.n	80025a4 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800222e:	4b3d      	ldr	r3, [pc, #244]	; (8002324 <HAL_RCC_OscConfig+0x26c>)
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	695b      	ldr	r3, [r3, #20]
 800223a:	00db      	lsls	r3, r3, #3
 800223c:	4939      	ldr	r1, [pc, #228]	; (8002324 <HAL_RCC_OscConfig+0x26c>)
 800223e:	4313      	orrs	r3, r2
 8002240:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002242:	e03a      	b.n	80022ba <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	691b      	ldr	r3, [r3, #16]
 8002248:	2b00      	cmp	r3, #0
 800224a:	d020      	beq.n	800228e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800224c:	4b36      	ldr	r3, [pc, #216]	; (8002328 <HAL_RCC_OscConfig+0x270>)
 800224e:	2201      	movs	r2, #1
 8002250:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002252:	f7ff fc33 	bl	8001abc <HAL_GetTick>
 8002256:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002258:	e008      	b.n	800226c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800225a:	f7ff fc2f 	bl	8001abc <HAL_GetTick>
 800225e:	4602      	mov	r2, r0
 8002260:	693b      	ldr	r3, [r7, #16]
 8002262:	1ad3      	subs	r3, r2, r3
 8002264:	2b02      	cmp	r3, #2
 8002266:	d901      	bls.n	800226c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002268:	2303      	movs	r3, #3
 800226a:	e19b      	b.n	80025a4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800226c:	4b2d      	ldr	r3, [pc, #180]	; (8002324 <HAL_RCC_OscConfig+0x26c>)
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f003 0302 	and.w	r3, r3, #2
 8002274:	2b00      	cmp	r3, #0
 8002276:	d0f0      	beq.n	800225a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002278:	4b2a      	ldr	r3, [pc, #168]	; (8002324 <HAL_RCC_OscConfig+0x26c>)
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	695b      	ldr	r3, [r3, #20]
 8002284:	00db      	lsls	r3, r3, #3
 8002286:	4927      	ldr	r1, [pc, #156]	; (8002324 <HAL_RCC_OscConfig+0x26c>)
 8002288:	4313      	orrs	r3, r2
 800228a:	600b      	str	r3, [r1, #0]
 800228c:	e015      	b.n	80022ba <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800228e:	4b26      	ldr	r3, [pc, #152]	; (8002328 <HAL_RCC_OscConfig+0x270>)
 8002290:	2200      	movs	r2, #0
 8002292:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002294:	f7ff fc12 	bl	8001abc <HAL_GetTick>
 8002298:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800229a:	e008      	b.n	80022ae <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800229c:	f7ff fc0e 	bl	8001abc <HAL_GetTick>
 80022a0:	4602      	mov	r2, r0
 80022a2:	693b      	ldr	r3, [r7, #16]
 80022a4:	1ad3      	subs	r3, r2, r3
 80022a6:	2b02      	cmp	r3, #2
 80022a8:	d901      	bls.n	80022ae <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80022aa:	2303      	movs	r3, #3
 80022ac:	e17a      	b.n	80025a4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80022ae:	4b1d      	ldr	r3, [pc, #116]	; (8002324 <HAL_RCC_OscConfig+0x26c>)
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f003 0302 	and.w	r3, r3, #2
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d1f0      	bne.n	800229c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f003 0308 	and.w	r3, r3, #8
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d03a      	beq.n	800233c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	699b      	ldr	r3, [r3, #24]
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d019      	beq.n	8002302 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80022ce:	4b17      	ldr	r3, [pc, #92]	; (800232c <HAL_RCC_OscConfig+0x274>)
 80022d0:	2201      	movs	r2, #1
 80022d2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022d4:	f7ff fbf2 	bl	8001abc <HAL_GetTick>
 80022d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80022da:	e008      	b.n	80022ee <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80022dc:	f7ff fbee 	bl	8001abc <HAL_GetTick>
 80022e0:	4602      	mov	r2, r0
 80022e2:	693b      	ldr	r3, [r7, #16]
 80022e4:	1ad3      	subs	r3, r2, r3
 80022e6:	2b02      	cmp	r3, #2
 80022e8:	d901      	bls.n	80022ee <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80022ea:	2303      	movs	r3, #3
 80022ec:	e15a      	b.n	80025a4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80022ee:	4b0d      	ldr	r3, [pc, #52]	; (8002324 <HAL_RCC_OscConfig+0x26c>)
 80022f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022f2:	f003 0302 	and.w	r3, r3, #2
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d0f0      	beq.n	80022dc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80022fa:	2001      	movs	r0, #1
 80022fc:	f000 fa9a 	bl	8002834 <RCC_Delay>
 8002300:	e01c      	b.n	800233c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002302:	4b0a      	ldr	r3, [pc, #40]	; (800232c <HAL_RCC_OscConfig+0x274>)
 8002304:	2200      	movs	r2, #0
 8002306:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002308:	f7ff fbd8 	bl	8001abc <HAL_GetTick>
 800230c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800230e:	e00f      	b.n	8002330 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002310:	f7ff fbd4 	bl	8001abc <HAL_GetTick>
 8002314:	4602      	mov	r2, r0
 8002316:	693b      	ldr	r3, [r7, #16]
 8002318:	1ad3      	subs	r3, r2, r3
 800231a:	2b02      	cmp	r3, #2
 800231c:	d908      	bls.n	8002330 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800231e:	2303      	movs	r3, #3
 8002320:	e140      	b.n	80025a4 <HAL_RCC_OscConfig+0x4ec>
 8002322:	bf00      	nop
 8002324:	40021000 	.word	0x40021000
 8002328:	42420000 	.word	0x42420000
 800232c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002330:	4b9e      	ldr	r3, [pc, #632]	; (80025ac <HAL_RCC_OscConfig+0x4f4>)
 8002332:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002334:	f003 0302 	and.w	r3, r3, #2
 8002338:	2b00      	cmp	r3, #0
 800233a:	d1e9      	bne.n	8002310 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f003 0304 	and.w	r3, r3, #4
 8002344:	2b00      	cmp	r3, #0
 8002346:	f000 80a6 	beq.w	8002496 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800234a:	2300      	movs	r3, #0
 800234c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800234e:	4b97      	ldr	r3, [pc, #604]	; (80025ac <HAL_RCC_OscConfig+0x4f4>)
 8002350:	69db      	ldr	r3, [r3, #28]
 8002352:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002356:	2b00      	cmp	r3, #0
 8002358:	d10d      	bne.n	8002376 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800235a:	4b94      	ldr	r3, [pc, #592]	; (80025ac <HAL_RCC_OscConfig+0x4f4>)
 800235c:	69db      	ldr	r3, [r3, #28]
 800235e:	4a93      	ldr	r2, [pc, #588]	; (80025ac <HAL_RCC_OscConfig+0x4f4>)
 8002360:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002364:	61d3      	str	r3, [r2, #28]
 8002366:	4b91      	ldr	r3, [pc, #580]	; (80025ac <HAL_RCC_OscConfig+0x4f4>)
 8002368:	69db      	ldr	r3, [r3, #28]
 800236a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800236e:	60bb      	str	r3, [r7, #8]
 8002370:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002372:	2301      	movs	r3, #1
 8002374:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002376:	4b8e      	ldr	r3, [pc, #568]	; (80025b0 <HAL_RCC_OscConfig+0x4f8>)
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800237e:	2b00      	cmp	r3, #0
 8002380:	d118      	bne.n	80023b4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002382:	4b8b      	ldr	r3, [pc, #556]	; (80025b0 <HAL_RCC_OscConfig+0x4f8>)
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	4a8a      	ldr	r2, [pc, #552]	; (80025b0 <HAL_RCC_OscConfig+0x4f8>)
 8002388:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800238c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800238e:	f7ff fb95 	bl	8001abc <HAL_GetTick>
 8002392:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002394:	e008      	b.n	80023a8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002396:	f7ff fb91 	bl	8001abc <HAL_GetTick>
 800239a:	4602      	mov	r2, r0
 800239c:	693b      	ldr	r3, [r7, #16]
 800239e:	1ad3      	subs	r3, r2, r3
 80023a0:	2b64      	cmp	r3, #100	; 0x64
 80023a2:	d901      	bls.n	80023a8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80023a4:	2303      	movs	r3, #3
 80023a6:	e0fd      	b.n	80025a4 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023a8:	4b81      	ldr	r3, [pc, #516]	; (80025b0 <HAL_RCC_OscConfig+0x4f8>)
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d0f0      	beq.n	8002396 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	68db      	ldr	r3, [r3, #12]
 80023b8:	2b01      	cmp	r3, #1
 80023ba:	d106      	bne.n	80023ca <HAL_RCC_OscConfig+0x312>
 80023bc:	4b7b      	ldr	r3, [pc, #492]	; (80025ac <HAL_RCC_OscConfig+0x4f4>)
 80023be:	6a1b      	ldr	r3, [r3, #32]
 80023c0:	4a7a      	ldr	r2, [pc, #488]	; (80025ac <HAL_RCC_OscConfig+0x4f4>)
 80023c2:	f043 0301 	orr.w	r3, r3, #1
 80023c6:	6213      	str	r3, [r2, #32]
 80023c8:	e02d      	b.n	8002426 <HAL_RCC_OscConfig+0x36e>
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	68db      	ldr	r3, [r3, #12]
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d10c      	bne.n	80023ec <HAL_RCC_OscConfig+0x334>
 80023d2:	4b76      	ldr	r3, [pc, #472]	; (80025ac <HAL_RCC_OscConfig+0x4f4>)
 80023d4:	6a1b      	ldr	r3, [r3, #32]
 80023d6:	4a75      	ldr	r2, [pc, #468]	; (80025ac <HAL_RCC_OscConfig+0x4f4>)
 80023d8:	f023 0301 	bic.w	r3, r3, #1
 80023dc:	6213      	str	r3, [r2, #32]
 80023de:	4b73      	ldr	r3, [pc, #460]	; (80025ac <HAL_RCC_OscConfig+0x4f4>)
 80023e0:	6a1b      	ldr	r3, [r3, #32]
 80023e2:	4a72      	ldr	r2, [pc, #456]	; (80025ac <HAL_RCC_OscConfig+0x4f4>)
 80023e4:	f023 0304 	bic.w	r3, r3, #4
 80023e8:	6213      	str	r3, [r2, #32]
 80023ea:	e01c      	b.n	8002426 <HAL_RCC_OscConfig+0x36e>
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	68db      	ldr	r3, [r3, #12]
 80023f0:	2b05      	cmp	r3, #5
 80023f2:	d10c      	bne.n	800240e <HAL_RCC_OscConfig+0x356>
 80023f4:	4b6d      	ldr	r3, [pc, #436]	; (80025ac <HAL_RCC_OscConfig+0x4f4>)
 80023f6:	6a1b      	ldr	r3, [r3, #32]
 80023f8:	4a6c      	ldr	r2, [pc, #432]	; (80025ac <HAL_RCC_OscConfig+0x4f4>)
 80023fa:	f043 0304 	orr.w	r3, r3, #4
 80023fe:	6213      	str	r3, [r2, #32]
 8002400:	4b6a      	ldr	r3, [pc, #424]	; (80025ac <HAL_RCC_OscConfig+0x4f4>)
 8002402:	6a1b      	ldr	r3, [r3, #32]
 8002404:	4a69      	ldr	r2, [pc, #420]	; (80025ac <HAL_RCC_OscConfig+0x4f4>)
 8002406:	f043 0301 	orr.w	r3, r3, #1
 800240a:	6213      	str	r3, [r2, #32]
 800240c:	e00b      	b.n	8002426 <HAL_RCC_OscConfig+0x36e>
 800240e:	4b67      	ldr	r3, [pc, #412]	; (80025ac <HAL_RCC_OscConfig+0x4f4>)
 8002410:	6a1b      	ldr	r3, [r3, #32]
 8002412:	4a66      	ldr	r2, [pc, #408]	; (80025ac <HAL_RCC_OscConfig+0x4f4>)
 8002414:	f023 0301 	bic.w	r3, r3, #1
 8002418:	6213      	str	r3, [r2, #32]
 800241a:	4b64      	ldr	r3, [pc, #400]	; (80025ac <HAL_RCC_OscConfig+0x4f4>)
 800241c:	6a1b      	ldr	r3, [r3, #32]
 800241e:	4a63      	ldr	r2, [pc, #396]	; (80025ac <HAL_RCC_OscConfig+0x4f4>)
 8002420:	f023 0304 	bic.w	r3, r3, #4
 8002424:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	68db      	ldr	r3, [r3, #12]
 800242a:	2b00      	cmp	r3, #0
 800242c:	d015      	beq.n	800245a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800242e:	f7ff fb45 	bl	8001abc <HAL_GetTick>
 8002432:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002434:	e00a      	b.n	800244c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002436:	f7ff fb41 	bl	8001abc <HAL_GetTick>
 800243a:	4602      	mov	r2, r0
 800243c:	693b      	ldr	r3, [r7, #16]
 800243e:	1ad3      	subs	r3, r2, r3
 8002440:	f241 3288 	movw	r2, #5000	; 0x1388
 8002444:	4293      	cmp	r3, r2
 8002446:	d901      	bls.n	800244c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002448:	2303      	movs	r3, #3
 800244a:	e0ab      	b.n	80025a4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800244c:	4b57      	ldr	r3, [pc, #348]	; (80025ac <HAL_RCC_OscConfig+0x4f4>)
 800244e:	6a1b      	ldr	r3, [r3, #32]
 8002450:	f003 0302 	and.w	r3, r3, #2
 8002454:	2b00      	cmp	r3, #0
 8002456:	d0ee      	beq.n	8002436 <HAL_RCC_OscConfig+0x37e>
 8002458:	e014      	b.n	8002484 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800245a:	f7ff fb2f 	bl	8001abc <HAL_GetTick>
 800245e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002460:	e00a      	b.n	8002478 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002462:	f7ff fb2b 	bl	8001abc <HAL_GetTick>
 8002466:	4602      	mov	r2, r0
 8002468:	693b      	ldr	r3, [r7, #16]
 800246a:	1ad3      	subs	r3, r2, r3
 800246c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002470:	4293      	cmp	r3, r2
 8002472:	d901      	bls.n	8002478 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002474:	2303      	movs	r3, #3
 8002476:	e095      	b.n	80025a4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002478:	4b4c      	ldr	r3, [pc, #304]	; (80025ac <HAL_RCC_OscConfig+0x4f4>)
 800247a:	6a1b      	ldr	r3, [r3, #32]
 800247c:	f003 0302 	and.w	r3, r3, #2
 8002480:	2b00      	cmp	r3, #0
 8002482:	d1ee      	bne.n	8002462 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002484:	7dfb      	ldrb	r3, [r7, #23]
 8002486:	2b01      	cmp	r3, #1
 8002488:	d105      	bne.n	8002496 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800248a:	4b48      	ldr	r3, [pc, #288]	; (80025ac <HAL_RCC_OscConfig+0x4f4>)
 800248c:	69db      	ldr	r3, [r3, #28]
 800248e:	4a47      	ldr	r2, [pc, #284]	; (80025ac <HAL_RCC_OscConfig+0x4f4>)
 8002490:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002494:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	69db      	ldr	r3, [r3, #28]
 800249a:	2b00      	cmp	r3, #0
 800249c:	f000 8081 	beq.w	80025a2 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80024a0:	4b42      	ldr	r3, [pc, #264]	; (80025ac <HAL_RCC_OscConfig+0x4f4>)
 80024a2:	685b      	ldr	r3, [r3, #4]
 80024a4:	f003 030c 	and.w	r3, r3, #12
 80024a8:	2b08      	cmp	r3, #8
 80024aa:	d061      	beq.n	8002570 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	69db      	ldr	r3, [r3, #28]
 80024b0:	2b02      	cmp	r3, #2
 80024b2:	d146      	bne.n	8002542 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024b4:	4b3f      	ldr	r3, [pc, #252]	; (80025b4 <HAL_RCC_OscConfig+0x4fc>)
 80024b6:	2200      	movs	r2, #0
 80024b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024ba:	f7ff faff 	bl	8001abc <HAL_GetTick>
 80024be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80024c0:	e008      	b.n	80024d4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024c2:	f7ff fafb 	bl	8001abc <HAL_GetTick>
 80024c6:	4602      	mov	r2, r0
 80024c8:	693b      	ldr	r3, [r7, #16]
 80024ca:	1ad3      	subs	r3, r2, r3
 80024cc:	2b02      	cmp	r3, #2
 80024ce:	d901      	bls.n	80024d4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80024d0:	2303      	movs	r3, #3
 80024d2:	e067      	b.n	80025a4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80024d4:	4b35      	ldr	r3, [pc, #212]	; (80025ac <HAL_RCC_OscConfig+0x4f4>)
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d1f0      	bne.n	80024c2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	6a1b      	ldr	r3, [r3, #32]
 80024e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80024e8:	d108      	bne.n	80024fc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80024ea:	4b30      	ldr	r3, [pc, #192]	; (80025ac <HAL_RCC_OscConfig+0x4f4>)
 80024ec:	685b      	ldr	r3, [r3, #4]
 80024ee:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	689b      	ldr	r3, [r3, #8]
 80024f6:	492d      	ldr	r1, [pc, #180]	; (80025ac <HAL_RCC_OscConfig+0x4f4>)
 80024f8:	4313      	orrs	r3, r2
 80024fa:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80024fc:	4b2b      	ldr	r3, [pc, #172]	; (80025ac <HAL_RCC_OscConfig+0x4f4>)
 80024fe:	685b      	ldr	r3, [r3, #4]
 8002500:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	6a19      	ldr	r1, [r3, #32]
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800250c:	430b      	orrs	r3, r1
 800250e:	4927      	ldr	r1, [pc, #156]	; (80025ac <HAL_RCC_OscConfig+0x4f4>)
 8002510:	4313      	orrs	r3, r2
 8002512:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002514:	4b27      	ldr	r3, [pc, #156]	; (80025b4 <HAL_RCC_OscConfig+0x4fc>)
 8002516:	2201      	movs	r2, #1
 8002518:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800251a:	f7ff facf 	bl	8001abc <HAL_GetTick>
 800251e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002520:	e008      	b.n	8002534 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002522:	f7ff facb 	bl	8001abc <HAL_GetTick>
 8002526:	4602      	mov	r2, r0
 8002528:	693b      	ldr	r3, [r7, #16]
 800252a:	1ad3      	subs	r3, r2, r3
 800252c:	2b02      	cmp	r3, #2
 800252e:	d901      	bls.n	8002534 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002530:	2303      	movs	r3, #3
 8002532:	e037      	b.n	80025a4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002534:	4b1d      	ldr	r3, [pc, #116]	; (80025ac <HAL_RCC_OscConfig+0x4f4>)
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800253c:	2b00      	cmp	r3, #0
 800253e:	d0f0      	beq.n	8002522 <HAL_RCC_OscConfig+0x46a>
 8002540:	e02f      	b.n	80025a2 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002542:	4b1c      	ldr	r3, [pc, #112]	; (80025b4 <HAL_RCC_OscConfig+0x4fc>)
 8002544:	2200      	movs	r2, #0
 8002546:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002548:	f7ff fab8 	bl	8001abc <HAL_GetTick>
 800254c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800254e:	e008      	b.n	8002562 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002550:	f7ff fab4 	bl	8001abc <HAL_GetTick>
 8002554:	4602      	mov	r2, r0
 8002556:	693b      	ldr	r3, [r7, #16]
 8002558:	1ad3      	subs	r3, r2, r3
 800255a:	2b02      	cmp	r3, #2
 800255c:	d901      	bls.n	8002562 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800255e:	2303      	movs	r3, #3
 8002560:	e020      	b.n	80025a4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002562:	4b12      	ldr	r3, [pc, #72]	; (80025ac <HAL_RCC_OscConfig+0x4f4>)
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800256a:	2b00      	cmp	r3, #0
 800256c:	d1f0      	bne.n	8002550 <HAL_RCC_OscConfig+0x498>
 800256e:	e018      	b.n	80025a2 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	69db      	ldr	r3, [r3, #28]
 8002574:	2b01      	cmp	r3, #1
 8002576:	d101      	bne.n	800257c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002578:	2301      	movs	r3, #1
 800257a:	e013      	b.n	80025a4 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800257c:	4b0b      	ldr	r3, [pc, #44]	; (80025ac <HAL_RCC_OscConfig+0x4f4>)
 800257e:	685b      	ldr	r3, [r3, #4]
 8002580:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	6a1b      	ldr	r3, [r3, #32]
 800258c:	429a      	cmp	r2, r3
 800258e:	d106      	bne.n	800259e <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800259a:	429a      	cmp	r2, r3
 800259c:	d001      	beq.n	80025a2 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800259e:	2301      	movs	r3, #1
 80025a0:	e000      	b.n	80025a4 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80025a2:	2300      	movs	r3, #0
}
 80025a4:	4618      	mov	r0, r3
 80025a6:	3718      	adds	r7, #24
 80025a8:	46bd      	mov	sp, r7
 80025aa:	bd80      	pop	{r7, pc}
 80025ac:	40021000 	.word	0x40021000
 80025b0:	40007000 	.word	0x40007000
 80025b4:	42420060 	.word	0x42420060

080025b8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	b084      	sub	sp, #16
 80025bc:	af00      	add	r7, sp, #0
 80025be:	6078      	str	r0, [r7, #4]
 80025c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d101      	bne.n	80025cc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80025c8:	2301      	movs	r3, #1
 80025ca:	e0d0      	b.n	800276e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80025cc:	4b6a      	ldr	r3, [pc, #424]	; (8002778 <HAL_RCC_ClockConfig+0x1c0>)
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f003 0307 	and.w	r3, r3, #7
 80025d4:	683a      	ldr	r2, [r7, #0]
 80025d6:	429a      	cmp	r2, r3
 80025d8:	d910      	bls.n	80025fc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025da:	4b67      	ldr	r3, [pc, #412]	; (8002778 <HAL_RCC_ClockConfig+0x1c0>)
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f023 0207 	bic.w	r2, r3, #7
 80025e2:	4965      	ldr	r1, [pc, #404]	; (8002778 <HAL_RCC_ClockConfig+0x1c0>)
 80025e4:	683b      	ldr	r3, [r7, #0]
 80025e6:	4313      	orrs	r3, r2
 80025e8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80025ea:	4b63      	ldr	r3, [pc, #396]	; (8002778 <HAL_RCC_ClockConfig+0x1c0>)
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f003 0307 	and.w	r3, r3, #7
 80025f2:	683a      	ldr	r2, [r7, #0]
 80025f4:	429a      	cmp	r2, r3
 80025f6:	d001      	beq.n	80025fc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80025f8:	2301      	movs	r3, #1
 80025fa:	e0b8      	b.n	800276e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f003 0302 	and.w	r3, r3, #2
 8002604:	2b00      	cmp	r3, #0
 8002606:	d020      	beq.n	800264a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f003 0304 	and.w	r3, r3, #4
 8002610:	2b00      	cmp	r3, #0
 8002612:	d005      	beq.n	8002620 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002614:	4b59      	ldr	r3, [pc, #356]	; (800277c <HAL_RCC_ClockConfig+0x1c4>)
 8002616:	685b      	ldr	r3, [r3, #4]
 8002618:	4a58      	ldr	r2, [pc, #352]	; (800277c <HAL_RCC_ClockConfig+0x1c4>)
 800261a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800261e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f003 0308 	and.w	r3, r3, #8
 8002628:	2b00      	cmp	r3, #0
 800262a:	d005      	beq.n	8002638 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800262c:	4b53      	ldr	r3, [pc, #332]	; (800277c <HAL_RCC_ClockConfig+0x1c4>)
 800262e:	685b      	ldr	r3, [r3, #4]
 8002630:	4a52      	ldr	r2, [pc, #328]	; (800277c <HAL_RCC_ClockConfig+0x1c4>)
 8002632:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002636:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002638:	4b50      	ldr	r3, [pc, #320]	; (800277c <HAL_RCC_ClockConfig+0x1c4>)
 800263a:	685b      	ldr	r3, [r3, #4]
 800263c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	689b      	ldr	r3, [r3, #8]
 8002644:	494d      	ldr	r1, [pc, #308]	; (800277c <HAL_RCC_ClockConfig+0x1c4>)
 8002646:	4313      	orrs	r3, r2
 8002648:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f003 0301 	and.w	r3, r3, #1
 8002652:	2b00      	cmp	r3, #0
 8002654:	d040      	beq.n	80026d8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	685b      	ldr	r3, [r3, #4]
 800265a:	2b01      	cmp	r3, #1
 800265c:	d107      	bne.n	800266e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800265e:	4b47      	ldr	r3, [pc, #284]	; (800277c <HAL_RCC_ClockConfig+0x1c4>)
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002666:	2b00      	cmp	r3, #0
 8002668:	d115      	bne.n	8002696 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800266a:	2301      	movs	r3, #1
 800266c:	e07f      	b.n	800276e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	685b      	ldr	r3, [r3, #4]
 8002672:	2b02      	cmp	r3, #2
 8002674:	d107      	bne.n	8002686 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002676:	4b41      	ldr	r3, [pc, #260]	; (800277c <HAL_RCC_ClockConfig+0x1c4>)
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800267e:	2b00      	cmp	r3, #0
 8002680:	d109      	bne.n	8002696 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002682:	2301      	movs	r3, #1
 8002684:	e073      	b.n	800276e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002686:	4b3d      	ldr	r3, [pc, #244]	; (800277c <HAL_RCC_ClockConfig+0x1c4>)
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f003 0302 	and.w	r3, r3, #2
 800268e:	2b00      	cmp	r3, #0
 8002690:	d101      	bne.n	8002696 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002692:	2301      	movs	r3, #1
 8002694:	e06b      	b.n	800276e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002696:	4b39      	ldr	r3, [pc, #228]	; (800277c <HAL_RCC_ClockConfig+0x1c4>)
 8002698:	685b      	ldr	r3, [r3, #4]
 800269a:	f023 0203 	bic.w	r2, r3, #3
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	685b      	ldr	r3, [r3, #4]
 80026a2:	4936      	ldr	r1, [pc, #216]	; (800277c <HAL_RCC_ClockConfig+0x1c4>)
 80026a4:	4313      	orrs	r3, r2
 80026a6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80026a8:	f7ff fa08 	bl	8001abc <HAL_GetTick>
 80026ac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026ae:	e00a      	b.n	80026c6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80026b0:	f7ff fa04 	bl	8001abc <HAL_GetTick>
 80026b4:	4602      	mov	r2, r0
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	1ad3      	subs	r3, r2, r3
 80026ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80026be:	4293      	cmp	r3, r2
 80026c0:	d901      	bls.n	80026c6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80026c2:	2303      	movs	r3, #3
 80026c4:	e053      	b.n	800276e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026c6:	4b2d      	ldr	r3, [pc, #180]	; (800277c <HAL_RCC_ClockConfig+0x1c4>)
 80026c8:	685b      	ldr	r3, [r3, #4]
 80026ca:	f003 020c 	and.w	r2, r3, #12
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	685b      	ldr	r3, [r3, #4]
 80026d2:	009b      	lsls	r3, r3, #2
 80026d4:	429a      	cmp	r2, r3
 80026d6:	d1eb      	bne.n	80026b0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80026d8:	4b27      	ldr	r3, [pc, #156]	; (8002778 <HAL_RCC_ClockConfig+0x1c0>)
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f003 0307 	and.w	r3, r3, #7
 80026e0:	683a      	ldr	r2, [r7, #0]
 80026e2:	429a      	cmp	r2, r3
 80026e4:	d210      	bcs.n	8002708 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026e6:	4b24      	ldr	r3, [pc, #144]	; (8002778 <HAL_RCC_ClockConfig+0x1c0>)
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f023 0207 	bic.w	r2, r3, #7
 80026ee:	4922      	ldr	r1, [pc, #136]	; (8002778 <HAL_RCC_ClockConfig+0x1c0>)
 80026f0:	683b      	ldr	r3, [r7, #0]
 80026f2:	4313      	orrs	r3, r2
 80026f4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80026f6:	4b20      	ldr	r3, [pc, #128]	; (8002778 <HAL_RCC_ClockConfig+0x1c0>)
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f003 0307 	and.w	r3, r3, #7
 80026fe:	683a      	ldr	r2, [r7, #0]
 8002700:	429a      	cmp	r2, r3
 8002702:	d001      	beq.n	8002708 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002704:	2301      	movs	r3, #1
 8002706:	e032      	b.n	800276e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f003 0304 	and.w	r3, r3, #4
 8002710:	2b00      	cmp	r3, #0
 8002712:	d008      	beq.n	8002726 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002714:	4b19      	ldr	r3, [pc, #100]	; (800277c <HAL_RCC_ClockConfig+0x1c4>)
 8002716:	685b      	ldr	r3, [r3, #4]
 8002718:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	68db      	ldr	r3, [r3, #12]
 8002720:	4916      	ldr	r1, [pc, #88]	; (800277c <HAL_RCC_ClockConfig+0x1c4>)
 8002722:	4313      	orrs	r3, r2
 8002724:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f003 0308 	and.w	r3, r3, #8
 800272e:	2b00      	cmp	r3, #0
 8002730:	d009      	beq.n	8002746 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002732:	4b12      	ldr	r3, [pc, #72]	; (800277c <HAL_RCC_ClockConfig+0x1c4>)
 8002734:	685b      	ldr	r3, [r3, #4]
 8002736:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	691b      	ldr	r3, [r3, #16]
 800273e:	00db      	lsls	r3, r3, #3
 8002740:	490e      	ldr	r1, [pc, #56]	; (800277c <HAL_RCC_ClockConfig+0x1c4>)
 8002742:	4313      	orrs	r3, r2
 8002744:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002746:	f000 f821 	bl	800278c <HAL_RCC_GetSysClockFreq>
 800274a:	4602      	mov	r2, r0
 800274c:	4b0b      	ldr	r3, [pc, #44]	; (800277c <HAL_RCC_ClockConfig+0x1c4>)
 800274e:	685b      	ldr	r3, [r3, #4]
 8002750:	091b      	lsrs	r3, r3, #4
 8002752:	f003 030f 	and.w	r3, r3, #15
 8002756:	490a      	ldr	r1, [pc, #40]	; (8002780 <HAL_RCC_ClockConfig+0x1c8>)
 8002758:	5ccb      	ldrb	r3, [r1, r3]
 800275a:	fa22 f303 	lsr.w	r3, r2, r3
 800275e:	4a09      	ldr	r2, [pc, #36]	; (8002784 <HAL_RCC_ClockConfig+0x1cc>)
 8002760:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002762:	4b09      	ldr	r3, [pc, #36]	; (8002788 <HAL_RCC_ClockConfig+0x1d0>)
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	4618      	mov	r0, r3
 8002768:	f7ff f966 	bl	8001a38 <HAL_InitTick>

  return HAL_OK;
 800276c:	2300      	movs	r3, #0
}
 800276e:	4618      	mov	r0, r3
 8002770:	3710      	adds	r7, #16
 8002772:	46bd      	mov	sp, r7
 8002774:	bd80      	pop	{r7, pc}
 8002776:	bf00      	nop
 8002778:	40022000 	.word	0x40022000
 800277c:	40021000 	.word	0x40021000
 8002780:	080030b0 	.word	0x080030b0
 8002784:	20000018 	.word	0x20000018
 8002788:	2000001c 	.word	0x2000001c

0800278c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800278c:	b480      	push	{r7}
 800278e:	b087      	sub	sp, #28
 8002790:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002792:	2300      	movs	r3, #0
 8002794:	60fb      	str	r3, [r7, #12]
 8002796:	2300      	movs	r3, #0
 8002798:	60bb      	str	r3, [r7, #8]
 800279a:	2300      	movs	r3, #0
 800279c:	617b      	str	r3, [r7, #20]
 800279e:	2300      	movs	r3, #0
 80027a0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80027a2:	2300      	movs	r3, #0
 80027a4:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80027a6:	4b1e      	ldr	r3, [pc, #120]	; (8002820 <HAL_RCC_GetSysClockFreq+0x94>)
 80027a8:	685b      	ldr	r3, [r3, #4]
 80027aa:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	f003 030c 	and.w	r3, r3, #12
 80027b2:	2b04      	cmp	r3, #4
 80027b4:	d002      	beq.n	80027bc <HAL_RCC_GetSysClockFreq+0x30>
 80027b6:	2b08      	cmp	r3, #8
 80027b8:	d003      	beq.n	80027c2 <HAL_RCC_GetSysClockFreq+0x36>
 80027ba:	e027      	b.n	800280c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80027bc:	4b19      	ldr	r3, [pc, #100]	; (8002824 <HAL_RCC_GetSysClockFreq+0x98>)
 80027be:	613b      	str	r3, [r7, #16]
      break;
 80027c0:	e027      	b.n	8002812 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	0c9b      	lsrs	r3, r3, #18
 80027c6:	f003 030f 	and.w	r3, r3, #15
 80027ca:	4a17      	ldr	r2, [pc, #92]	; (8002828 <HAL_RCC_GetSysClockFreq+0x9c>)
 80027cc:	5cd3      	ldrb	r3, [r2, r3]
 80027ce:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d010      	beq.n	80027fc <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80027da:	4b11      	ldr	r3, [pc, #68]	; (8002820 <HAL_RCC_GetSysClockFreq+0x94>)
 80027dc:	685b      	ldr	r3, [r3, #4]
 80027de:	0c5b      	lsrs	r3, r3, #17
 80027e0:	f003 0301 	and.w	r3, r3, #1
 80027e4:	4a11      	ldr	r2, [pc, #68]	; (800282c <HAL_RCC_GetSysClockFreq+0xa0>)
 80027e6:	5cd3      	ldrb	r3, [r2, r3]
 80027e8:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	4a0d      	ldr	r2, [pc, #52]	; (8002824 <HAL_RCC_GetSysClockFreq+0x98>)
 80027ee:	fb02 f203 	mul.w	r2, r2, r3
 80027f2:	68bb      	ldr	r3, [r7, #8]
 80027f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80027f8:	617b      	str	r3, [r7, #20]
 80027fa:	e004      	b.n	8002806 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	4a0c      	ldr	r2, [pc, #48]	; (8002830 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002800:	fb02 f303 	mul.w	r3, r2, r3
 8002804:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002806:	697b      	ldr	r3, [r7, #20]
 8002808:	613b      	str	r3, [r7, #16]
      break;
 800280a:	e002      	b.n	8002812 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800280c:	4b05      	ldr	r3, [pc, #20]	; (8002824 <HAL_RCC_GetSysClockFreq+0x98>)
 800280e:	613b      	str	r3, [r7, #16]
      break;
 8002810:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002812:	693b      	ldr	r3, [r7, #16]
}
 8002814:	4618      	mov	r0, r3
 8002816:	371c      	adds	r7, #28
 8002818:	46bd      	mov	sp, r7
 800281a:	bc80      	pop	{r7}
 800281c:	4770      	bx	lr
 800281e:	bf00      	nop
 8002820:	40021000 	.word	0x40021000
 8002824:	007a1200 	.word	0x007a1200
 8002828:	080030c0 	.word	0x080030c0
 800282c:	080030d0 	.word	0x080030d0
 8002830:	003d0900 	.word	0x003d0900

08002834 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002834:	b480      	push	{r7}
 8002836:	b085      	sub	sp, #20
 8002838:	af00      	add	r7, sp, #0
 800283a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800283c:	4b0a      	ldr	r3, [pc, #40]	; (8002868 <RCC_Delay+0x34>)
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	4a0a      	ldr	r2, [pc, #40]	; (800286c <RCC_Delay+0x38>)
 8002842:	fba2 2303 	umull	r2, r3, r2, r3
 8002846:	0a5b      	lsrs	r3, r3, #9
 8002848:	687a      	ldr	r2, [r7, #4]
 800284a:	fb02 f303 	mul.w	r3, r2, r3
 800284e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002850:	bf00      	nop
  }
  while (Delay --);
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	1e5a      	subs	r2, r3, #1
 8002856:	60fa      	str	r2, [r7, #12]
 8002858:	2b00      	cmp	r3, #0
 800285a:	d1f9      	bne.n	8002850 <RCC_Delay+0x1c>
}
 800285c:	bf00      	nop
 800285e:	bf00      	nop
 8002860:	3714      	adds	r7, #20
 8002862:	46bd      	mov	sp, r7
 8002864:	bc80      	pop	{r7}
 8002866:	4770      	bx	lr
 8002868:	20000018 	.word	0x20000018
 800286c:	10624dd3 	.word	0x10624dd3

08002870 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002870:	b580      	push	{r7, lr}
 8002872:	b082      	sub	sp, #8
 8002874:	af00      	add	r7, sp, #0
 8002876:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	2b00      	cmp	r3, #0
 800287c:	d101      	bne.n	8002882 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800287e:	2301      	movs	r3, #1
 8002880:	e041      	b.n	8002906 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002888:	b2db      	uxtb	r3, r3
 800288a:	2b00      	cmp	r3, #0
 800288c:	d106      	bne.n	800289c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	2200      	movs	r2, #0
 8002892:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002896:	6878      	ldr	r0, [r7, #4]
 8002898:	f7fe ffe0 	bl	800185c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	2202      	movs	r2, #2
 80028a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681a      	ldr	r2, [r3, #0]
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	3304      	adds	r3, #4
 80028ac:	4619      	mov	r1, r3
 80028ae:	4610      	mov	r0, r2
 80028b0:	f000 fa6e 	bl	8002d90 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	2201      	movs	r2, #1
 80028b8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	2201      	movs	r2, #1
 80028c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	2201      	movs	r2, #1
 80028c8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	2201      	movs	r2, #1
 80028d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	2201      	movs	r2, #1
 80028d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	2201      	movs	r2, #1
 80028e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	2201      	movs	r2, #1
 80028e8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	2201      	movs	r2, #1
 80028f0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	2201      	movs	r2, #1
 80028f8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	2201      	movs	r2, #1
 8002900:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002904:	2300      	movs	r3, #0
}
 8002906:	4618      	mov	r0, r3
 8002908:	3708      	adds	r7, #8
 800290a:	46bd      	mov	sp, r7
 800290c:	bd80      	pop	{r7, pc}
	...

08002910 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002910:	b480      	push	{r7}
 8002912:	b085      	sub	sp, #20
 8002914:	af00      	add	r7, sp, #0
 8002916:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800291e:	b2db      	uxtb	r3, r3
 8002920:	2b01      	cmp	r3, #1
 8002922:	d001      	beq.n	8002928 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002924:	2301      	movs	r3, #1
 8002926:	e035      	b.n	8002994 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	2202      	movs	r2, #2
 800292c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	68da      	ldr	r2, [r3, #12]
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f042 0201 	orr.w	r2, r2, #1
 800293e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	4a16      	ldr	r2, [pc, #88]	; (80029a0 <HAL_TIM_Base_Start_IT+0x90>)
 8002946:	4293      	cmp	r3, r2
 8002948:	d009      	beq.n	800295e <HAL_TIM_Base_Start_IT+0x4e>
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002952:	d004      	beq.n	800295e <HAL_TIM_Base_Start_IT+0x4e>
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	4a12      	ldr	r2, [pc, #72]	; (80029a4 <HAL_TIM_Base_Start_IT+0x94>)
 800295a:	4293      	cmp	r3, r2
 800295c:	d111      	bne.n	8002982 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	689b      	ldr	r3, [r3, #8]
 8002964:	f003 0307 	and.w	r3, r3, #7
 8002968:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	2b06      	cmp	r3, #6
 800296e:	d010      	beq.n	8002992 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	681a      	ldr	r2, [r3, #0]
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f042 0201 	orr.w	r2, r2, #1
 800297e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002980:	e007      	b.n	8002992 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	681a      	ldr	r2, [r3, #0]
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f042 0201 	orr.w	r2, r2, #1
 8002990:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002992:	2300      	movs	r3, #0
}
 8002994:	4618      	mov	r0, r3
 8002996:	3714      	adds	r7, #20
 8002998:	46bd      	mov	sp, r7
 800299a:	bc80      	pop	{r7}
 800299c:	4770      	bx	lr
 800299e:	bf00      	nop
 80029a0:	40012c00 	.word	0x40012c00
 80029a4:	40000400 	.word	0x40000400

080029a8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80029a8:	b580      	push	{r7, lr}
 80029aa:	b082      	sub	sp, #8
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	691b      	ldr	r3, [r3, #16]
 80029b6:	f003 0302 	and.w	r3, r3, #2
 80029ba:	2b02      	cmp	r3, #2
 80029bc:	d122      	bne.n	8002a04 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	68db      	ldr	r3, [r3, #12]
 80029c4:	f003 0302 	and.w	r3, r3, #2
 80029c8:	2b02      	cmp	r3, #2
 80029ca:	d11b      	bne.n	8002a04 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f06f 0202 	mvn.w	r2, #2
 80029d4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	2201      	movs	r2, #1
 80029da:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	699b      	ldr	r3, [r3, #24]
 80029e2:	f003 0303 	and.w	r3, r3, #3
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d003      	beq.n	80029f2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80029ea:	6878      	ldr	r0, [r7, #4]
 80029ec:	f000 f9b4 	bl	8002d58 <HAL_TIM_IC_CaptureCallback>
 80029f0:	e005      	b.n	80029fe <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80029f2:	6878      	ldr	r0, [r7, #4]
 80029f4:	f000 f9a7 	bl	8002d46 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80029f8:	6878      	ldr	r0, [r7, #4]
 80029fa:	f000 f9b6 	bl	8002d6a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	2200      	movs	r2, #0
 8002a02:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	691b      	ldr	r3, [r3, #16]
 8002a0a:	f003 0304 	and.w	r3, r3, #4
 8002a0e:	2b04      	cmp	r3, #4
 8002a10:	d122      	bne.n	8002a58 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	68db      	ldr	r3, [r3, #12]
 8002a18:	f003 0304 	and.w	r3, r3, #4
 8002a1c:	2b04      	cmp	r3, #4
 8002a1e:	d11b      	bne.n	8002a58 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f06f 0204 	mvn.w	r2, #4
 8002a28:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	2202      	movs	r2, #2
 8002a2e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	699b      	ldr	r3, [r3, #24]
 8002a36:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d003      	beq.n	8002a46 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a3e:	6878      	ldr	r0, [r7, #4]
 8002a40:	f000 f98a 	bl	8002d58 <HAL_TIM_IC_CaptureCallback>
 8002a44:	e005      	b.n	8002a52 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a46:	6878      	ldr	r0, [r7, #4]
 8002a48:	f000 f97d 	bl	8002d46 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a4c:	6878      	ldr	r0, [r7, #4]
 8002a4e:	f000 f98c 	bl	8002d6a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	2200      	movs	r2, #0
 8002a56:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	691b      	ldr	r3, [r3, #16]
 8002a5e:	f003 0308 	and.w	r3, r3, #8
 8002a62:	2b08      	cmp	r3, #8
 8002a64:	d122      	bne.n	8002aac <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	68db      	ldr	r3, [r3, #12]
 8002a6c:	f003 0308 	and.w	r3, r3, #8
 8002a70:	2b08      	cmp	r3, #8
 8002a72:	d11b      	bne.n	8002aac <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f06f 0208 	mvn.w	r2, #8
 8002a7c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	2204      	movs	r2, #4
 8002a82:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	69db      	ldr	r3, [r3, #28]
 8002a8a:	f003 0303 	and.w	r3, r3, #3
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d003      	beq.n	8002a9a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a92:	6878      	ldr	r0, [r7, #4]
 8002a94:	f000 f960 	bl	8002d58 <HAL_TIM_IC_CaptureCallback>
 8002a98:	e005      	b.n	8002aa6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a9a:	6878      	ldr	r0, [r7, #4]
 8002a9c:	f000 f953 	bl	8002d46 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002aa0:	6878      	ldr	r0, [r7, #4]
 8002aa2:	f000 f962 	bl	8002d6a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	691b      	ldr	r3, [r3, #16]
 8002ab2:	f003 0310 	and.w	r3, r3, #16
 8002ab6:	2b10      	cmp	r3, #16
 8002ab8:	d122      	bne.n	8002b00 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	68db      	ldr	r3, [r3, #12]
 8002ac0:	f003 0310 	and.w	r3, r3, #16
 8002ac4:	2b10      	cmp	r3, #16
 8002ac6:	d11b      	bne.n	8002b00 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f06f 0210 	mvn.w	r2, #16
 8002ad0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	2208      	movs	r2, #8
 8002ad6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	69db      	ldr	r3, [r3, #28]
 8002ade:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d003      	beq.n	8002aee <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002ae6:	6878      	ldr	r0, [r7, #4]
 8002ae8:	f000 f936 	bl	8002d58 <HAL_TIM_IC_CaptureCallback>
 8002aec:	e005      	b.n	8002afa <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002aee:	6878      	ldr	r0, [r7, #4]
 8002af0:	f000 f929 	bl	8002d46 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002af4:	6878      	ldr	r0, [r7, #4]
 8002af6:	f000 f938 	bl	8002d6a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	2200      	movs	r2, #0
 8002afe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	691b      	ldr	r3, [r3, #16]
 8002b06:	f003 0301 	and.w	r3, r3, #1
 8002b0a:	2b01      	cmp	r3, #1
 8002b0c:	d10e      	bne.n	8002b2c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	68db      	ldr	r3, [r3, #12]
 8002b14:	f003 0301 	and.w	r3, r3, #1
 8002b18:	2b01      	cmp	r3, #1
 8002b1a:	d107      	bne.n	8002b2c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f06f 0201 	mvn.w	r2, #1
 8002b24:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002b26:	6878      	ldr	r0, [r7, #4]
 8002b28:	f7fe f860 	bl	8000bec <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	691b      	ldr	r3, [r3, #16]
 8002b32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b36:	2b80      	cmp	r3, #128	; 0x80
 8002b38:	d10e      	bne.n	8002b58 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	68db      	ldr	r3, [r3, #12]
 8002b40:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b44:	2b80      	cmp	r3, #128	; 0x80
 8002b46:	d107      	bne.n	8002b58 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002b50:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002b52:	6878      	ldr	r0, [r7, #4]
 8002b54:	f000 fa6b 	bl	800302e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	691b      	ldr	r3, [r3, #16]
 8002b5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b62:	2b40      	cmp	r3, #64	; 0x40
 8002b64:	d10e      	bne.n	8002b84 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	68db      	ldr	r3, [r3, #12]
 8002b6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b70:	2b40      	cmp	r3, #64	; 0x40
 8002b72:	d107      	bne.n	8002b84 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002b7c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002b7e:	6878      	ldr	r0, [r7, #4]
 8002b80:	f000 f8fc 	bl	8002d7c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	691b      	ldr	r3, [r3, #16]
 8002b8a:	f003 0320 	and.w	r3, r3, #32
 8002b8e:	2b20      	cmp	r3, #32
 8002b90:	d10e      	bne.n	8002bb0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	68db      	ldr	r3, [r3, #12]
 8002b98:	f003 0320 	and.w	r3, r3, #32
 8002b9c:	2b20      	cmp	r3, #32
 8002b9e:	d107      	bne.n	8002bb0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f06f 0220 	mvn.w	r2, #32
 8002ba8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002baa:	6878      	ldr	r0, [r7, #4]
 8002bac:	f000 fa36 	bl	800301c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002bb0:	bf00      	nop
 8002bb2:	3708      	adds	r7, #8
 8002bb4:	46bd      	mov	sp, r7
 8002bb6:	bd80      	pop	{r7, pc}

08002bb8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	b084      	sub	sp, #16
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	6078      	str	r0, [r7, #4]
 8002bc0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002bc2:	2300      	movs	r3, #0
 8002bc4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002bcc:	2b01      	cmp	r3, #1
 8002bce:	d101      	bne.n	8002bd4 <HAL_TIM_ConfigClockSource+0x1c>
 8002bd0:	2302      	movs	r3, #2
 8002bd2:	e0b4      	b.n	8002d3e <HAL_TIM_ConfigClockSource+0x186>
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	2201      	movs	r2, #1
 8002bd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	2202      	movs	r2, #2
 8002be0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	689b      	ldr	r3, [r3, #8]
 8002bea:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002bec:	68bb      	ldr	r3, [r7, #8]
 8002bee:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002bf2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002bf4:	68bb      	ldr	r3, [r7, #8]
 8002bf6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002bfa:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	68ba      	ldr	r2, [r7, #8]
 8002c02:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002c04:	683b      	ldr	r3, [r7, #0]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002c0c:	d03e      	beq.n	8002c8c <HAL_TIM_ConfigClockSource+0xd4>
 8002c0e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002c12:	f200 8087 	bhi.w	8002d24 <HAL_TIM_ConfigClockSource+0x16c>
 8002c16:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c1a:	f000 8086 	beq.w	8002d2a <HAL_TIM_ConfigClockSource+0x172>
 8002c1e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c22:	d87f      	bhi.n	8002d24 <HAL_TIM_ConfigClockSource+0x16c>
 8002c24:	2b70      	cmp	r3, #112	; 0x70
 8002c26:	d01a      	beq.n	8002c5e <HAL_TIM_ConfigClockSource+0xa6>
 8002c28:	2b70      	cmp	r3, #112	; 0x70
 8002c2a:	d87b      	bhi.n	8002d24 <HAL_TIM_ConfigClockSource+0x16c>
 8002c2c:	2b60      	cmp	r3, #96	; 0x60
 8002c2e:	d050      	beq.n	8002cd2 <HAL_TIM_ConfigClockSource+0x11a>
 8002c30:	2b60      	cmp	r3, #96	; 0x60
 8002c32:	d877      	bhi.n	8002d24 <HAL_TIM_ConfigClockSource+0x16c>
 8002c34:	2b50      	cmp	r3, #80	; 0x50
 8002c36:	d03c      	beq.n	8002cb2 <HAL_TIM_ConfigClockSource+0xfa>
 8002c38:	2b50      	cmp	r3, #80	; 0x50
 8002c3a:	d873      	bhi.n	8002d24 <HAL_TIM_ConfigClockSource+0x16c>
 8002c3c:	2b40      	cmp	r3, #64	; 0x40
 8002c3e:	d058      	beq.n	8002cf2 <HAL_TIM_ConfigClockSource+0x13a>
 8002c40:	2b40      	cmp	r3, #64	; 0x40
 8002c42:	d86f      	bhi.n	8002d24 <HAL_TIM_ConfigClockSource+0x16c>
 8002c44:	2b30      	cmp	r3, #48	; 0x30
 8002c46:	d064      	beq.n	8002d12 <HAL_TIM_ConfigClockSource+0x15a>
 8002c48:	2b30      	cmp	r3, #48	; 0x30
 8002c4a:	d86b      	bhi.n	8002d24 <HAL_TIM_ConfigClockSource+0x16c>
 8002c4c:	2b20      	cmp	r3, #32
 8002c4e:	d060      	beq.n	8002d12 <HAL_TIM_ConfigClockSource+0x15a>
 8002c50:	2b20      	cmp	r3, #32
 8002c52:	d867      	bhi.n	8002d24 <HAL_TIM_ConfigClockSource+0x16c>
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d05c      	beq.n	8002d12 <HAL_TIM_ConfigClockSource+0x15a>
 8002c58:	2b10      	cmp	r3, #16
 8002c5a:	d05a      	beq.n	8002d12 <HAL_TIM_ConfigClockSource+0x15a>
 8002c5c:	e062      	b.n	8002d24 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	6818      	ldr	r0, [r3, #0]
 8002c62:	683b      	ldr	r3, [r7, #0]
 8002c64:	6899      	ldr	r1, [r3, #8]
 8002c66:	683b      	ldr	r3, [r7, #0]
 8002c68:	685a      	ldr	r2, [r3, #4]
 8002c6a:	683b      	ldr	r3, [r7, #0]
 8002c6c:	68db      	ldr	r3, [r3, #12]
 8002c6e:	f000 f95e 	bl	8002f2e <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	689b      	ldr	r3, [r3, #8]
 8002c78:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002c7a:	68bb      	ldr	r3, [r7, #8]
 8002c7c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002c80:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	68ba      	ldr	r2, [r7, #8]
 8002c88:	609a      	str	r2, [r3, #8]
      break;
 8002c8a:	e04f      	b.n	8002d2c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	6818      	ldr	r0, [r3, #0]
 8002c90:	683b      	ldr	r3, [r7, #0]
 8002c92:	6899      	ldr	r1, [r3, #8]
 8002c94:	683b      	ldr	r3, [r7, #0]
 8002c96:	685a      	ldr	r2, [r3, #4]
 8002c98:	683b      	ldr	r3, [r7, #0]
 8002c9a:	68db      	ldr	r3, [r3, #12]
 8002c9c:	f000 f947 	bl	8002f2e <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	689a      	ldr	r2, [r3, #8]
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002cae:	609a      	str	r2, [r3, #8]
      break;
 8002cb0:	e03c      	b.n	8002d2c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	6818      	ldr	r0, [r3, #0]
 8002cb6:	683b      	ldr	r3, [r7, #0]
 8002cb8:	6859      	ldr	r1, [r3, #4]
 8002cba:	683b      	ldr	r3, [r7, #0]
 8002cbc:	68db      	ldr	r3, [r3, #12]
 8002cbe:	461a      	mov	r2, r3
 8002cc0:	f000 f8be 	bl	8002e40 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	2150      	movs	r1, #80	; 0x50
 8002cca:	4618      	mov	r0, r3
 8002ccc:	f000 f915 	bl	8002efa <TIM_ITRx_SetConfig>
      break;
 8002cd0:	e02c      	b.n	8002d2c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	6818      	ldr	r0, [r3, #0]
 8002cd6:	683b      	ldr	r3, [r7, #0]
 8002cd8:	6859      	ldr	r1, [r3, #4]
 8002cda:	683b      	ldr	r3, [r7, #0]
 8002cdc:	68db      	ldr	r3, [r3, #12]
 8002cde:	461a      	mov	r2, r3
 8002ce0:	f000 f8dc 	bl	8002e9c <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	2160      	movs	r1, #96	; 0x60
 8002cea:	4618      	mov	r0, r3
 8002cec:	f000 f905 	bl	8002efa <TIM_ITRx_SetConfig>
      break;
 8002cf0:	e01c      	b.n	8002d2c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	6818      	ldr	r0, [r3, #0]
 8002cf6:	683b      	ldr	r3, [r7, #0]
 8002cf8:	6859      	ldr	r1, [r3, #4]
 8002cfa:	683b      	ldr	r3, [r7, #0]
 8002cfc:	68db      	ldr	r3, [r3, #12]
 8002cfe:	461a      	mov	r2, r3
 8002d00:	f000 f89e 	bl	8002e40 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	2140      	movs	r1, #64	; 0x40
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	f000 f8f5 	bl	8002efa <TIM_ITRx_SetConfig>
      break;
 8002d10:	e00c      	b.n	8002d2c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681a      	ldr	r2, [r3, #0]
 8002d16:	683b      	ldr	r3, [r7, #0]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	4619      	mov	r1, r3
 8002d1c:	4610      	mov	r0, r2
 8002d1e:	f000 f8ec 	bl	8002efa <TIM_ITRx_SetConfig>
      break;
 8002d22:	e003      	b.n	8002d2c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002d24:	2301      	movs	r3, #1
 8002d26:	73fb      	strb	r3, [r7, #15]
      break;
 8002d28:	e000      	b.n	8002d2c <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002d2a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	2201      	movs	r2, #1
 8002d30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	2200      	movs	r2, #0
 8002d38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002d3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d3e:	4618      	mov	r0, r3
 8002d40:	3710      	adds	r7, #16
 8002d42:	46bd      	mov	sp, r7
 8002d44:	bd80      	pop	{r7, pc}

08002d46 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002d46:	b480      	push	{r7}
 8002d48:	b083      	sub	sp, #12
 8002d4a:	af00      	add	r7, sp, #0
 8002d4c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002d4e:	bf00      	nop
 8002d50:	370c      	adds	r7, #12
 8002d52:	46bd      	mov	sp, r7
 8002d54:	bc80      	pop	{r7}
 8002d56:	4770      	bx	lr

08002d58 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002d58:	b480      	push	{r7}
 8002d5a:	b083      	sub	sp, #12
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002d60:	bf00      	nop
 8002d62:	370c      	adds	r7, #12
 8002d64:	46bd      	mov	sp, r7
 8002d66:	bc80      	pop	{r7}
 8002d68:	4770      	bx	lr

08002d6a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002d6a:	b480      	push	{r7}
 8002d6c:	b083      	sub	sp, #12
 8002d6e:	af00      	add	r7, sp, #0
 8002d70:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002d72:	bf00      	nop
 8002d74:	370c      	adds	r7, #12
 8002d76:	46bd      	mov	sp, r7
 8002d78:	bc80      	pop	{r7}
 8002d7a:	4770      	bx	lr

08002d7c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002d7c:	b480      	push	{r7}
 8002d7e:	b083      	sub	sp, #12
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002d84:	bf00      	nop
 8002d86:	370c      	adds	r7, #12
 8002d88:	46bd      	mov	sp, r7
 8002d8a:	bc80      	pop	{r7}
 8002d8c:	4770      	bx	lr
	...

08002d90 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002d90:	b480      	push	{r7}
 8002d92:	b085      	sub	sp, #20
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	6078      	str	r0, [r7, #4]
 8002d98:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	4a25      	ldr	r2, [pc, #148]	; (8002e38 <TIM_Base_SetConfig+0xa8>)
 8002da4:	4293      	cmp	r3, r2
 8002da6:	d007      	beq.n	8002db8 <TIM_Base_SetConfig+0x28>
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002dae:	d003      	beq.n	8002db8 <TIM_Base_SetConfig+0x28>
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	4a22      	ldr	r2, [pc, #136]	; (8002e3c <TIM_Base_SetConfig+0xac>)
 8002db4:	4293      	cmp	r3, r2
 8002db6:	d108      	bne.n	8002dca <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002dbe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002dc0:	683b      	ldr	r3, [r7, #0]
 8002dc2:	685b      	ldr	r3, [r3, #4]
 8002dc4:	68fa      	ldr	r2, [r7, #12]
 8002dc6:	4313      	orrs	r3, r2
 8002dc8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	4a1a      	ldr	r2, [pc, #104]	; (8002e38 <TIM_Base_SetConfig+0xa8>)
 8002dce:	4293      	cmp	r3, r2
 8002dd0:	d007      	beq.n	8002de2 <TIM_Base_SetConfig+0x52>
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002dd8:	d003      	beq.n	8002de2 <TIM_Base_SetConfig+0x52>
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	4a17      	ldr	r2, [pc, #92]	; (8002e3c <TIM_Base_SetConfig+0xac>)
 8002dde:	4293      	cmp	r3, r2
 8002de0:	d108      	bne.n	8002df4 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002de8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002dea:	683b      	ldr	r3, [r7, #0]
 8002dec:	68db      	ldr	r3, [r3, #12]
 8002dee:	68fa      	ldr	r2, [r7, #12]
 8002df0:	4313      	orrs	r3, r2
 8002df2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002dfa:	683b      	ldr	r3, [r7, #0]
 8002dfc:	695b      	ldr	r3, [r3, #20]
 8002dfe:	4313      	orrs	r3, r2
 8002e00:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	68fa      	ldr	r2, [r7, #12]
 8002e06:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002e08:	683b      	ldr	r3, [r7, #0]
 8002e0a:	689a      	ldr	r2, [r3, #8]
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002e10:	683b      	ldr	r3, [r7, #0]
 8002e12:	681a      	ldr	r2, [r3, #0]
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	4a07      	ldr	r2, [pc, #28]	; (8002e38 <TIM_Base_SetConfig+0xa8>)
 8002e1c:	4293      	cmp	r3, r2
 8002e1e:	d103      	bne.n	8002e28 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002e20:	683b      	ldr	r3, [r7, #0]
 8002e22:	691a      	ldr	r2, [r3, #16]
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	2201      	movs	r2, #1
 8002e2c:	615a      	str	r2, [r3, #20]
}
 8002e2e:	bf00      	nop
 8002e30:	3714      	adds	r7, #20
 8002e32:	46bd      	mov	sp, r7
 8002e34:	bc80      	pop	{r7}
 8002e36:	4770      	bx	lr
 8002e38:	40012c00 	.word	0x40012c00
 8002e3c:	40000400 	.word	0x40000400

08002e40 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002e40:	b480      	push	{r7}
 8002e42:	b087      	sub	sp, #28
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	60f8      	str	r0, [r7, #12]
 8002e48:	60b9      	str	r1, [r7, #8]
 8002e4a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	6a1b      	ldr	r3, [r3, #32]
 8002e50:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	6a1b      	ldr	r3, [r3, #32]
 8002e56:	f023 0201 	bic.w	r2, r3, #1
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	699b      	ldr	r3, [r3, #24]
 8002e62:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002e64:	693b      	ldr	r3, [r7, #16]
 8002e66:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002e6a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	011b      	lsls	r3, r3, #4
 8002e70:	693a      	ldr	r2, [r7, #16]
 8002e72:	4313      	orrs	r3, r2
 8002e74:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002e76:	697b      	ldr	r3, [r7, #20]
 8002e78:	f023 030a 	bic.w	r3, r3, #10
 8002e7c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002e7e:	697a      	ldr	r2, [r7, #20]
 8002e80:	68bb      	ldr	r3, [r7, #8]
 8002e82:	4313      	orrs	r3, r2
 8002e84:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	693a      	ldr	r2, [r7, #16]
 8002e8a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	697a      	ldr	r2, [r7, #20]
 8002e90:	621a      	str	r2, [r3, #32]
}
 8002e92:	bf00      	nop
 8002e94:	371c      	adds	r7, #28
 8002e96:	46bd      	mov	sp, r7
 8002e98:	bc80      	pop	{r7}
 8002e9a:	4770      	bx	lr

08002e9c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002e9c:	b480      	push	{r7}
 8002e9e:	b087      	sub	sp, #28
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	60f8      	str	r0, [r7, #12]
 8002ea4:	60b9      	str	r1, [r7, #8]
 8002ea6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	6a1b      	ldr	r3, [r3, #32]
 8002eac:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	6a1b      	ldr	r3, [r3, #32]
 8002eb2:	f023 0210 	bic.w	r2, r3, #16
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	699b      	ldr	r3, [r3, #24]
 8002ebe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002ec0:	693b      	ldr	r3, [r7, #16]
 8002ec2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002ec6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	031b      	lsls	r3, r3, #12
 8002ecc:	693a      	ldr	r2, [r7, #16]
 8002ece:	4313      	orrs	r3, r2
 8002ed0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002ed2:	697b      	ldr	r3, [r7, #20]
 8002ed4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002ed8:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002eda:	68bb      	ldr	r3, [r7, #8]
 8002edc:	011b      	lsls	r3, r3, #4
 8002ede:	697a      	ldr	r2, [r7, #20]
 8002ee0:	4313      	orrs	r3, r2
 8002ee2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	693a      	ldr	r2, [r7, #16]
 8002ee8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	697a      	ldr	r2, [r7, #20]
 8002eee:	621a      	str	r2, [r3, #32]
}
 8002ef0:	bf00      	nop
 8002ef2:	371c      	adds	r7, #28
 8002ef4:	46bd      	mov	sp, r7
 8002ef6:	bc80      	pop	{r7}
 8002ef8:	4770      	bx	lr

08002efa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002efa:	b480      	push	{r7}
 8002efc:	b085      	sub	sp, #20
 8002efe:	af00      	add	r7, sp, #0
 8002f00:	6078      	str	r0, [r7, #4]
 8002f02:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	689b      	ldr	r3, [r3, #8]
 8002f08:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f10:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002f12:	683a      	ldr	r2, [r7, #0]
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	4313      	orrs	r3, r2
 8002f18:	f043 0307 	orr.w	r3, r3, #7
 8002f1c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	68fa      	ldr	r2, [r7, #12]
 8002f22:	609a      	str	r2, [r3, #8]
}
 8002f24:	bf00      	nop
 8002f26:	3714      	adds	r7, #20
 8002f28:	46bd      	mov	sp, r7
 8002f2a:	bc80      	pop	{r7}
 8002f2c:	4770      	bx	lr

08002f2e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002f2e:	b480      	push	{r7}
 8002f30:	b087      	sub	sp, #28
 8002f32:	af00      	add	r7, sp, #0
 8002f34:	60f8      	str	r0, [r7, #12]
 8002f36:	60b9      	str	r1, [r7, #8]
 8002f38:	607a      	str	r2, [r7, #4]
 8002f3a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	689b      	ldr	r3, [r3, #8]
 8002f40:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002f42:	697b      	ldr	r3, [r7, #20]
 8002f44:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002f48:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002f4a:	683b      	ldr	r3, [r7, #0]
 8002f4c:	021a      	lsls	r2, r3, #8
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	431a      	orrs	r2, r3
 8002f52:	68bb      	ldr	r3, [r7, #8]
 8002f54:	4313      	orrs	r3, r2
 8002f56:	697a      	ldr	r2, [r7, #20]
 8002f58:	4313      	orrs	r3, r2
 8002f5a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	697a      	ldr	r2, [r7, #20]
 8002f60:	609a      	str	r2, [r3, #8]
}
 8002f62:	bf00      	nop
 8002f64:	371c      	adds	r7, #28
 8002f66:	46bd      	mov	sp, r7
 8002f68:	bc80      	pop	{r7}
 8002f6a:	4770      	bx	lr

08002f6c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002f6c:	b480      	push	{r7}
 8002f6e:	b085      	sub	sp, #20
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	6078      	str	r0, [r7, #4]
 8002f74:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f7c:	2b01      	cmp	r3, #1
 8002f7e:	d101      	bne.n	8002f84 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002f80:	2302      	movs	r3, #2
 8002f82:	e041      	b.n	8003008 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	2201      	movs	r2, #1
 8002f88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	2202      	movs	r2, #2
 8002f90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	685b      	ldr	r3, [r3, #4]
 8002f9a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	689b      	ldr	r3, [r3, #8]
 8002fa2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002faa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002fac:	683b      	ldr	r3, [r7, #0]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	68fa      	ldr	r2, [r7, #12]
 8002fb2:	4313      	orrs	r3, r2
 8002fb4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	68fa      	ldr	r2, [r7, #12]
 8002fbc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	4a14      	ldr	r2, [pc, #80]	; (8003014 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002fc4:	4293      	cmp	r3, r2
 8002fc6:	d009      	beq.n	8002fdc <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002fd0:	d004      	beq.n	8002fdc <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	4a10      	ldr	r2, [pc, #64]	; (8003018 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002fd8:	4293      	cmp	r3, r2
 8002fda:	d10c      	bne.n	8002ff6 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002fdc:	68bb      	ldr	r3, [r7, #8]
 8002fde:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002fe2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002fe4:	683b      	ldr	r3, [r7, #0]
 8002fe6:	685b      	ldr	r3, [r3, #4]
 8002fe8:	68ba      	ldr	r2, [r7, #8]
 8002fea:	4313      	orrs	r3, r2
 8002fec:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	68ba      	ldr	r2, [r7, #8]
 8002ff4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	2201      	movs	r2, #1
 8002ffa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	2200      	movs	r2, #0
 8003002:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003006:	2300      	movs	r3, #0
}
 8003008:	4618      	mov	r0, r3
 800300a:	3714      	adds	r7, #20
 800300c:	46bd      	mov	sp, r7
 800300e:	bc80      	pop	{r7}
 8003010:	4770      	bx	lr
 8003012:	bf00      	nop
 8003014:	40012c00 	.word	0x40012c00
 8003018:	40000400 	.word	0x40000400

0800301c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800301c:	b480      	push	{r7}
 800301e:	b083      	sub	sp, #12
 8003020:	af00      	add	r7, sp, #0
 8003022:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003024:	bf00      	nop
 8003026:	370c      	adds	r7, #12
 8003028:	46bd      	mov	sp, r7
 800302a:	bc80      	pop	{r7}
 800302c:	4770      	bx	lr

0800302e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800302e:	b480      	push	{r7}
 8003030:	b083      	sub	sp, #12
 8003032:	af00      	add	r7, sp, #0
 8003034:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003036:	bf00      	nop
 8003038:	370c      	adds	r7, #12
 800303a:	46bd      	mov	sp, r7
 800303c:	bc80      	pop	{r7}
 800303e:	4770      	bx	lr

08003040 <__libc_init_array>:
 8003040:	b570      	push	{r4, r5, r6, lr}
 8003042:	2600      	movs	r6, #0
 8003044:	4d0c      	ldr	r5, [pc, #48]	; (8003078 <__libc_init_array+0x38>)
 8003046:	4c0d      	ldr	r4, [pc, #52]	; (800307c <__libc_init_array+0x3c>)
 8003048:	1b64      	subs	r4, r4, r5
 800304a:	10a4      	asrs	r4, r4, #2
 800304c:	42a6      	cmp	r6, r4
 800304e:	d109      	bne.n	8003064 <__libc_init_array+0x24>
 8003050:	f000 f822 	bl	8003098 <_init>
 8003054:	2600      	movs	r6, #0
 8003056:	4d0a      	ldr	r5, [pc, #40]	; (8003080 <__libc_init_array+0x40>)
 8003058:	4c0a      	ldr	r4, [pc, #40]	; (8003084 <__libc_init_array+0x44>)
 800305a:	1b64      	subs	r4, r4, r5
 800305c:	10a4      	asrs	r4, r4, #2
 800305e:	42a6      	cmp	r6, r4
 8003060:	d105      	bne.n	800306e <__libc_init_array+0x2e>
 8003062:	bd70      	pop	{r4, r5, r6, pc}
 8003064:	f855 3b04 	ldr.w	r3, [r5], #4
 8003068:	4798      	blx	r3
 800306a:	3601      	adds	r6, #1
 800306c:	e7ee      	b.n	800304c <__libc_init_array+0xc>
 800306e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003072:	4798      	blx	r3
 8003074:	3601      	adds	r6, #1
 8003076:	e7f2      	b.n	800305e <__libc_init_array+0x1e>
 8003078:	080030d4 	.word	0x080030d4
 800307c:	080030d4 	.word	0x080030d4
 8003080:	080030d4 	.word	0x080030d4
 8003084:	080030d8 	.word	0x080030d8

08003088 <memset>:
 8003088:	4603      	mov	r3, r0
 800308a:	4402      	add	r2, r0
 800308c:	4293      	cmp	r3, r2
 800308e:	d100      	bne.n	8003092 <memset+0xa>
 8003090:	4770      	bx	lr
 8003092:	f803 1b01 	strb.w	r1, [r3], #1
 8003096:	e7f9      	b.n	800308c <memset+0x4>

08003098 <_init>:
 8003098:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800309a:	bf00      	nop
 800309c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800309e:	bc08      	pop	{r3}
 80030a0:	469e      	mov	lr, r3
 80030a2:	4770      	bx	lr

080030a4 <_fini>:
 80030a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80030a6:	bf00      	nop
 80030a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80030aa:	bc08      	pop	{r3}
 80030ac:	469e      	mov	lr, r3
 80030ae:	4770      	bx	lr
